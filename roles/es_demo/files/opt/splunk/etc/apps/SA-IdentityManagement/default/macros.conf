
###### Global ######
[categories]
args = 
definition = inputlookup append=T category_lookup | `lower(category)` | dedup category | sort + category
errormsg =
iseval = 0
validation =

[get_bunit(1)]
args = bunit
definition = (tag="$bunit$" OR bunit="$bunit$" OR ((host_bunit="$bunit$" OR host_owner_bunit="$bunit$") NOT sourcetype=stash) OR orig_host_bunit="$bunit$" OR src_bunit="$bunit$" OR dest_bunit="$bunit$" OR dvc_bunit="$bunit$" OR src_user_bunit="$bunit$" OR user_bunit="$bunit$" OR orig_host_owner_bunit="$bunit$" OR src_owner_bunit="$bunit$" OR dest_owner_bunit="$bunit$" OR dvc_owner_bunit="$bunit$")
errormsg =
iseval = 0
validation =

[get_category(1)]
args = category
definition = (tag="$category$" OR category="$category$" OR ((host_category="$category$" OR host_owner_category="$category$") NOT sourcetype=stash) OR orig_host_category="$category$" OR src_category="$category$" OR dest_category="$category$" OR dvc_category="$category$" OR src_user_category="$category$" OR user_category="$category$" OR orig_host_owner_category="$category$" OR src_owner_category="$category$" OR dest_owner_category="$category$" OR dvc_owner_category="$category$")
errormsg =
iseval = 0
validation =

## make_category (from SV) macro breakdown
## 1 -  Make category a MV field
## 2 -  Repeat make_category_fromMV below
[make_category(1)]
args = category
definition = `makemv($category$)` | `make_category_fromMV($category$)`
errormsg =
iseval = 0
validation =

## make_category_fromMV macro breakdown
## 1 -  If category contains "cardholder" but not "pci" add "pci"
[make_category_fromMV(1)]
args = category
definition = eval $category$=if($category$=="cardholder" AND $category$!="pci",mvappend($category$,"pci"),$category$)
errormsg =
iseval = 0
validation =


###### Asset Management ######
[assets]
args = 
definition = inputlookup append=T asset_lookup_by_str | inputlookup append=t asset_lookup_by_cidr_raw | fields key | dedup key | lookup update=true asset_lookup_by_str key as key OUTPUTNEW asset_id,ip,mac,nt_host,dns,owner,priority,lat,long,city,country,bunit,category,pci_domain,is_expected,should_timesync,should_update,requires_av,asset_tag | lookup update=true asset_lookup_by_cidr_raw key AS key OUTPUTNEW asset_id,ip,mac,nt_host,dns,owner,priority,lat,long,city,country,bunit,category,pci_domain,is_expected,should_timesync,should_update,requires_av,asset_tag | rename key as asset | eventstats values(asset) as asset, values(ip) as ip by asset_id | dedup asset_id | `mvappend_field(tag,bunit)` | `mvappend_field(tag,category)` | `mvappend_is(tag,"expected")` | `mvappend_should(tag,"timesync")` | `mvappend_should(tag,"update")` | `mvappend_requires(tag,"av")`
errormsg =
iseval = 0
validation =

[get_asset_id]
args =
definition = eval asset_id_ip=ip | eval asset_id_mac=mac | eval asset_id_nt_host=nt_host | eval asset_id_dns=dns | fillnull value="" asset_id_ip,asset_id_mac,asset_id_nt_host,asset_id_dns | eval asset_id=sha1(asset_id_ip.asset_id_mac.asset_id_nt_host.asset_id_dns) | eval asset_id=if(asset_id=="da39a3ee5e6b4b0d3255bfef95601890afd80709",null(),asset_id) | fields - asset_id_*
errormsg =
iseval = 0
validation =

[get_asset_id(1)]
args = subject
definition = eval asset_id_ip=$subject$_ip | eval asset_id_mac=$subject$_mac | eval asset_id_nt_host=$subject$_nt_host | eval asset_id_dns=$subject$_dns | fillnull value="" asset_id_ip,asset_id_mac,asset_id_nt_host,asset_id_dns | eval $subject$_asset_id=sha1(asset_id_ip.asset_id_mac.asset_id_nt_host.asset_id_dns) | eval $subject$_asset_id=if($subject$_asset_id=="da39a3ee5e6b4b0d3255bfef95601890afd80709",null(),$subject$_asset_id) | fields - asset_id_*
errormsg = subject (arg1) must be one of: host, orig_host, src, dest, or dvc
iseval = 0
validation = subject=="host" OR subject=="orig_host" OR subject=="src" OR subject=="dest" OR subject=="dvc"

[prepend_assets(1)]
args = subject
definition =  rename asset_id as $subject$_asset_id | rename ip as $subject$_ip | rename mac as $subject$_mac | rename nt_host as $subject$_nt_host | rename dns as $subject$_dns | rename owner as $subject$_owner | rename priority as $subject$_priority | rename lat as $subject$_lat | rename long as $subject$_long | rename city as $subject$_city | rename country as $subject$_country | rename bunit as $subject$_bunit | rename category as $subject$_category | rename pci_domain as $subject$_pci_domain | rename is_expected as $subject$_is_expected | rename should_timesync as $subject$_should_timesync | rename should_update as $subject$_should_update | rename requires_av as $subject$_requires_av
errormsg =
iseval = 0
validation =

[unprepend_assets(1)]
args = subject
definition =  rename $subject$_asset_id as asset_id | rename $subject$_ip as ip | rename $subject$_mac as mac | rename $subject$_nt_host as nt_host | rename $subject$_dns as dns | rename $subject$_owner as owner | rename $subject$_priority as priority | rename $subject$_lat as lat | rename $subject$_long as long | rename $subject$_city as city | rename $subject$_country as country | rename $subject$_bunit as bunit | rename $subject$_category as category | rename $subject$_pci_domain as pci_domain | rename $subject$_is_expected as is_expected | rename $subject$_should_timesync as should_timesync | rename $subject$_should_update as should_update | rename $subject$_requires_av as requires_av
errormsg =
iseval = 0
validation =

[get_asset_simple(1)]
args = subject
definition = (dns="$subject$" OR nt_host="$subject$" OR mac="$subject$" OR ip="$subject$")
errormsg =
iseval =
validation =

[get_asset(1)]
args = subject
definition = `get_asset_by("str",$subject$)` | `get_asset_by("cidr",$subject$)` | `mvappend_field(tag,$subject$_asset_tag)` | lookup asset_lookup_default_fields key as $subject$ OUTPUTNEW pci_domain as $subject$_pci_domain, is_expected as $subject$_is_expected, requires_av as $subject$_requires_av, should_timesync as $subject$_should_timesync, should_update as $subject$_should_update

[get_asset_by(2)]
args = key,subject
definition = lookup update=true asset_lookup_by_$key$ key as $subject$ OUTPUTNEW asset_id as $subject$_asset_id,ip as $subject$_ip,mac as $subject$_mac, nt_host as $subject$_nt_host,dns as $subject$_dns,owner as $subject$_owner,priority as $subject$_priority,lat as $subject$_lat,long as $subject$_long,city as $subject$_city,country as $subject$_country,bunit as $subject$_bunit,category as $subject$_category,pci_domain as $subject$_pci_domain,is_expected as $subject$_is_expected,should_timesync as $subject$_should_timesync,should_update as $subject$_should_update,requires_av as $subject$_requires_av,asset_tag as $subject$_asset_tag | eval $subject$_ip=case(isnotnull($subject$_asset_id) AND match($subject$, "^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$"),$subject$,$key$=="cidr",null(),1=1,$subject$_ip)
errormsg = key (arg1) must be one of: str or cidr
iseval = 0
validation = (key=="str" OR key=="cidr")

## Global asset search
[asset_search(1)]
args       = val
definition = `get_subject("dest", $val$)` OR `get_subject("dvc", $val$)` OR `get_subject("host", $val$)` OR `get_subject("orig_host", $val$)` OR `get_subject("src", $val$)`
iseval     = false

## Asset Categories
[asset_categories]
args = 
definition = inputlookup append=T category_lookup_from_assets | sort + category
errormsg =
iseval = 0
validation =

## PCI Domains
[pci_domains]
args =
definition = inputlookup append=T pci_domains_lookup | `lower(pci_domain)` | dedup pci_domain | sort + pci_domain
errormsg =
iseval = 0
validation =

## make_pci_domain macro breakdown
## 1 -  Make pci_domain a multi-value field
## 2 -  add "trust" to pci_domain if category is "pci"
## 3 -  add "cardholder" to pci_domain if category is "cardholder"
## 4 -  add "trust" to pci_domain if pci_domain is "cardholder", "dmz", or "wireless" and "trust" was not specified
## 5 -  fill pci_domain as "untrust" if is null
[make_pci_domain(2)]
args = pci_domain,category
definition = `makemv($pci_domain$)` | eval $pci_domain$=if($category$=="pci" AND (isnull($pci_domain$) OR $pci_domain$!="trust"),mvappend($pci_domain$,"trust"),$pci_domain$) | eval $pci_domain$=if($category$=="cardholder" AND (isnull($pci_domain$) OR $pci_domain$!="cardholder"),mvappend($pci_domain$,"cardholder"),$pci_domain$) | eval $pci_domain$=if(($pci_domain$=="cardholder" OR $pci_domain$=="dmz" OR $pci_domain$=="wireless") AND $pci_domain$!="trust",mvappend($pci_domain$,"trust"),$pci_domain$) | fillnull value=untrust $pci_domain$
errormsg =
iseval = 0
validation =

[get_pci_domain(1)]
args = domain
definition = (pci_domain="$domain$" OR (host_pci_domain="$domain$" NOT sourcetype=stash) OR orig_host_pci_domain="$domain$" OR src_pci_domain="$domain$" OR dest_pci_domain="$domain$" OR dvc_pci_domain="$domain$")
errormsg =
iseval = 0
validation =

## Reverse asset lookup breakdown
## 1. Create a single event.
## 2. Set the key field to the value of the value.
## 3. Perform string-based asset lookup.
## 4. Perform CIDR-based asset lookup.
## 5. If the CIDR-based lookup returned a value, use the original input value
##    instead (it does not make sense to return a subnet for the ip field.
## 6. Eliminate the null result case.
## Note: this macro must be prepended by a pipe.
[reverse_asset_lookup(1)]
args = value
definition = stats count | eval key="$value$" | lookup update=true asset_lookup_by_str key OUTPUTNEW asset_id,ip,mac,nt_host,dns,owner,priority,lat,long,city,country,bunit,category,pci_domain,is_expected,should_timesync,should_update,requires_av,asset_tag | lookup update=true asset_lookup_by_cidr key OUTPUTNEW  asset_id,ip,mac,nt_host,dns,owner,priority,lat,long,city,country,bunit,category,pci_domain,is_expected,should_timesync,should_update,requires_av,asset_tag | eval ip=if(match(ip,"/"), key, ip) | where isnotnull(asset_id)
errormsg =
iseval = 0
validation =

###### Identity Management ######
[identities]
definition = inputlookup identity_lookup_expanded | fields identity | dedup identity | `identity_inputlookup(identity)` | eventstats values(identity) as identity by identity_id | dedup identity_id | fields - identity_id | makemv tokenizer="(\S+)+" tag | makemv tokenizer="(\S+)+" category | makemv tokenizer="(\S+)+" identity_tag | sort + identity

[identity_inputlookup(1)]
args = ident
definition = lookup update=true identity_lookup_expanded key as $ident$ OUTPUTNEW identity,prefix,nick,first,last,suffix,email,phone,phone2,managedBy,priority,bunit,category,watchlist,startDate,endDate,identity_tag,identity_id | `mvappend_field(tag,identity_tag)` | lookup identity_lookup_default_fields key as ident OUTPUTNEW watchlist
errormsg = ident (arg1) must be "identity" or "key"
validation = ident=="identity" OR ident=="key"

[get_identity4events(1)]
args = username
definition = lookup update=true identity_lookup_expanded key as $username$ OUTPUTNEW identity as $username$_identity,prefix as $username$_prefix,nick as $username$_nick,first as $username$_first,last as $username$_last,suffix as $username$_suffix,email as $username$_email,phone as $username$_phone,phone2 as $username$_phone2,managedBy as $username$_managedBy,priority as $username$_priority,bunit as $username$_bunit,category as $username$_category,watchlist as $username$_watchlist,startDate as $username$_startDate,endDate as $username$_endDate,identity_tag as $username$_identity_tag | `mvappend_field(tag,$username$_identity_tag)` | lookup identity_lookup_default_fields key as $username$ OUTPUTNEW watchlist as $username$_watchlist
errormsg = username (arg1) must be one of user, src_user, host_owner, orig_host_owner, src_owner, dest_owner, or dvc_owner
iseval = 0
validation = username=="user" OR username=="src_user" OR username=="host_owner" OR username=="orig_host_owner" OR username=="src_owner" OR username=="dest_owner" OR username=="dvc_owner"

[get_events4identity(2)]
args = field, value
definition = (user_$field$="$value$" OR src_user_$field$="$value$" OR (host_owner_$field$="$value$" NOT sourcetype=stash) OR orig_host_owner_$field$="$value$" OR src_owner_$field$="$value$" OR dest_owner_$field$="$value$" OR dvc_owner_$field$="$value$")
errormsg = field (arg1) must be one of identity, prefix, nick, first, last, suffix, email, phone, phone2, managedBy, priority, bunit, category, watchlist, startDate, or endDate
iseval = 0
validation = field=="identity" OR field=="prefix" OR field=="nick" OR field=="first" OR field=="last" OR field=="suffix" OR field=="email" OR field=="phone" OR field=="phone2" OR field=="managedBy" OR field=="priority" OR field=="bunit" OR field=="category" OR field=="watchlist" OR field=="startDate" OR field=="endDate"

## Global identity search by string (e.g. e-mail address)
[identity_search(1)]
args       = val
definition = `get_events4identity(identity, "$val$")` OR `get_events4identity(prefix, "$val$")` OR `get_events4identity(nick, "$val$")` OR `get_events4identity(first, "$val$")` OR `get_events4identity(last, "$val$")` OR `get_events4identity(suffix, "$val$")` OR `get_events4identity(email, "$val$")` OR `get_events4identity(phone, "$val$")` OR `get_events4identity(phone2, "$val$")` OR `get_events4identity(managedBy, "$val$")` OR `get_events4identity(priority, "$val$")` OR `get_events4identity(bunit, "$val$")` OR `get_events4identity(category, "$val$")` OR `get_events4identity(watchlist, "$val$")` OR `get_events4identity(startDate, "$val$")` OR `get_events4identity(endDate, "$val$")`
iseval     = false

## Global identity search by first name, last name or vice-versa
[identity_search(2)]
args       = first, last
definition = (`get_events4identity(first, "$first$")` `get_events4identity(last, "$last$")`) OR (`get_events4identity(last, "$first$")` `get_events4identity(first, "$last$")`)
iseval     = false

## Time Converters
[iden_mktime]
args =
definition =  convert timeformat="%m/%d/%Y %H:%M" mktime(startDate) as startDate | convert timeformat="%m/%d/%Y %H:%M" mktime(endDate) as endDate
errormsg =
iseval = 0
validation =

[iden_ctime]
args =
definition = `ctime(startDate, "%m/%d/%Y %H:%M")` | `ctime(endDate, "%m/%d/%Y %H:%M")`
errormsg =
iseval = 0
validation =

## Identity Categories
[identity_categories]
args = 
definition = inputlookup append=T category_lookup_from_identities | sort + category
errormsg =
iseval = 0
validation =

## Reverse identity lookup breakdown
## 1. Create a single event.
## 2. Set the key field to the value of the value.
## 3. Perform string-based identity lookup.
## 4. Eliminate the null result case.
## Note: this macro must be prepended by a pipe.
[reverse_identity_lookup(1)]
args = value
definition = stats count | eval key="$value$" | lookup update=true identity_lookup_expanded key OUTPUTNEW identity,prefix,nick,first,last,suffix,email,phone,phone2,managedBy,priority,bunit,category,watchlist,startDate,endDate,identity_tag | where isnotnull(identity)
errormsg =
iseval = 0
validation =


###### Session Management ######
[session_start]
definition = tag=network tag=session tag=start | fillnull value=unknown dest_ip,dest_mac,dest_nt_host,dest_dns,user

## sessions/session(1) should always be in sync w/ the exception of "where `session_search($bestmatch$)`"
[sessions]
definition = tstats `summariesonly` count from datamodel=Network_Sessions where nodename=All_Sessions.Session_Start by _time,All_Sessions.dest_ip,All_Sessions.dest_mac,All_Sessions.dest_nt_host,All_Sessions.dest_dns,All_Sessions.user span=1s | `drop_dm_object_name("All_Sessions")` | `unprepend_assets("dest")` | sort 0 - _time | eval startTime=_time | fields _time,ip,mac,nt_host,dns,user,startTime

[sessions(1)]
args       = bestmatch
definition = tstats `summariesonly` count from datamodel=Network_Sessions where nodename=All_Sessions.Session_Start `session_search("$bestmatch$")` by _time,All_Sessions.dest_ip,All_Sessions.dest_mac,All_Sessions.dest_nt_host,All_Sessions.dest_dns,All_Sessions.user span=1s | `drop_dm_object_name("All_Sessions")` | `unprepend_assets("dest")` | sort 0 - _time | eval startTime=_time | fields _time,ip,mac,nt_host,dns,user,startTime

[session_search(1)]
args       = bestmatch
definition = (All_Sessions.dest_ip="$bestmatch$" OR All_Sessions.dest_mac="$bestmatch$" OR All_Sessions.dest_nt_host="$bestmatch$" OR All_Sessions.dest_dns="$bestmatch$" OR All_Sessions.user="$bestmatch$")

## infer logouts
[infer_logouts(1)]
args       = field
definition = streamstats current=false global=false window=1 first(startTime) as endTime by $field$ | eval endTime=if(isnotnull(endTime),endTime-1,endTime) | fields _time,ip,mac,nt_host,dns,user,startTime,endTime
errormsg = field (arg1) must be one of ip, mac, nt_host, dns, user
iseval = 0
validation = field=="ip" OR field=="mac" OR field=="nt_host" OR field=="dns" OR field=="user"
