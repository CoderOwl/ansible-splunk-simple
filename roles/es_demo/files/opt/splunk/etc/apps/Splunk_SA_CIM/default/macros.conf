
#####################
## Global
#####################
[get_signature(1)]
args       = value
definition = (signature="*$value$*" OR signature_id="*$value$*")

[make_subject(1)]
args       = subjectField
definition = eval $subjectField$=case(isnotnull($subjectField$), $subjectField$, isnotnull($subjectField$_dns), $subjectField$_dns, isnotnull($subjectField$_nt_host), $subjectField$_nt_host, isnotnull($subjectField$_mac), $subjectField$_mac, isnotnull($subjectField$_ip), $subjectField$_ip)
errormsg   = subject field (arg1) must be one of: host, orig_host, src, dest, or dvc
iseval     = 0
validation = subjectField=="host" OR subjectField=="orig_host" OR subjectField=="src" OR subjectField=="dest" OR subjectField=="dvc"


## This macro allows seamless searching of all CIM fields for a given subject (host/orig_host/src/dest/dvc)
## Useful when performing drilldowns/drillacross
## For example, `get_subject(src, 1.2.3.4)` produces (src="1.2.3.4" OR src_ip="1.2.3.4" OR src_mac="1.2.3.4" OR src_nt_host="1.2.3.4" OR src_dns="1.2.3.4")
[get_subject(2)]
args       = subjectField, bestmatch
definition = ($subjectField$="$bestmatch$" OR $subjectField$_ip="$bestmatch$" OR $subjectField$_mac="$bestmatch$" OR $subjectField$_nt_host="$bestmatch$" OR $subjectField$_dns="$bestmatch$")
errormsg   = subject field (arg1) must be one of: host, orig_host, src, dest, or dvc
iseval     = 0
validation = subjectField=="host" OR subjectField=="orig_host" OR subjectField=="src" OR subjectField=="dest" OR subjectField=="dvc"


## This macro allows seamless searching of all CIM fields for a given user (src_user/user)
## This macro also performs inference by searching the $user$_identity fields
[get_user(1)]
args       = user
definition = (`get_src_user_only($user$)` OR `get_user_only($user$)`)

[get_src_user_only(1)]
args       = src_user
definition = (src_user="$src_user$" OR src_user_identity="$src_user$")

[get_user_only(1)]
args       = user
definition = (user="$user$" OR user_identity="$user$")


## Swap two fields conditionally based on a tag in the event.
#
#  The tag must be of the form "swap_<field1>_<field2>" AND
#  be in the field named "tagField".
[swap_if_tagged(3)]
args       = first, second, tagField
definition = eval swapTmp=$second$ | eval $second$=if($tagField$="swap_$first$_$second$", $first$, $second$) | eval $first$=if($tagField$="swap_$first$_$second$", swapTmp, $first$)


## Remap fields to account for deficiencies in source data that cannot be
## handled at the TA level.
#
#  Rationale:
#
#  In some cases IDS systems use the CIM field "src" as the field of interest.
#  This is often the case for wireless attacks where the target is a broadcast domain.
#  In this case, we want to map "src" into "dest" so it will show up
#  in the IDS tracker, but ONLY for certain events. This macro does that and
#  is used in many of the base-level macros such as "authentication" to apply such
#  transformations globally.
[remap_subjects]
definition = tags outputfield=evtTags | `swap_if_tagged(src, dest, evtTags)` | fields - evtTags

## vendor_product
[get_vendor_product]
definition = eval vendor_product=case(isnotnull(vendor_product),vendor_product,isnotnull(vendor) AND vendor!="unknown" AND isnotnull(product) AND product!="unknown",vendor." ".product,isnotnull(vendor) AND vendor!="unknown" AND (isnull(product) OR product="unknown"),vendor." unknown",(isnull(vendor) OR vendor="unknown") AND isnotnull(product) AND product!="unknown","unknown ".product,isnotnull(sourcetype),sourcetype,1=1,"unknown")


#####################
## CIM Filters
#####################

[cim_filter_known_scanners]
definition = (host_category!="known_scanner" AND orig_host_category!="known_scanner" AND dvc_category!="known_scanner" AND src_category!="known_scanner" AND dest_category!="known_scanner")

[cim_filter_known_scanners(1)]
args       = object
definition = ($object$.host_category!="known_scanner" AND $object$.orig_host_category!="known_scanner" AND $object$.dvc_category!="known_scanner" AND $object$.src_category!="known_scanner" AND $object$.dest_category!="known_scanner")

[cim_filter_vuln_severity]
definition = (severity!="informational" AND severity!="low")

[cim_filter_vuln_severity(1)]
args       = object
definition = ($object$.severity!="informational" AND $object$.severity!="low")



#####################
## CIM Lookups
#####################

###### Access Protection ######
[cim_access_actions]
definition = inputlookup append=T cim_access_action_lookup | eval action=lower(action) | dedup action

###### Change Analysis #####
[cim_endpoint_actions]
definition = inputlookup append=T cim_endpoint_action_lookup | eval action=lower(action) | dedup action | sort + action

[cim_endpoint_object_categories]
definition = inputlookup append=T cim_endpoint_object_category_lookup | eval object_category=lower(object_category) | dedup object_category | sort + object_category

## no sort here (severity order dictated by order in file)
[cim_endpoint_severities]
definition = inputlookup append=T cim_endpoint_severity_lookup | eval severity=lower(severity) | dedup severity

[cim_endpoint_statuses]
definition = inputlookup append=T cim_endpoint_status_lookup | eval status=lower(status) | dedup status | sort + status

[cim_endpoint_user_types]
definition = inputlookup append=T cim_endpoint_user_type_lookup | eval user_type=lower(user_type) | dedup user_type | sort + user_type

###### IDS ######

## no sort here (severity order dictated by order in file)
[cim_ids_severities]
definition = inputlookup append=T cim_ids_severity_lookup | eval severity=lower(severity) | dedup severity

[cim_ids_types]
definition = inputlookup append=T cim_ids_type_lookup | eval ids_type=lower(ids_type) | dedup ids_type | sort + ids_type

###### Malware ######
[cim_malware_actions]
definition = inputlookup append=T cim_malware_action_lookup | eval action=lower(action) | dedup action | sort + action

###### Traffic ######
[cim_traffic_actions]
definition = inputlookup append=T cim_traffic_action_lookup | eval action=lower(action) | dedup action | sort + action

[cim_transport_protocols]
definition = inputlookup append=T cim_transport_protocol_lookup | eval transport=lower(transport) | dedup transport | sort + transport

###### Proxy ######
[cim_http_methods]
definition = inputlookup append=T cim_http_method_lookup | eval http_method=lower(http_method) | dedup http_method

[cim_http_statuses]
definition = inputlookup append=T cim_http_status_lookup

###### System Updates ######
[cim_update_statii]
definition = inputlookup append=T cim_update_status_lookup | eval status=lower(status) | dedup status | sort + status

###### Vendor Product Tracker ######
[cim_vendor_product_tracker]
definition = inputlookup append=T cim_vendor_product_tracker

[vendor_product_tracker(1)]
args = model
definition = inputlookup append=T cim_vendor_product_tracker | search model="$model$"

###### Vulnerabilities ######
## no sort here (severity order dictated by order in file)
[cim_vuln_severities]
definition = inputlookup append=T cim_vuln_severity_lookup | eval severity=lower(severity) | dedup severity


#####################
## Data Models
#####################
[add_dm_object_name(1)]
args       = object
definition = rename * as "$object$.*"

[drop_dm_object_name(1)]
args       = object
definition = rename "$object$.*" as *

[datamodel(2)]
args       = model,object
definition = datamodel $model$ $object$ search


#####################
## Search Auditing
#####################
[search_head_pool]
## For search head pooling and/or _audit logging that does not live on the local search head
## perform the following filtering based on host:
#definition = (host=search_head_a OR host=search_head_b OR host=search_head_c)
definition = (splunk_server=local)

[search_activity]
definition = index=_audit action=search search_id=* | replace '*' with * in search_id | rex "search='(?<search>.*?)', autojoin" | rex field=search "(?<search>.+?)(\|\s+summaryindex.*|$)" | extract savedsearch_name_for_audittrail | `search_typer` | extract datamodel_for_audittrail | eval search=case(search_type=="dm_acceleration",datamodel." Data Model",isnotnull(savedsearch_name) AND savedsearch_name!="",savedsearch_name,1=1,search) | extract user_for_audittrail | eval user=if(user=="n/a" OR user=="-",null(),user) | transaction maxevents=2 maxspan=1d startswith=(info=granted) endswith=(info!=granted) keepevicted=true search_id | eval search_type=mvindex(search_type,0) | eval search=if(isnull(search),"No search string available. Search ID=".search_id,mvindex(search,0)) | eval user=if(isnull(user),"unknown",mvindex(user,0)) | eval info_count=mvcount(info)

[search_typer]
definition = eval search_type=case((id LIKE "DM_%" OR savedsearch_name LIKE "_ACCELERATE_DM%"), "dm_acceleration", search_id LIKE "scheduler%", "scheduled", search_id LIKE "rt%", "realtime", search_id LIKE "subsearch%", "subsearch", (search_id LIKE "SummaryDirector%" OR search_id LIKE "summarize_SummaryDirector%"), "summary_director", 1=1, "adhoc")
