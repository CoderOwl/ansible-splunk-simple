
###### Correlation Searches ######
[Endpoint - Host Sending Excessive Email - Rule]
action.email.sendresults      = 0
action.risk                   = 1
action.risk._risk_object      = src
action.risk._risk_object_type = system
action.risk._risk_score       = 80
action.summary_index          = 1
action.summary_index._name    = notable
action.summary_index.ttl      = 1p
alert.digest_mode             = 1
alert.suppress                = 1
alert.suppress.fields         = src
alert.suppress.period         = 86300
alert.track                   = false
cron_schedule                 = 55 * * * *
disabled                      = True
dispatch.earliest_time        = -65m
dispatch.latest_time          = -5m
enableSched                   = True
is_visible                    = false
search                        = | tstats allow_old_summaries=true dc(All_Traffic.dest) as "dest_count",count from datamodel=Network_Traffic where   nodename=All_Traffic "All_Traffic.src_category"!="email_servers" AND ("All_Traffic.dest_port"=25 OR "All_Traffic.dest_translated_port"=25 OR "All_Traffic.dest_port"=587 OR "All_Traffic.dest_translated_port"=587) by "All_Traffic.src" | rename "All_Traffic.src" as "src" | where ('count'>250 OR 'dest_count'>25)

###### Report Searches ######
[Endpoint - SSHD Configurations By System]
action.email.reportServerEnabled = 0
alert.track                      = 0
dispatch.earliest_time           = -48h@h
dispatch.latest_time             = now
display.general.enablePreview    = 1
display.general.type             = statistics
display.statistics.drilldown     = row
display.statistics.rowNumbers    = 0
display.statistics.wrap          = 0
display.visualizations.show      = 0
search                           = `sshdconfig` | stats max(_time) as _time,latest(sshd_protocol) as sshd_protocol by dest | fields _time,dest,sshd_protocol

[Endpoint - SELinux Configurations By System]
action.email.reportServerEnabled = 0
alert.track                      = 0
dispatch.earliest_time           = -48h@h
dispatch.latest_time             = now
display.general.enablePreview    = 1
display.general.type             = statistics
display.statistics.drilldown     = row
display.statistics.rowNumbers    = 0
display.statistics.wrap          = 0
display.visualizations.show      = 0
search                           = `selinuxconfig` | stats max(_time) as _time,latest(selinux) as selinux by dest | fields _time,dest,selinux


#####################
## Application State
#####################

###### Correlation Searches ######
[Endpoint - Anomalous New Listening Port - Rule]
action.email.sendresults      = 0
action.risk                   = 1
action.risk._risk_object      = dest_port
action.risk._risk_object_type = other
action.risk._risk_score       = 40
action.summary_index          = 1
action.summary_index._name    = notable
action.summary_index.ttl      = 1p
alert.digest_mode             = 1
alert.suppress                = 1
alert.suppress.fields         = transport,dest_port
alert.suppress.period         = 86300
alert.track                   = false
cron_schedule                 = 25 * * * *
disabled                      = True
dispatch.latest_time          = +0s
enableSched                   = 1
is_visible                    = false
## This remains implemented using the listeningports_tracker which will maintain true firstTime for us
search                        = | inputlookup append=T listeningports_tracker | eval earliestQual=case(match("-24h@h", "^\d"), tostring("-24h@h"),  match("-24h@h", "^([@\+-]){1}"), relative_time(time(), "-24h@h"),  true(), time()) | eval latestQual=case(match("+0s", "^\d"), tostring("+0s"),  match("+0s", "^([@\+-]){1}"), relative_time(time(), "+0s"),  true(), time()) | where (firstTime>=earliestQual AND firstTime<=latestQual) | fields - earliestQual, latestQual | stats dc(dest) as "dest_count" by "transport","dest_port" | where 'dest_count'>10

[Endpoint - Host With Excessive Number Of Listening Ports - Rule]
action.email.sendresults      = 0
action.risk                   = 1
action.risk._risk_object      = dest
action.risk._risk_object_type = system
action.risk._risk_score       = 60
action.summary_index          = 1
action.summary_index._name    = notable
action.summary_index.ttl      = 1p
alert.digest_mode             = 1
alert.suppress                = 1
alert.suppress.fields         = dest
alert.suppress.period         = 86300
alert.track                   = false
cron_schedule                 = 10 * * * *
disabled                      = True
dispatch.earliest_time        = -24h@h
dispatch.latest_time          = +0s
enableSched                   = 1
is_visible                    = false
search                        = | tstats allow_old_summaries=true dc(All_Application_State.Ports.transport_dest_port) as "port_count" from datamodel=Application_State where   nodename=All_Application_State.Ports  by "All_Application_State.dest" | rename "All_Application_State.dest" as "dest" | where 'port_count'>20

[Endpoint - Anomalous New Processes - Rule]
action.email.sendresults      = 0
action.risk                   = 1
action.risk._risk_object      = process
action.risk._risk_object_type = other
action.risk._risk_score       = 60
action.summary_index          = 1
action.summary_index._name    = notable
action.summary_index.ttl      = 1p
alert.digest_mode             = 1
alert.suppress                = 1
alert.suppress.fields         = process
alert.suppress.period         = 86300
alert.track                   = false
cron_schedule                 = 25 * * * *
disabled                      = True
dispatch.latest_time          = +0s
enableSched                   = 1
is_visible                    = false
## This remains implemented using the localprocesses_tracker which will maintain true firstTime for us
search                        = | inputlookup append=T localprocesses_tracker | eval earliestQual=case(match("-24h@h", "^\d"), tostring("-24h@h"),  match("-24h@h", "^([@\+-]){1}"), relative_time(time(), "-24h@h"),  true(), time()) | eval latestQual=case(match("+0s", "^\d"), tostring("+0s"),  match("+0s", "^([@\+-]){1}"), relative_time(time(), "+0s"),  true(), time()) | where (firstTime>=earliestQual AND firstTime<=latestQual) | fields - earliestQual, latestQual | stats dc(dest) as "dest_count" by "process" | where 'dest_count'>9

[Endpoint - Host With Excessive Number Of Processes - Rule]
action.email.sendresults      = 0
action.risk                   = 1
action.risk._risk_object      = dest
action.risk._risk_object_type = system
action.risk._risk_score       = 60
action.summary_index          = 1
action.summary_index._name    = notable
action.summary_index.ttl      = 1p
alert.digest_mode             = 1
alert.suppress                = 1
alert.suppress.fields         = dest
alert.suppress.period         = 86300
alert.track                   = false
cron_schedule                 = 30 * * * *
disabled                      = True
dispatch.earliest_time        = -24h@h
dispatch.latest_time          = +0s
enableSched                   = 1
is_visible                    = false
## Based on the amount of variability in process names we compute only the most recent processes detected by a system
## This requires that all processes detected are logged with the same _time value per iteration
## NOTE:  This was also the default behavior prior to the tstats implementation of this correlation search
search                        = | tstats `summariesonly` max(_time) as _time from datamodel=Application_State where nodename=All_Application_State.Processes by All_Application_State.dest,All_Application_State.process | `drop_dm_object_name("All_Application_State")` | eventstats max(_time) as lastReportTime by dest | where _time==lastReportTime | stats dc(process) as process_count by dest | search process_count>200

[Endpoint - Prohibited Process Detection - Rule]
action.email.sendresults      = 0
action.risk                   = 1
action.risk._risk_object      = dest
action.risk._risk_object_type = system
action.risk._risk_score       = 60
action.summary_index          = 1
action.summary_index._name    = notable
action.summary_index.ttl      = 1p
alert.digest_mode             = 1
alert.suppress                = 1
alert.suppress.fields         = dest,process
alert.suppress.period         = 86300
alert.track                   = false
cron_schedule                 = */5 * * * *
disabled                      = True
dispatch.earliest_time        = rt-5m@m
dispatch.latest_time          = rt+5m@m
dispatch.rt_backfill          = 1
enableSched                   = 1
is_visible                    = false
search                        = | datamodel Application_State Processes search | `drop_dm_object_name("All_Application_State")` | `drop_dm_object_name("Processes")` | `get_interesting_processes` | search is_prohibited=true | `get_event_id` | `map_notable_fields` | fields + orig_event_id,orig_raw,dest,process,note 

[Endpoint - Anomalous New Services - Rule]
action.email.sendresults      = 0
action.risk                   = 1
action.risk._risk_object      = service
action.risk._risk_object_type = other
action.risk._risk_score       = 60
action.summary_index          = 1
action.summary_index._name    = notable
action.summary_index.ttl      = 1p
alert.digest_mode             = 1
alert.suppress                = 1
alert.suppress.fields         = service
alert.suppress.period         = 86300
alert.track                   = false
cron_schedule                 = 25 * * * *
disabled                      = True
dispatch.latest_time          = +0s
enableSched                   = 1
is_visible                    = false
## This remains implemented using the listeningports_tracker which will maintain true firstTime for us
search                        = | inputlookup append=T services_tracker | eval earliestQual=case(match("-24h@h", "^\d"), tostring("-24h@h"),  match("-24h@h", "^([@\+-]){1}"), relative_time(time(), "-24h@h"),  true(), time()) | eval latestQual=case(match("+0s", "^\d"), tostring("+0s"),  match("+0s", "^([@\+-]){1}"), relative_time(time(), "+0s"),  true(), time()) | where (firstTime>=earliestQual AND firstTime<=latestQual) | fields - earliestQual, latestQual | stats dc(dest) as "dest_count" by "service" | where 'dest_count'>9

[Endpoint - Host With Excessive Number Of Services - Rule]
action.email.sendresults      = 0
action.risk                   = 1
action.risk._risk_object      = dest
action.risk._risk_object_type = system
action.risk._risk_score       = 60
action.summary_index          = 1
action.summary_index._name    = notable
action.summary_index.ttl      = 1p
alert.digest_mode             = 1
alert.suppress                = 1
alert.suppress.fields         = dest
alert.suppress.period         = 86300
alert.track                   = false
cron_schedule                 = 55 * * * *
disabled                      = True
dispatch.earliest_time        = -24h@h
dispatch.latest_time          = +0s
enableSched                   = 1
is_visible                    = false
search                        = | tstats allow_old_summaries=true dc(All_Application_State.Services.service) as "service_count" from datamodel=Application_State where   nodename=All_Application_State.Services  by "All_Application_State.dest" | rename "All_Application_State.dest" as "dest" | where 'service_count'>100

[Endpoint - Prohibited Service Detection - Rule]
action.email.sendresults      = 0
action.risk                   = 1
action.risk._risk_object      = dest
action.risk._risk_object_type = system
action.risk._risk_score       = 60
action.summary_index          = 1
action.summary_index._name    = notable
action.summary_index.ttl      = 1p
alert.digest_mode             = 1
alert.suppress                = 1
alert.suppress.fields         = dest,service
alert.suppress.period         = 86300
alert.track                   = false
cron_schedule                 = */5 * * * *
disabled                      = True
dispatch.earliest_time        = rt-5m@m
dispatch.latest_time          = rt+5m@m
dispatch.rt_backfill          = 1
enableSched                   = 1
is_visible                    = false
search                        = NOT sourcetype=stash `service` | `get_interesting_services` | search is_prohibited=true | `get_event_id` | `map_notable_fields` | fields + orig_event_id,orig_raw,dest,service,note 

###### Report Searches ######
[App State - Ports By System Count]
action.email.reportServerEnabled = 0
alert.track                      = 0
dispatch.earliest_time           = -24h@h
dispatch.latest_time             = now
display.general.enablePreview    = 1
display.general.type             = statistics
display.statistics.drilldown     = row
display.statistics.rowNumbers    = 0
display.statistics.wrap          = 0
display.visualizations.show      = 0
search                           = | tstats `summariesonly` dc(All_Application_State.dest) as dest_count from datamodel=Application_State where nodename=All_Application_State.Ports by All_Application_State.Ports.transport,All_Application_State.Ports.dest_port | `drop_dm_object_name("All_Application_State")` | `drop_dm_object_name("Ports")` | sort 100 - dest_count

[App State - Systems By Port Count]
action.email.reportServerEnabled          = 0
alert.track                               = 0
dispatch.earliest_time                    = -24h@h
dispatch.latest_time                      = now
display.general.enablePreview             = 1
display.general.type                      = visualizations
display.statistics.rowNumbers             = 0
display.statistics.wrap                   = 0
display.visualizations.charting.chart     = bar
display.visualizations.charting.drilldown = all
display.visualizations.chartHeight        = 350
display.visualizations.show               = 1
search                                    = | tstats `summariesonly` dc(All_Application_State.Ports.transport_dest_port) as port_count from datamodel=Application_State where nodename=All_Application_State.Ports by All_Application_State.dest | `drop_dm_object_name("All_Application_State")` | sort 10 - port_count

[App State - Processes By System Count]
action.email.reportServerEnabled = 0
alert.track                      = 0
dispatch.earliest_time           = -24h@h
dispatch.latest_time             = now
display.general.enablePreview    = 1
display.general.type             = statistics
display.statistics.drilldown     = row
display.statistics.rowNumbers    = 0
display.statistics.wrap          = 0
display.visualizations.show      = 0
search                           = | tstats `summariesonly` max(_time) as _time from datamodel=Application_State where nodename=All_Application_State.Processes by All_Application_State.dest,All_Application_State.process | `drop_dm_object_name("All_Application_State")` | eventstats max(_time) as lastReportTime by dest | where _time==lastReportTime | stats dc(dest) as dest_count by process | sort 100 - dest_count

[App State - Systems By Process Count]
action.email.reportServerEnabled          = 0
alert.track                               = 0
dispatch.earliest_time                    = -24h@h
dispatch.latest_time                      = now
display.general.enablePreview             = 1
display.general.type                      = visualizations
display.statistics.rowNumbers             = 0
display.statistics.wrap                   = 0
display.visualizations.charting.chart     = bar
display.visualizations.charting.drilldown = all
display.visualizations.chartHeight        = 350
display.visualizations.show               = 1
search                                    = | tstats `summariesonly` max(_time) as _time from datamodel=Application_State where nodename=All_Application_State.Processes by All_Application_State.dest,All_Application_State.process | `drop_dm_object_name("All_Application_State")` | eventstats max(_time) as lastReportTime by dest | where _time==lastReportTime | stats dc(process) as process_count by dest | sort 10 - process_count

[App State - Services By System Count]
action.email.reportServerEnabled = 0
alert.track                      = 0
dispatch.earliest_time           = -24h@h
dispatch.latest_time             = now
display.general.enablePreview    = 1
display.general.type             = statistics
display.statistics.drilldown     = row
display.statistics.rowNumbers    = 0
display.statistics.wrap          = 0
display.visualizations.show      = 0
search                           = | tstats `summariesonly` dc(All_Application_State.dest) as dest_count from datamodel=Application_State where nodename=All_Application_State.Services by All_Application_State.Services.service | `drop_dm_object_name("All_Application_State")` | `drop_dm_object_name("Services")` | sort 100 - dest_count

[App State - Systems By Service Count]
action.email.reportServerEnabled          = 0
alert.track                               = 0
dispatch.earliest_time                    = -24h@h
dispatch.latest_time                      = now
display.general.enablePreview             = 1
display.general.type                      = visualizations
display.statistics.rowNumbers             = 0
display.statistics.wrap                   = 0
display.visualizations.charting.chart     = bar
display.visualizations.charting.drilldown = all
display.visualizations.chartHeight        = 350
display.visualizations.show               = 1
search                                    = | tstats `summariesonly` dc(All_Application_State.Services.service) as service_count from datamodel=Application_State where nodename=All_Application_State.Services by All_Application_State.dest | `drop_dm_object_name("All_Application_State")` | sort 10 - service_count


#####################
## Endpoint Changes
#####################

###### Report Searches ######
[Change - Endpoint Changes By Action]
action.email.reportServerEnabled                    = 0
alert.track                                         = 0
dispatch.earliest_time                              = -24h@h
dispatch.latest_time                                = now
display.general.enablePreview                       = 1
display.general.type                                = visualizations
display.statistics.rowNumbers                       = 0
display.statistics.wrap                             = 0
display.visualizations.charting.chart               = line
display.visualizations.charting.chart.nullValueMode = zero
display.visualizations.charting.drilldown           = all
display.visualizations.show                         = 1
display.visualizations.type                         = charting
search                                              = | `tstats` count from datamodel=Change_Analysis where nodename=All_Changes.Endpoint_Changes by _time,All_Changes.action span=10m | timechart minspan=10m useother=`useother` count by All_Changes.action | `drop_dm_object_name("All_Changes")`

[Change - Endpoint Changes By Type]
action.email.reportServerEnabled          = 0
alert.track                               = 0
dispatch.earliest_time                    = -24h@h
dispatch.latest_time                      = now
display.general.enablePreview             = 1
display.general.type                      = visualizations
display.statistics.rowNumbers             = 0
display.statistics.wrap                   = 0
display.visualizations.charting.chart     = bar
display.visualizations.charting.drilldown = all
display.visualizations.show               = 1
display.visualizations.type               = charting
search                                    = | tstats `summariesonly` count from datamodel=Change_Analysis where nodename=All_Changes.Endpoint_Changes by All_Changes.object_category | `drop_dm_object_name("All_Changes")` | sort 10 - count

[Change - Recent Endpoint Changes]
action.email.reportServerEnabled = 0
alert.track                      = 0
dispatch.earliest_time           = -24h@h
dispatch.latest_time             = now
display.events.fields            = ["object_category", "action", "object_path", "dest"]
display.events.list.wrap         = true
display.events.rowNumbers        = false
display.events.type              = list
display.general.enablePreview    = true
display.general.type             = events
search                           = | `datamodel("Change_Analysis", "Endpoint_Changes")` | `drop_dm_object_name("All_Changes")` | `drop_dm_object_name("Endpoint_Changes")` | head 1000

[Change - Endpoint Changes By System]
action.email.reportServerEnabled = 0
alert.track                      = 0
dispatch.earliest_time           = -24h@h
dispatch.latest_time             = now
display.general.enablePreview    = 1
display.general.type             = statistics
display.statistics.drilldown     = row
display.statistics.rowNumbers    = 0
display.statistics.wrap          = 0
display.visualizations.show      = 0
search                           = | tstats `summariesonly` values(All_Changes.object_category) as object_category,count from datamodel=Change_Analysis where nodename=All_Changes.Endpoint_Changes by _time,All_Changes.dest span=1h | `drop_dm_object_name("All_Changes")` | stats sparkline(sum(count),1h) as sparkline,values(object_category) as object_category,sum(count) as count by dest | sort 100 - count

###### Swim Lane Searches ######
[Change - All Changes By Asset - Swimlane]
action.email.reportServerEnabled                  = 0
action.swimlane                                   = 1
action.swimlane.title                             = All Changes
action.swimlane.color                             = green
action.swimlane.constraint_method                 = reverse_asset_lookup
action.swimlane.constraint_fields                 = All_Changes.src,All_Changes.dest
action.swimlane.drilldown_search                  = | `datamodel("Change_Analysis","All_Changes")` | search $constraints$
alert.track                                       = 0
dispatch.latest_time                              = now
display.page.asset_investigator.0.collection_name = Default
display.page.asset_investigator.0.order           = 1
is_visible                                        = false
search                                            = | tstats `summariesonly` values(All_Changes.action) as action,values(All_Changes.object_category) as object_category,values(All_Changes.object) as object,values(All_Changes.src) as src,values(All_Changes.dest) as dest,values(All_Changes.user) as user,count from datamodel=Change_Analysis where $constraints$ by _time span=$span$

[Change - All Changes By Identity - Swimlane]
action.email.reportServerEnabled                     = 0
action.swimlane                                      = 1
action.swimlane.title                                = All Changes
action.swimlane.color                                = green
action.swimlane.constraint_method                    = reverse_identity_lookup
action.swimlane.constraint_fields                    = All_Changes.Account_Management.src_user,All_Changes.user
action.swimlane.drilldown_search                     = | `datamodel("Change_Analysis","All_Changes")` | search $constraints$
alert.track                                          = 0
dispatch.latest_time                                 = now
display.page.identity_investigator.0.collection_name = Default
display.page.identity_investigator.0.order           = 1
is_visible                                           = false
search                                               = | tstats `summariesonly` values(All_Changes.action) as action,values(All_Changes.object_category) as object_category,values(All_Changes.object) as object,values(All_Changes.src) as src,values(All_Changes.dest) as dest,values(All_Changes.user) as user,count from datamodel=Change_Analysis where $constraints$ by _time span=$span$


#####################
## Compute Inventory
#####################

###### Report Searches ######
[Inventory - Operating Systems By System Count]
action.email.reportServerEnabled          = 0
alert.track                               = 0
dispatch.latest_time                      = now
display.general.enablePreview             = 1
display.general.timeRangePicker.show      = false
display.general.type                      = visualizations
display.statistics.rowNumbers             = 0
display.statistics.wrap                   = 0
display.visualizations.charting.chart     = pie
display.visualizations.charting.drilldown = all
display.visualizations.show               = 1
search                                    = | inputlookup append=T system_version_tracker | stats count by os

[Inventory - Users By System Count]
action.email.reportServerEnabled          = 0
alert.track                               = 0
dispatch.latest_time                      = now
display.general.enablePreview             = 1
display.general.timeRangePicker.show      = false
display.general.type                      = visualizations
display.statistics.rowNumbers             = 0
display.statistics.wrap                   = 0
display.visualizations.charting.chart     = bar
display.visualizations.charting.drilldown = all
display.visualizations.chartHeight        = 350
display.visualizations.show               = 1
search                                    = | inputlookup append=T useraccounts_tracker | stats dc(dest) as dc(dest) by user | sort 10 - dc(dest)

[Inventory - Systems By User Count]
action.email.reportServerEnabled          = 0
alert.track                               = 0
dispatch.latest_time                      = now
display.general.enablePreview             = 1
display.general.timeRangePicker.show      = false
display.general.type                      = visualizations
display.statistics.rowNumbers             = 0
display.statistics.wrap                   = 0
display.visualizations.charting.chart     = bar
display.visualizations.charting.drilldown = all
display.visualizations.chartHeight        = 350
display.visualizations.show               = 1
search                                    = | inputlookup append=T useraccounts_tracker | stats dc(user) as dc(user) by dest | sort 10 - dc(user)


#####################
## Malware
#####################

###### Correlation Searches #######
[Endpoint - High Number of Hosts Not Updating Malware Signatures - Rule]
action.email.sendresults   = 0
action.summary_index       = 1
action.summary_index._name = notable
action.summary_index.ttl   = 1p
alert.digest_mode          = 1
alert.suppress             = 1
alert.suppress.fields      = const_dedup_id
alert.suppress.period      = 86300
alert.track                = false
cron_schedule              = 40 * * * *
disabled                   = True
dispatch.latest_time       = +0s
enableSched                = 1
is_visible                 = false
search                     = | `malware_operations_tracker` | rename time_signature_version as _time | `dayDiff(_time)` | search dayDiff>7 | stats count,values(dest) as dest | search count>10 | eval const_dedup_id="Endpoint - High Number of Hosts Not Updating Malware Signatures - Rule"

[Endpoint - High Number Of Infected Hosts - Rule]
action.email.sendresults   = 0
action.summary_index       = 1
action.summary_index._name = notable
action.summary_index.ttl   = 1p
alert.digest_mode          = 1
alert.suppress             = 1
alert.suppress.fields      = const_dedup_id
alert.suppress.period      = 86300
alert.track                = false
cron_schedule              = 0 * * * *
disabled                   = True
dispatch.earliest_time     = -15d
dispatch.latest_time       = +0s
enableSched                = 1
is_visible                 = false
search                     = | tstats allow_old_summaries=true estdc(Malware_Attacks.dest) as "infected_hosts" from datamodel=Malware where   nodename=Malware_Attacks   | where 'infected_hosts'>100 | eval const_dedup_id="const_dedup_id"

[Endpoint - High Or Critical Priority Host With Malware - Rule]
action.email.sendresults      = 0
action.risk                   = 1
action.risk._risk_object      = dest
action.risk._risk_object_type = system
action.risk._risk_score       = 80
action.summary_index          = 1
action.summary_index._name    = notable
action.summary_index.ttl      = 1p
alert.digest_mode             = 1
alert.suppress                = 1
alert.suppress.fields         = dest,signature
alert.suppress.period         = 86300
alert.track                   = false
cron_schedule                 = */5 * * * *
disabled                      = True
dispatch.earliest_time        = rt-5m@m
dispatch.latest_time          = rt+5m@m
dispatch.rt_backfill          = 1
enableSched                   = 1
is_visible                    = false
search                        = | datamodel "Malware" "Malware_Attacks" search | where ('Malware_Attacks.dest_priority'="high" OR 'Malware_Attacks.dest_priority'="critical") | stats max(_time) as "lastTime",latest(_raw) as "orig_raw",values(Malware_Attacks.dest_priority) as "dest_priority",count by "Malware_Attacks.dest","Malware_Attacks.signature" | rename "Malware_Attacks.dest" as "dest","Malware_Attacks.signature" as "signature"

[Endpoint - Host With Multiple Infections - Rule]
action.email.sendresults      = 0
action.risk                   = 1
action.risk._risk_object      = dest
action.risk._risk_object_type = system
action.risk._risk_score       = 80
action.summary_index          = 1
action.summary_index._name    = notable
action.summary_index.ttl      = 1p
alert.digest_mode             = 1
alert.suppress                = 1
alert.suppress.fields         = dest
alert.suppress.period         = 86300
alert.track                   = false
cron_schedule                 = 5,20,35,50 * * * *
disabled                      = True
dispatch.earliest_time        = -24h
dispatch.latest_time          = +0s
enableSched                   = 1
is_visible                    = false
search                        = | tstats allow_old_summaries=true dc(Malware_Attacks.signature) as "infection_count" from datamodel=Malware where   nodename=Malware_Attacks  by "Malware_Attacks.dest" | rename "Malware_Attacks.dest" as "dest" | where 'infection_count'>1

[Endpoint - Old Malware Infection - Rule]
action.email.sendresults      = 0
action.risk                   = 1
action.risk._risk_object      = dest
action.risk._risk_object_type = system
action.risk._risk_score       = 80
action.summary_index          = 1
action.summary_index._name    = notable
action.summary_index.ttl      = 1p
alert.digest_mode             = 1
alert.suppress                = 1
alert.suppress.fields         = dest,signature
alert.suppress.period         = 86300
alert.track                   = false
cron_schedule                 = 45 * * * *
disabled                      = True
dispatch.latest_time          = +0s
enableSched                   = 1
is_visible                    = false
search                        = | `malware_tracker` | eval timeDiff=lastTime-firstTime | eval dayDiff=timeDiff/86400 | eval window=now()-8640000 | eval afterwindow=firstTime-window | eval afterwindowdays=afterwindow/86400 | search afterwindowdays>0 | search dayDiff>30 | `map_notable_fields`

[Endpoint - Outbreak Observed - Rule]
action.email.sendresults      = 0
action.risk                   = 1
action.risk._risk_object      = signature
action.risk._risk_object_type = other
action.risk._risk_score       = 80
action.summary_index          = 1
action.summary_index._name    = notable
action.summary_index.ttl      = 1p
alert.digest_mode             = 1
alert.suppress                = 1
alert.suppress.fields         = signature
alert.suppress.period         = 86300
alert.track                   = false
cron_schedule                 = */15 * * * *
disabled                      = True
dispatch.earliest_time        = -24h
dispatch.latest_time          = +0s
enableSched                   = 1
is_visible                    = false
search                        = | tstats allow_old_summaries=true dc(Malware_Attacks.dest) as "system_count" from datamodel=Malware where   nodename=Malware_Attacks  by "Malware_Attacks.signature" | rename "Malware_Attacks.signature" as "signature" | where 'system_count'>10

###### Key Indicator Searches ######

## Malware Center

[Malware - Infected System Count]
action.email.reportServerEnabled              = 0
alert.track                                   = 0
action.keyindicator                           = 1
action.keyindicator.title                     = Infected Systems
action.keyindicator.subtitle                  = System Count
action.keyindicator.value                     = current_count
action.keyindicator.threshold                 = 
action.keyindicator.delta                     = delta
action.keyindicator.invert                    = false
action.keyindicator.group.0.name              = malware_center
action.keyindicator.group.0.order             = 3
dispatch.latest_time                          = now
display.general.enablePreview                 = 1
display.general.timeRangePicker.show          = false
display.general.type                          = visualizations
display.statistics.rowNumbers                 = 0
display.statistics.wrap                       = 0
display.visualizations.charting.drilldown     = all
display.visualizations.singlevalue.underLabel = Infected System Count
display.visualizations.show                   = 1
display.visualizations.type                   = singlevalue
search                                        = | tstats `summariesonly` estdc(Malware_Attacks.dest) as current_count from datamodel=Malware where earliest=-24h@h latest=+0s Malware_Attacks.action=allowed | appendcols [| tstats `summariesonly` estdc(Malware_Attacks.dest) as historical_count from datamodel=Malware where earliest=-48h@h latest=-24h@h Malware_Attacks.action=allowed] | `get_delta`

[Malware - Multiple Infections]
action.email.reportServerEnabled              = 0
alert.track                                   = 0
action.keyindicator                           = 1
action.keyindicator.title                     = Multiple Infections
action.keyindicator.subtitle                  = System Count
action.keyindicator.value                     = current_count
action.keyindicator.threshold                 = 
action.keyindicator.delta                     = delta
action.keyindicator.invert                    = false
action.keyindicator.group.0.name              = malware_center
action.keyindicator.group.0.order             = 1
dispatch.latest_time                          = now
display.general.enablePreview                 = 1
display.general.timeRangePicker.show          = false
display.general.type                          = visualizations
display.statistics.rowNumbers                 = 0
display.statistics.wrap                       = 0
display.visualizations.charting.drilldown     = all
display.visualizations.singlevalue.underLabel = Infected System Count
display.visualizations.show                   = 1
display.visualizations.type                   = singlevalue
search                                        = | tstats `summariesonly` dc(Malware_Attacks.signature) as infection_count from datamodel=Malware where earliest=-24h@h latest=+0s Malware_Attacks.action=allowed by Malware_Attacks.dest | search infection_count>1 | stats count as current_count | appendcols [| tstats `summariesonly` dc(Malware_Attacks.signature) as infection_count from datamodel=Malware where earliest=-48h@h latest=-24h@h Malware_Attacks.action=allowed by Malware_Attacks.dest | search infection_count>1 | stats count as historical_count] | `get_delta`

[Malware - New Infections]
action.email.reportServerEnabled              = 0
alert.track                                   = 0
action.keyindicator                           = 1
action.keyindicator.title                     = New Infections
action.keyindicator.subtitle                  = Count
action.keyindicator.value                     = current_count
action.keyindicator.threshold                 = 
action.keyindicator.delta                     = delta
action.keyindicator.invert                    = false
action.keyindicator.group.0.name              = malware_center
action.keyindicator.group.0.order             = 0
dispatch.latest_time                          = now
display.general.enablePreview                 = 1
display.general.timeRangePicker.show          = false
display.general.type                          = visualizations
display.statistics.rowNumbers                 = 0
display.statistics.wrap                       = 0
display.visualizations.charting.drilldown     = all
display.visualizations.singlevalue.underLabel = New Infections
display.visualizations.show                   = 1
display.visualizations.type                   = singlevalue
search                                        = | inputlookup append=T malware_tracker | `dayDiff(firstTime)` | eval current_count=if(dayDiff<=1,1,0) | eval historical_count=if(dayDiff>1 AND dayDiff<=2,1,0) | stats sum(current_count) as current_count,sum(historical_count) as historical_count | `get_delta`

[Malware - Total Infection Count]
action.email.reportServerEnabled              = 0
alert.track                                   = 0
action.keyindicator                           = 1
action.keyindicator.title                     = Total Infections
action.keyindicator.subtitle                  = Count
action.keyindicator.value                     = current_count
action.keyindicator.threshold                 = 
action.keyindicator.delta                     = delta
action.keyindicator.invert                    = false
action.keyindicator.group.0.name              = malware_center
action.keyindicator.group.0.order             = 4
dispatch.latest_time                          = now
display.general.enablePreview                 = 1
display.general.timeRangePicker.show          = false
display.general.type                          = visualizations
display.statistics.rowNumbers                 = 0
display.statistics.wrap                       = 0
display.visualizations.charting.drilldown     = all
display.visualizations.singlevalue.underLabel = Total Infections
display.visualizations.show                   = 1
display.visualizations.type                   = singlevalue
search                                        = | tstats `summariesonly` count from datamodel=Malware where earliest=-24h@h latest=+0s Malware_Attacks.action=allowed by Malware_Attacks.signature,Malware_Attacks.dest | stats count as current_count | appendcols [| tstats `summariesonly` count from datamodel=Malware where earliest=-48h@h latest=-24h@h Malware_Attacks.action=allowed by Malware_Attacks.signature,Malware_Attacks.dest | stats count as historical_count] | `get_delta`

[Malware - Unique Malware Count]
action.email.reportServerEnabled              = 0
alert.track                                   = 0
action.keyindicator                           = 1
action.keyindicator.title                     = Unique Malware
action.keyindicator.subtitle                  = Unique Count
action.keyindicator.value                     = current_count
action.keyindicator.threshold                 = 
action.keyindicator.delta                     = delta
action.keyindicator.invert                    = false
action.keyindicator.group.0.name              = malware_center
action.keyindicator.group.0.order             = 2
dispatch.latest_time                          = now
display.general.enablePreview                 = 1
display.general.timeRangePicker.show          = false
display.general.type                          = visualizations
display.statistics.rowNumbers                 = 0
display.statistics.wrap                       = 0
display.visualizations.charting.drilldown     = all
display.visualizations.singlevalue.underLabel = Unique Malware Count
display.visualizations.show                   = 1
display.visualizations.type                   = singlevalue
search                                        = | tstats `summariesonly` estdc(Malware_Attacks.signature) as current_count from datamodel=Malware where earliest=-24h@h latest=+0s Malware_Attacks.action=allowed | appendcols [| tstats `summariesonly` estdc(Malware_Attacks.signature) as historical_count from datamodel=Malware where earliest=-48h@h latest=-24h@h Malware_Attacks.action=allowed] | `get_delta`

## Malware Operations

[Malware - Average Infection Length]
action.email.reportServerEnabled              = 0
alert.track                                   = 0
action.keyindicator                           = 1
action.keyindicator.title                     = Avg Infection Length
action.keyindicator.subtitle                  = Days
action.keyindicator.value                     = current_avg
action.keyindicator.threshold                 = 
action.keyindicator.delta                     = delta
action.keyindicator.invert                    = false
action.keyindicator.group.0.name              = malware_operations
action.keyindicator.group.0.order             = 3
dispatch.latest_time                          = now
display.general.enablePreview                 = 1
display.general.timeRangePicker.show          = false
display.general.type                          = visualizations
display.statistics.rowNumbers                 = 0
display.statistics.wrap                       = 0
display.visualizations.charting.drilldown     = all
display.visualizations.singlevalue.underLabel = Average Infection Length
display.visualizations.show                   = 1
display.visualizations.type                   = singlevalue
search                                        = | inputlookup append=T malware_tracker | `dayDiff(lastTime)` | eval current_diff=if(dayDiff<=7,(lastTime-firstTime)/86400,null()) | eval historical_diff=if(dayDiff>1 AND dayDiff<=8,(lastTime-firstTime)/86400,null()) | stats avg(current_diff) as current_avg,avg(historical_diff) as historical_avg | `round(current_avg,1)` | `round(historical_avg,1)` | `get_delta(current_avg,historical_avg)`

[Malware - Old Malware Defintions]
action.email.reportServerEnabled              = 0
alert.track                                   = 0
action.keyindicator                           = 1
action.keyindicator.title                     = Old Malware Defs
action.keyindicator.subtitle                  = Client Count
action.keyindicator.value                     = current_count
action.keyindicator.threshold                 = 
action.keyindicator.delta                     = delta
action.keyindicator.invert                    = false
action.keyindicator.group.0.name              = malware_operations
action.keyindicator.group.0.order             = 1
dispatch.latest_time                          = now
display.general.enablePreview                 = 1
display.general.timeRangePicker.show          = false
display.general.type                          = visualizations
display.statistics.rowNumbers                 = 0
display.statistics.wrap                       = 0
display.visualizations.charting.drilldown     = all
display.visualizations.singlevalue.underLabel = Systems With Old Malware Definitions
display.visualizations.show                   = 1
display.visualizations.type                   = singlevalue
search                                        = | inputlookup append=T malware_operations_tracker | rename time_signature_version as _time | `dayDiff` | eval current_count=if(dayDiff>=7,1,0) | eval historical_count=if(dayDiff>=8,1,0) | stats sum(current_count) as current_count,sum(historical_count) as historical_count | `get_delta`

[Malware - Oldest Infection]
action.email.reportServerEnabled              = 0
alert.track                                   = 0
action.keyindicator                           = 1
action.keyindicator.title                     = Oldest Infection
action.keyindicator.subtitle                  = Days
action.keyindicator.value                     = current_max
action.keyindicator.threshold                 = 
action.keyindicator.delta                     = delta
action.keyindicator.invert                    = false
action.keyindicator.group.0.name              = malware_operations
action.keyindicator.group.0.order             = 4
dispatch.latest_time                          = now
display.general.enablePreview                 = 1
display.general.timeRangePicker.show          = false
display.general.type                          = visualizations
display.statistics.rowNumbers                 = 0
display.statistics.wrap                       = 0
display.visualizations.charting.drilldown     = all
display.visualizations.singlevalue.underLabel = Oldest Infection
display.visualizations.show                   = 1
display.visualizations.type                   = singlevalue
search                                        = | inputlookup append=T malware_tracker | `dayDiff(lastTime)` | eval current_diff=if(dayDiff<=7,(lastTime-firstTime)/86400,null()) | eval historical_diff=if(dayDiff>1 AND dayDiff<=8,(lastTime-firstTime)/86400,null()) | stats max(current_diff) as current_max,max(historical_diff) as historical_max | `round(current_max,1)` | `round(historical_max,1)` | `get_delta(current_max,historical_max)`

[Malware - Percent Of Systems Infected]
action.email.reportServerEnabled              = 0
alert.track                                   = 0
action.keyindicator                           = 1
action.keyindicator.title                     = Infected Systems
action.keyindicator.subtitle                  = Percent
action.keyindicator.value                     = current_percent
action.keyindicator.value_suffix              = % 
action.keyindicator.threshold                 = 
action.keyindicator.delta                     = delta
action.keyindicator.invert                    = false
action.keyindicator.group.0.name              = malware_operations
action.keyindicator.group.0.order             = 2
dispatch.latest_time                          = now
display.general.enablePreview                 = 1
display.general.timeRangePicker.show          = false
display.general.type                          = visualizations
display.statistics.rowNumbers                 = 0
display.statistics.wrap                       = 0
display.visualizations.charting.drilldown     = all
display.visualizations.singlevalue.underLabel = Percent Of Infected Systems
display.visualizations.show                   = 1
display.visualizations.type                   = singlevalue
search                                        = | tstats `summariesonly` estdc(Malware_Attacks.dest) as current_count from datamodel=Malware where earliest=-24h@h latest=+0s Malware_Attacks.action=allowed | appendcols [| tstats `summariesonly` estdc(Malware_Attacks.dest) as historical_count from datamodel=Malware where earliest=-48h@h latest=-24h@h Malware_Attacks.action=allowed] | appendcols [| inputlookup malware_operations_tracker | `daysago(30)` | stats count as total_count] | eval current_percent=round(current_count*100/total_count,1) | eval historical_percent=round(historical_count*100/total_count,1) | fields current_percent,historical_percent | `get_delta(current_percent,historical_percent)`

[Malware - Systems With Anti-Malware]
action.email.reportServerEnabled              = 0
alert.track                                   = 0
action.keyindicator                           = 1
action.keyindicator.title                     = Malware Clients
action.keyindicator.subtitle                  = Client Count
action.keyindicator.value                     = current_count
action.keyindicator.threshold                 = 
action.keyindicator.delta                     = delta
action.keyindicator.invert                    = true
action.keyindicator.group.0.name              = malware_operations
action.keyindicator.group.0.order             = 0
dispatch.latest_time                          = now
display.general.enablePreview                 = 1
display.general.timeRangePicker.show          = false
display.general.type                          = visualizations
display.statistics.rowNumbers                 = 0
display.statistics.wrap                       = 0
display.visualizations.charting.drilldown     = all
display.visualizations.singlevalue.underLabel = Systems With Anti-Malware
display.visualizations.show                   = 1
display.visualizations.type                   = singlevalue
search                                        = | inputlookup append=T malware_operations_tracker | `dayDiff` | eval current_count=if(dayDiff<=7,1,0) | eval historical_count=if(dayDiff>1 AND dayDiff<=8,1,0) | stats sum(current_count) as current_count,sum(historical_count) as historical_count | `get_delta`

[Malware - Top Infection]
action.email.reportServerEnabled              = 0
alert.track                                   = 0
action.keyindicator                           = 1
action.keyindicator.title                     = Top Infection
action.keyindicator.subtitle                  = $signature$
action.keyindicator.value                     = current_count
action.keyindicator.threshold                 = 
action.keyindicator.delta                     = delta
action.keyindicator.invert                    = false
dispatch.latest_time                          = now
display.general.enablePreview                 = 1
display.general.timeRangePicker.show          = false
display.general.type                          = visualizations
display.statistics.rowNumbers                 = 0
display.statistics.wrap                       = 0
display.visualizations.charting.drilldown     = all
display.visualizations.singlevalue.underLabel = Top Infection
display.visualizations.show                   = 1
display.visualizations.type                   = singlevalue
search                                        = | tstats `summariesonly` dc(Malware_Attacks.dest) as current_count from datamodel=Malware where earliest=-24h@h latest=+0s by Malware_Attacks.signature | join type=outer Malware_Attacks.signature [| tstats `summariesonly` dc(Malware_Attacks.dest) as historical_count from datamodel=Malware where earliest=-48h@h latest=-24@h by Malware_Attacks.signature] | `drop_dm_object_name("Malware_Attacks")` | sort 1 - current_count | eval label=signature." was detected on ".current_count." systems" | eval label=if(current_count==1,replace(label,"systems","system"),label) | `get_delta` | fields label,signature,current_count,historical_count,delta

[Malware - Top Infected Domain]
action.email.reportServerEnabled              = 0
alert.track                                   = 0
action.keyindicator                           = 1
action.keyindicator.title                     = Top Infected Domain
action.keyindicator.subtitle                  = $dest_nt_domain$
action.keyindicator.value                     = current_count
action.keyindicator.threshold                 = 
action.keyindicator.delta                     = delta
action.keyindicator.invert                    = false
dispatch.latest_time                          = now
display.general.enablePreview                 = 1
display.general.timeRangePicker.show          = false
display.general.type                          = visualizations
display.statistics.rowNumbers                 = 0
display.statistics.wrap                       = 0
display.visualizations.charting.drilldown     = all
display.visualizations.singlevalue.underLabel = Top Infected Domain
display.visualizations.show                   = 1
display.visualizations.type                   = singlevalue
search                                        = | tstats `summariesonly` dc(Malware_Attacks.dest) as current_count from datamodel=Malware where earliest=-24h@h latest=+0s by Malware_Attacks.dest_nt_domain | join type=outer Malware_Attacks.dest_nt_domain [| tstats `summariesonly` dc(Malware_Attacks.dest) as historical_count from datamodel=Malware where earliest=-48h@h latest=-24@h by Malware_Attacks.dest_nt_domain] | `drop_dm_object_name("Malware_Attacks")` | sort 1 - current_count | eval label=dest_nt_domain." has ".current_count." infected systems" | eval label=if(current_count==1,replace(label,"systems","system"),label) | `get_delta` | fields label,dest_nt_domain,current_count,historical_count,delta

[Malware - Top Infected System]
action.email.reportServerEnabled              = 0
alert.track                                   = 0
action.keyindicator                           = 1
action.keyindicator.title                     = Top Infected System
action.keyindicator.subtitle                  =	$dest$
action.keyindicator.value                     = current_count
action.keyindicator.threshold                 = 
action.keyindicator.delta                     = delta
action.keyindicator.invert                    = false
dispatch.latest_time                          = now
display.general.enablePreview                 = 1
display.general.timeRangePicker.show          = false
display.general.type                          = visualizations
display.statistics.rowNumbers                 = 0
display.statistics.wrap                       = 0
display.visualizations.charting.drilldown     = all
display.visualizations.singlevalue.underLabel = Top Infected System
display.visualizations.show                   = 1
display.visualizations.type                   = singlevalue
search                                        = | tstats `summariesonly` dc(Malware_Attacks.signature) as current_count from datamodel=Malware where earliest=-24h@h latest=+0s by Malware_Attacks.dest | join type=outer Malware_Attacks.dest [| tstats `summariesonly` dc(Malware_Attacks.signature) as historical_count from datamodel=Malware where earliest=-48h@h latest=-24@h by Malware_Attacks.dest] | `drop_dm_object_name("Malware_Attacks")` | sort 1 - current_count | eval label=dest." has ".current_count." unique infections" | eval label=if(current_count==1,replace(label,"infections","infection"),label) | `get_delta` | fields label,dest,current_count,historical_count,delta

###### Report Searches ######
[Endpoint - Application Errors]
action.email.reportServerEnabled = 0
alert.track                      = 0
dispatch.earliest_time           = -24h@h
dispatch.latest_time             = now
display.events.fields            = ["source", "sourcetype", "host", "event_id"] 
display.events.list.wrap         = true
display.events.rowNumbers        = false
display.events.type              = list
display.general.enablePreview    = true
display.general.type             = events
search                           = tag=endpoint tag=application tag=error | `get_event_id` | `parse_event_id(event_id)` | head 1000

[Malware - Average Infection Length Over Time]
action.email.reportServerEnabled                    = 0
alert.track                                         = 0
dispatch.earliest_time                              = -7d@d
dispatch.latest_time                                = now
display.general.enablePreview                       = 1
display.general.type                                = visualizations
display.statistics.rowNumbers                       = 0
display.statistics.wrap                             = 0
display.visualizations.charting.chart               = line
display.visualizations.charting.chart.nullValueMode = connect
display.visualizations.charting.drilldown           = all
display.visualizations.show                         = 1
display.visualizations.type                         = charting
search                                              = `get_summary(endpoint_summary,"Endpoint - Average Infection Length - Summary Gen")` | timechart minspan=1h avg(avg_dayDiff) as avg_dayDiff

[Malware - Activity Over Time]
action.email.reportServerEnabled                    = 0
alert.track                                         = 0
dispatch.earliest_time                              = -24h@h
dispatch.latest_time                                = now
display.general.enablePreview                       = 1
display.general.type                                = visualizations
display.statistics.rowNumbers                       = 0
display.statistics.wrap                             = 0
display.visualizations.charting.chart               = line
display.visualizations.charting.chart.nullValueMode = zero
display.visualizations.charting.drilldown           = all
display.visualizations.show                         = 1
display.visualizations.type                         = charting
search                                              = | `tstats` count from datamodel=Malware by _time span=10m | timechart minspan=10m useother=`useother` count

[Malware - Activity Over Time By Action]
action.email.reportServerEnabled                    = 0
alert.track                                         = 0
dispatch.earliest_time                              = -24h@h
dispatch.latest_time                                = now
display.general.enablePreview                       = 1
display.general.type                                = visualizations
display.statistics.rowNumbers                       = 0
display.statistics.wrap                             = 0
display.visualizations.charting.chart               = line
display.visualizations.charting.chart.nullValueMode = connect
display.visualizations.charting.drilldown           = all
display.visualizations.show                         = 1
display.visualizations.type                         = charting
search                                              = | `tstats` count from datamodel=Malware by _time,Malware_Attacks.action span=10m | timechart minspan=10m useother=`useother` count by Malware_Attacks.action | `drop_dm_object_name("Malware_Attacks")`

[Malware - Activity Over Time By Infection]
action.email.reportServerEnabled          = 0
alert.track                               = 0
dispatch.earliest_time                    = -24h@h
dispatch.latest_time                      = now
display.general.enablePreview             = 1
display.general.type                      = visualizations
display.statistics.rowNumbers             = 0
display.statistics.wrap                   = 0
display.visualizations.charting.chart     = column
display.visualizations.charting.drilldown = all
display.visualizations.show               = 1
display.visualizations.type               = charting
search                                    = | `tstats` count from datamodel=Malware by _time,Malware_Attacks.signature span=10m | timechart minspan=10m useother=`useother` count by Malware_Attacks.signature | `drop_dm_object_name("Malware_Attacks")`

[Malware - Clients By Product Version]
action.email.reportServerEnabled     = 0
alert.track                          = 0
dispatch.latest_time                 = now
display.general.enablePreview        = 1
display.general.timeRangePicker.show = false
display.general.type                 = statistics
display.statistics.drilldown         = row
display.statistics.rowNumbers        = 0
display.statistics.wrap              = 0
display.visualizations.show          = 0
search                               = | inputlookup append=T malware_operations_tracker | stats count by product_version,vendor_product | sort 100 - count

[Malware - Clients By Signature Version]
action.email.reportServerEnabled     = 0
alert.track                          = 0
dispatch.latest_time                 = now
display.general.enablePreview        = 1
display.general.timeRangePicker.show = false
display.general.type                 = statistics
display.statistics.drilldown         = row
display.statistics.rowNumbers        = 0
display.statistics.wrap              = 0
display.visualizations.show          = 0
search                               = | inputlookup append=T malware_operations_tracker | stats count by signature_version,vendor_product | sort 100 - count

[Malware - Clients Not Updating Signatures]
action.email.reportServerEnabled     = 0
alert.track                          = 0
dispatch.latest_time                 = now
display.general.enablePreview        = 1
display.general.timeRangePicker.show = false
display.general.type                 = statistics
display.statistics.drilldown         = row
display.statistics.rowNumbers        = 0
display.statistics.wrap              = 0
display.visualizations.show          = 0
search                               = | inputlookup append=T malware_operations_tracker | rename time_signature_version as _time | eval dayDiff=round((now()-_time)/86400,2) | sort 100 + _time | table _time,dest,dest_nt_domain,product_version,signature_version,vendor_product,dayDiff

[Malware - Repeat Infections]
action.email.reportServerEnabled = 0
alert.track                      = 0
dispatch.earliest_time           = -30d@d
dispatch.latest_time             = now
display.general.enablePreview    = 1
display.general.type             = statistics
display.statistics.drilldown     = row
display.statistics.rowNumbers    = 0
display.statistics.wrap          = 0
display.visualizations.show      = 0
search                           = | tstats `summariesonly` values(Malware_Attacks.action) as action,count from datamodel=Malware where Malware_Attacks.action!=allowed by _time,Malware_Attacks.signature,Malware_Attacks.dest span=1d | `drop_dm_object_name("Malware_Attacks")` | stats values(action) as action,count as day_count by signature,dest | sort 100 - day_count

[Malware - New Malware]
action.email.reportServerEnabled     = 0
alert.track                          = 0
dispatch.latest_time                 = now
display.general.enablePreview        = 1
display.general.timeRangePicker.show = false
display.general.type                 = statistics
display.statistics.drilldown         = row
display.statistics.rowNumbers        = 0
display.statistics.wrap              = 0
display.visualizations.show          = 0
search                               = | inputlookup append=T malware_tracker | stats min(firstTime) as firstTime,dc(dest) by signature | eval _time=firstTime | `daysago(30)` | sort 100 - firstTime | `uitime(firstTime)` | fields firstTime,signature,dc(dest)

[Malware - Oldest Infections]
action.email.reportServerEnabled     = 0
alert.track                          = 0
dispatch.latest_time                 = now
display.general.enablePreview        = 1
display.general.timeRangePicker.show = false
display.general.type                 = statistics
display.statistics.drilldown         = row
display.statistics.rowNumbers        = 0
display.statistics.wrap              = 0
display.visualizations.show          = 0
search                               = | inputlookup append=T malware_tracker | `tracker_timerange_by_value("-30d","now",lastTime,lastTime)` | eval days_active=floor((lastTime-firstTime)/86400 + 1) | `uitime(firstTime)` | `uitime(lastTime)` | sort 100 - days_active | fields firstTime,lastTime,signature,dest,days_active

[Malware - Top 10 Infected Domains]
action.email.reportServerEnabled          = 0
alert.track                               = 0
dispatch.earliest_time                    = -24h@h
dispatch.latest_time                      = now
display.general.enablePreview             = 1
display.general.type                      = visualizations
display.statistics.rowNumbers             = 0
display.statistics.wrap                   = 0
display.visualizations.charting.chart     = bar
display.visualizations.charting.drilldown = all
display.visualizations.chartHeight        = 350
display.visualizations.show               = 1
search                                    = | tstats `summariesonly` dc(Malware_Attacks.dest) as dest_count from datamodel=Malware by Malware_Attacks.dest_nt_domain | `drop_dm_object_name("Malware_Attacks")` | sort 10 - dest_count

[Malware - Top 10 Infected Systems]
action.email.reportServerEnabled          = 0
alert.track                               = 0
dispatch.earliest_time                    = -24h@h
dispatch.latest_time                      = now
display.general.enablePreview             = 1
display.general.type                      = visualizations
display.statistics.rowNumbers             = 0
display.statistics.wrap                   = 0
display.visualizations.charting.chart     = bar
display.visualizations.charting.drilldown = all
display.visualizations.chartHeight        = 350
display.visualizations.show               = 1
search                                    = | tstats `summariesonly` dc(Malware_Attacks.signature) as signature_count from datamodel=Malware by Malware_Attacks.dest | `drop_dm_object_name("Malware_Attacks")` | sort 10 - signature_count

[Malware - Top 10 Infections]
action.email.reportServerEnabled          = 0
alert.track                               = 0
dispatch.earliest_time                    = -24h@h
dispatch.latest_time                      = now
display.general.enablePreview             = 1
display.general.type                      = visualizations
display.statistics.rowNumbers             = 0
display.statistics.wrap                   = 0
display.visualizations.charting.chart     = bar
display.visualizations.charting.drilldown = all
display.visualizations.chartHeight        = 350
display.visualizations.show               = 1
search                                    = | tstats `summariesonly` dc(Malware_Attacks.dest) as dest_count from datamodel=Malware by Malware_Attacks.signature | `drop_dm_object_name("Malware_Attacks")` | sort 10 - dest_count

[Malware - Unique Infected Systems]
action.email.reportServerEnabled              = 0
alert.track                                   = 0
dispatch.earliest_time                        = -24h@h
dispatch.latest_time                          = now
display.general.enablePreview                 = 1
display.general.type                          = visualizations
display.statistics.rowNumbers                 = 0
display.statistics.wrap                       = 0
display.visualizations.charting.drilldown     = all
display.visualizations.singlevalue.underLabel = Unique Infected Systems
display.visualizations.show                   = 1
display.visualizations.type                   = singlevalue
search                                        = | tstats `summariesonly` estdc(Malware_Attacks.dest) as estdc(dest) from datamodel=Malware where Malware_Attacks.action="allowed"

[Malware - Unique Infections]
action.email.reportServerEnabled              = 0
alert.track                                   = 0
dispatch.earliest_time                        = -24h@h
dispatch.latest_time                          = now
display.general.enablePreview                 = 1
display.general.type                          = visualizations
display.statistics.rowNumbers                 = 0
display.statistics.wrap                       = 0
display.visualizations.charting.drilldown     = all
display.visualizations.singlevalue.underLabel = Unique Infections
display.visualizations.show                   = 1
display.visualizations.type                   = singlevalue
search                                        = | tstats `summariesonly` estdc(Malware_Attacks.signature) as estdc(signature) from datamodel=Malware where Malware_Attacks.action="allowed"

###### Swim Lane Searches ######
[Malware - All Malware Attacks By Asset - Swimlane]
action.email.reportServerEnabled                  = 0
action.swimlane                                   = 1
action.swimlane.title                             = Malware Attacks
action.swimlane.color                             = red
action.swimlane.constraint_method                 = reverse_asset_lookup
action.swimlane.constraint_fields                 = Malware_Attacks.dest
action.swimlane.drilldown_search                  = | `datamodel("Malware","Malware_Attacks")` | search $constraints$
alert.track                                       = 0
dispatch.latest_time                              = now
display.page.asset_investigator.0.collection_name = Default
display.page.asset_investigator.0.order           = 3
is_visible                                        = false
search                                            = | tstats `summariesonly` values(Malware_Attacks.action) as action,values(Malware_Attacks.signature) as signature,values(Malware_Attacks.dest) as dest,values(Malware_Attacks.user) as user,count from datamodel=Malware where $constraints$ by _time span=$span$

[Malware - All Malware Attacks By Identity - Swimlane]
action.email.reportServerEnabled                     = 0
action.swimlane                                      = 1
action.swimlane.title                                = Malware Attacks
action.swimlane.color                                = red
action.swimlane.constraint_method                    = reverse_identity_lookup
action.swimlane.constraint_fields                    = Malware_Attacks.user
action.swimlane.drilldown_search                     = | `datamodel("Malware","Malware_Attacks")` | search $constraints$
alert.track                                          = 0
dispatch.latest_time                                 = now
display.page.identity_investigator.0.collection_name = Default
display.page.identity_investigator.0.order           = 3
is_visible                                           = false
search                                               = | tstats `summariesonly` values(Malware_Attacks.action) as action,values(Malware_Attacks.signature) as signature,values(Malware_Attacks.dest) as dest,values(Malware_Attacks.user) as user,count from datamodel=Malware where $constraints$ by _time span=$span$


#####################
## Peformance
#####################

###### Key Indicator Searches ######

## Timesync
[Performance - Number Of Systems Not Time Synchronizing]
action.email.reportServerEnabled              = 0
alert.track                                   = 0
action.keyindicator                           = 1
action.keyindicator.title                     = Timesync Anomalies
action.keyindicator.subtitle                  = System Count
action.keyindicator.value                     = current_count
action.keyindicator.threshold                 = 
action.keyindicator.delta                     = 
action.keyindicator.invert                    = false
dispatch.latest_time                          = now
display.general.enablePreview                 = 1
display.general.timeRangePicker.show          = false
display.general.type                          = visualizations
display.statistics.rowNumbers                 = 0
display.statistics.wrap                       = 0
display.visualizations.charting.drilldown     = all
display.visualizations.singlevalue.underLabel = Timesync Anomalies
display.visualizations.show                   = 1
display.visualizations.type                   = singlevalue
search                                        = | tstats `summariesonly` max(_time) as lastTime from datamodel=Performance where nodename=All_Performance.OS.Timesync All_Performance.OS.Timesync.action=success by All_Performance.dest | `drop_dm_object_name("All_Performance")` | `timeDiff(lastTime)` | search timeDiff>86400 | stats count as current_count

## Uptime
[Performance - Number Of Systems With Uptime Anomalies]
action.email.reportServerEnabled              = 0
alert.track                                   = 0
action.keyindicator                           = 1
action.keyindicator.title                     = Uptime Anomalies
action.keyindicator.subtitle                  = System Count
action.keyindicator.value                     = current_count
action.keyindicator.threshold                 = 
action.keyindicator.delta                     = delta
action.keyindicator.invert                    = false
action.keyindicator.group.0.name              = update_center
action.keyindicator.group.0.order             = 2
dispatch.latest_time                          = now
display.general.enablePreview                 = 1
display.general.timeRangePicker.show          = false
display.general.type                          = visualizations
display.statistics.rowNumbers                 = 0
display.statistics.wrap                       = 0
display.visualizations.charting.drilldown     = all
display.visualizations.singlevalue.underLabel = Uptime Anomalies
display.visualizations.show                   = 1
display.visualizations.type                   = singlevalue
search                                        = | tstats `summariesonly` latest(All_Performance.OS.Uptime.uptime) as uptime from datamodel=Performance where earliest=-48h@h latest=+0s nodename=All_Performance.OS.Uptime by All_Performance.dest | `drop_dm_object_name("All_Performance")` | where (uptime/86400)>30 | stats count as current_count | appendcols [| tstats `summariesonly` latest(All_Performance.OS.Uptime.uptime) as uptime from datamodel=Performance where earliest=-96h@h latest=-48h@h nodename=All_Performance.OS.Uptime by All_Performance.dest | `drop_dm_object_name("All_Performance")` | where (uptime/86400)>30 | stats count as historical_count] | `get_delta`

###### Report Searches ######

## CPU
[Performance - Top-Average CPU Load Over Time By System]
action.email.reportServerEnabled                    = 0
alert.track                                         = 0
dispatch.earliest_time                              = -24h@h
dispatch.latest_time                                = now
display.general.enablePreview                       = 1
display.general.type                                = visualizations
display.statistics.rowNumbers                       = 0
display.statistics.wrap                             = 0
display.visualizations.charting.chart               = line
display.visualizations.charting.chart.nullValueMode = connect
display.visualizations.charting.drilldown           = all
display.visualizations.show                         = 1
display.visualizations.type                         = charting
search                                              = | `tstats` avg(All_Performance.CPU.cpu_load_percent) from datamodel=Performance where nodename=All_Performance.CPU [| `tstats` avg(All_Performance.CPU.cpu_load_percent) from datamodel=Performance where nodename=All_Performance.CPU by All_Performance.dest | stats avg(All_Performance.CPU.cpu_load_percent) as "avg" by All_Performance.dest | sort 10 - "avg" | fields All_Performance.dest | format] by _time,All_Performance.dest span=10m | timechart minspan=10m avg(All_Performance.CPU.cpu_load_percent) as "avg_cpu_load(%)" by All_Performance.dest | `drop_dm_object_name("All_Performance")`

## Memory
[Performance - Memory Utilization By System]
action.email.reportServerEnabled = 0
alert.track                      = 0
dispatch.earliest_time           = -24h@h
dispatch.latest_time             = now
display.general.enablePreview    = 1
display.general.type             = statistics
display.statistics.drilldown     = row
display.statistics.rowNumbers    = 0
display.statistics.wrap          = 0
display.visualizations.show      = 0
search                           = | tstats `summariesonly` latest(All_Performance.Memory.mem) as mem,latest(All_Performance.Memory.mem_used) as mem_used,latest(All_Performance.Memory.mem_free) as mem_free from datamodel=Performance where nodename=All_Performance.Memory by All_Performance.dest | `drop_dm_object_name("All_Performance")` | eval mem_used=if(isnotnull(mem) AND isnotnull(mem_free),mem-mem_free,null()) | eval mem_used_percent=if(isnotnull(mem) AND mem>0,round(mem_used*100/mem,1),null()) | sort 100 - mem_used_percent | eval "mem(GB)"=round(mem/1073741824,1) | eval "mem_used(GB)"=round(mem_used/1073741824,1) | eval "mem_free(GB)"=round(mem_free/1073741824,1) | fields dest,*(GB),mem_used_percent

## Storage
[Performance - Storage Utilization By System]
action.email.reportServerEnabled = 0
alert.track                      = 0
dispatch.earliest_time           = -48h@h
dispatch.latest_time             = now
display.general.enablePreview    = 1
display.general.type             = statistics
display.statistics.drilldown     = row
display.statistics.rowNumbers    = 0
display.statistics.wrap          = 0
display.visualizations.show      = 0
search                           = | tstats `summariesonly` latest(All_Performance.Storage.storage) as storage, latest(All_Performance.Storage.storage_free) as storage_free, latest(All_Performance.Storage.storage_free_percent) as storage_free_percent, latest(All_Performance.Storage.storage_used) as storage_used, latest(All_Performance.Storage.storage_used_percent) as storage_used_percent from datamodel=Performance where nodename=All_Performance.Storage by All_Performance.dest,All_Performance.Storage.mount | sort 100 + storage_free_percent | `drop_dm_object_name("All_Performance")` | `drop_dm_object_name("Storage")` | eval storage=if(isnull(storage) AND isnotnull(storage_free) AND isnotnull(storage_free_percent),(storage_free)*(1-(storage_free_percent/100)),storage) | eval storage_used=if(isnotnull(storage) AND isnotnull(storage_free),storage-storage_free,storage_used) | eval "storage(GB)"=round(storage/1073741824,1) | eval "storage_free(GB)"=round(storage_free/1073741824,1) | eval storage_free_percent=round(storage_free_percent,1) | eval "storage_used(GB)"=round(storage_used/1073741824,1) | fields dest,mount,*(GB),storage_free_percent

## Time Synchronization
[Performance - Time Synchronization Failures]
action.email.reportServerEnabled = 0
alert.track                      = 0
dispatch.earliest_time           = -24h@h
dispatch.latest_time             = now
display.general.enablePreview    = 1
display.general.type             = statistics
display.statistics.drilldown     = row
display.statistics.rowNumbers    = 0
display.statistics.wrap          = 0
display.visualizations.show      = 0
search                           = | tstats `summariesonly` max(_time) as _time,latest(All_Performance.dest_should_timesync) as dest_should_timesync,count from datamodel=Performance where nodename=All_Performance.OS.Timesync All_Performance.OS.Timesync.action=failure by All_Performance.dest | eval action="failure" | `drop_dm_object_name("All_Performance")` | fields _time,action,dest,dest_should_timesync,count

[Performance - Systems Not Time Synching]
action.email.reportServerEnabled = 0
alert.track                      = 0
dispatch.earliest_time           = -30d@d
dispatch.latest_time             = now
display.general.enablePreview    = 1
display.general.type             = statistics
display.statistics.drilldown     = row
display.statistics.rowNumbers    = 0
display.statistics.wrap          = 0
display.visualizations.show      = 0
search                           = | tstats `summariesonly` min(_time) as firstTime,max(_time) as lastTime,latest(All_Performance.dest_should_timesync) as dest_should_timesync from datamodel=Performance where nodename=All_Performance.OS.Timesync All_Performance.OS.Timesync.action=success by All_Performance.dest | `drop_dm_object_name("All_Performance")` | `timeDiff(lastTime)` | search timeDiff>86400 | sort 100 + lastTime | `uitime(firstTime)` | `uitime(lastTime)` | fields firstTime,lastTime,dest,dest_should_timesync

[Performance - Indexing Time Delay By Host]
action.email.reportServerEnabled     = 0
alert.track                          = 0
dispatch.earliest_time               = -7d@d
dispatch.latest_time                 = now
display.general.enablePreview        = 1
display.general.type                 = statistics
display.statistics.drilldown         = row
display.statistics.rowNumbers        = 0
display.statistics.wrap              = 0
display.visualizations.show          = 0
search                               = `index_time_delta` | stats min(min_timeDiff) as min_timeDiff,max(max_timeDiff) as max_timeDiff,sum(sum_timeDiff) as sum_timeDiff,sum(count) as count by host | `get_asset(host)` | eval "min_diff(minutes)"=round(min_timeDiff/60,1) | eval "max_diff(minutes)"=round(max_timeDiff/60,1) | eval "avg_diff(minutes)"=round(sum_timeDiff/(count*60),1) | sort 100 + avg_diff(minutes) | fields host,host_should_timesync,min_diff(minutes),avg_diff(minutes),max_diff(minutes)

[Performance - Indexing Time Delay By Sourcetype]
action.email.reportServerEnabled     = 0
alert.track                          = 0
dispatch.earliest_time               = -7d@d
dispatch.latest_time                 = now
display.general.enablePreview        = 1
display.general.type                 = statistics
display.statistics.drilldown         = row
display.statistics.rowNumbers        = 0
display.statistics.wrap              = 0
display.visualizations.show          = 0
search                               = `index_time_delta` | stats min(min_timeDiff) as min_timeDiff,max(max_timeDiff) as max_timeDiff,sum(sum_timeDiff) as sum_timeDiff,sum(count) as count by sourcetype | eval "min_diff(minutes)"=round(min_timeDiff/60,1) | eval "max_diff(minutes)"=round(max_timeDiff/60,1) | eval "avg_diff(minutes)"=round(sum_timeDiff/(count*60),1) | sort 100 + avg_diff(minutes) | fields sourcetype,min_diff(minutes),avg_diff(minutes),max_diff(minutes)

[Performance - Time Service Start Mode Anomalies]
action.email.reportServerEnabled     = 0
alert.track                          = 0
dispatch.earliest_time               = -24h@h
dispatch.latest_time                 = now
display.general.enablePreview        = 1
display.general.type                 = statistics
display.statistics.drilldown         = row
display.statistics.rowNumbers        = 0
display.statistics.wrap              = 0
display.visualizations.show          = 0
search                               = | tstats `summariesonly` max(_time) as _time,latest(All_Application_State.Services.start_mode) as start_mode,latest(All_Application_State.Services.status) as status,latest(All_Application_State.dest_should_timesync) as dest_should_timesync from datamodel=Application_State where nodename=All_Application_State.Services (All_Application_State.tag=time All_Application_State.tag=synchronize) by All_Application_State.dest,All_Application_State.Services.service | `drop_dm_object_name("All_Application_State")` | `drop_dm_object_name("Services")` | search start_mode!=auto | sort 100 + start_mode | fields _time,dest,dest_should_timesync,service,start_mode,status

## Uptime
[Performance - Minimum System Uptime]
action.email.reportServerEnabled              = 0
alert.track                                   = 0
dispatch.earliest_time                        = -48h@h
dispatch.latest_time                          = now
display.general.enablePreview                 = 1
display.general.type                          = visualizations
display.statistics.rowNumbers                 = 0
display.statistics.wrap                       = 0
display.visualizations.charting.drilldown     = all
display.visualizations.singlevalue.underLabel = Minimum System Uptime
display.visualizations.show                   = 1
display.visualizations.type                   = singlevalue
search                                        = | tstats `summariesonly` latest(All_Performance.OS.Uptime.uptime) as uptime from datamodel=Performance where nodename=All_Performance.OS.Uptime All_Performance.OS.Uptime.uptime!=unknown All_Performance.OS.Uptime.uptime>=0 by All_Performance.dest | sort 1 + uptime | `drop_dm_object_name("All_Performance")` | `uptime2string(uptime,uptime)` | eval label=dest." has been up for ".uptime | fields label,dest,uptime

[Performance - Average System Uptime]
action.email.reportServerEnabled              = 0
alert.track                                   = 0
dispatch.earliest_time                        = -48h@h
dispatch.latest_time                          = now
display.general.enablePreview                 = 1
display.general.type                          = visualizations
display.statistics.rowNumbers                 = 0
display.statistics.wrap                       = 0
display.visualizations.charting.drilldown     = all
display.visualizations.singlevalue.underLabel = Average System Uptime
display.visualizations.show                   = 1
display.visualizations.type                   = singlevalue
search                                        = | tstats `summariesonly` avg(All_Performance.OS.Uptime.uptime) as avg_uptime from datamodel=Performance where nodename=All_Performance.OS.Uptime All_Performance.OS.Uptime.uptime!=unknown All_Performance.OS.Uptime.uptime>=0 | `uptime2string(avg_uptime,avg_uptime)` | rename avg_uptime as "avg(uptime)" | fields avg(uptime)

[Performance - Maximum System Uptime]
action.email.reportServerEnabled              = 0
alert.track                                   = 0
dispatch.earliest_time                        = -48h@h
dispatch.latest_time                          = now
display.general.enablePreview                 = 1
display.general.type                          = visualizations
display.statistics.rowNumbers                 = 0
display.statistics.wrap                       = 0
display.visualizations.charting.drilldown     = all
display.visualizations.singlevalue.underLabel = Maximum System Uptime
display.visualizations.show                   = 1
display.visualizations.type                   = singlevalue
search                                        = | tstats `summariesonly` latest(All_Performance.OS.Uptime.uptime) as uptime from datamodel=Performance where nodename=All_Performance.OS.Uptime All_Performance.OS.Uptime.uptime!=unknown All_Performance.OS.Uptime.uptime>=0 by All_Performance.dest | sort 1 - uptime | `drop_dm_object_name("All_Performance")` | `uptime2string(uptime,uptime)` | eval label=dest." has been up for ".uptime | fields label,dest,uptime

[Performance - Uptime By System]
action.email.reportServerEnabled = 0
alert.track                      = 0
dispatch.earliest_time           = -48h@h
dispatch.latest_time             = now
display.general.enablePreview    = 1
display.general.type             = statistics
display.statistics.drilldown     = row
display.statistics.rowNumbers    = 0
display.statistics.wrap          = 0
display.visualizations.show      = 0
search                           = | tstats `summariesonly` latest(All_Performance.OS.Uptime.uptime) as uptime from datamodel=Performance where nodename=All_Performance.OS.Uptime by All_Performance.dest | `drop_dm_object_name("All_Performance")` | sort 100 - uptime | `uptime2string(uptime,uptime)` | fields dest,uptime


###############################
##  Primary Functions
###############################
[Endpoint - Multiple Primary Functions Detected - Rule]
action.email.sendresults 	  = 0
action.risk                   = 1
action.risk._risk_object      = dest
action.risk._risk_object_type = system
action.risk._risk_score       = 60
action.summary_index 		  = 1
action.summary_index._name 	  = notable
action.summary_index.ttl 	  = 1p
alert.digest_mode 		      = 1
alert.suppress 			      = 1
alert.suppress.fields 		  = dest 
alert.suppress.period 		  = 86300
alert.track 			      = 0
cron_schedule 			      = 0 * * * * 
disabled  			          = True
dispatch.latest_time 		  = +0s
enableSched 			      = 1
is_visible                    = false
search 				          = `primary_functions_tracker` | eval _time=lastTime | `hoursago(24)` | search is_primary=true | stats values(function) as function,dc(function) as function_count by dest | search function_count>1 | `makesv(function,", ")`


#####################
## Updates
#####################

###### Key Indicator Searches ######
[Updates - Available Updates]
action.email.reportServerEnabled              = 0
alert.track                                   = 0
action.keyindicator                           = 1
action.keyindicator.title                     = Available Updates
action.keyindicator.subtitle                  = Count
action.keyindicator.value                     = current_count
action.keyindicator.threshold                 = 
action.keyindicator.delta                     = delta
action.keyindicator.invert                    = false
action.keyindicator.group.0.name              = update_center
action.keyindicator.group.0.order             = 3
dispatch.latest_time                          = now
display.general.enablePreview                 = 1
display.general.timeRangePicker.show          = false
display.general.type                          = visualizations
display.statistics.rowNumbers                 = 0
display.statistics.wrap                       = 0
display.visualizations.charting.drilldown     = all
display.visualizations.singlevalue.underLabel = Available Updates
display.visualizations.show                   = 1
display.visualizations.type                   = singlevalue
search                                        = | tstats `summariesonly` latest(Updates.status) as status from datamodel=Updates where earliest=-30d@d latest=+0s by Updates.dest,Updates.signature_id,Updates.vendor_product | search status=available | stats count as current_count | appendcols [| tstats `summariesonly` latest(Updates.status) as status from datamodel=Updates where earliest=-37d@d latest=-7d@d by Updates.dest,Updates.signature_id,Updates.vendor_product | search status=available | stats count as historical_count] | `get_delta`

[Updates - Installed Updates]
action.email.reportServerEnabled              = 0
alert.track                                   = 0
action.keyindicator                           = 1
action.keyindicator.title                     = Installed Updates
action.keyindicator.subtitle                  = Count
action.keyindicator.value                     = current_count
action.keyindicator.threshold                 = 
action.keyindicator.delta                     = delta
action.keyindicator.invert                    = true
action.keyindicator.group.0.name              = update_center
action.keyindicator.group.0.order             = 4
dispatch.latest_time                          = now
display.general.enablePreview                 = 1
display.general.timeRangePicker.show          = false
display.general.type                          = visualizations
display.statistics.rowNumbers                 = 0
display.statistics.wrap                       = 0
display.visualizations.charting.drilldown     = all
display.visualizations.singlevalue.underLabel = Installed Updates
display.visualizations.show                   = 1
display.visualizations.type                   = singlevalue
search                                        = | tstats `summariesonly` latest(Updates.status) as status from datamodel=Updates where earliest=-30d@d latest=+0s by Updates.dest,Updates.signature_id,Updates.vendor_product | search status=installed | stats count as current_count | appendcols [| tstats `summariesonly` latest(Updates.status) as status from datamodel=Updates where earliest=-37d@d latest=-7d@d by Updates.dest,Updates.signature_id,Updates.vendor_product | search status=installed | stats count as historical_count] | `get_delta`

[Updates - Number Of Systems Not Updating]
action.email.reportServerEnabled              = 0
alert.track                                   = 0
action.keyindicator                           = 1
action.keyindicator.title                     = Not Updating
action.keyindicator.subtitle                  = System Count
action.keyindicator.value                     = count
action.keyindicator.threshold                 = 
action.keyindicator.delta                     = 
action.keyindicator.invert                    = 
action.keyindicator.group.0.name              = update_center
action.keyindicator.group.0.order             = 0
dispatch.earliest_time                        = -1y@d
dispatch.latest_time                          = now
display.general.enablePreview                 = 1
display.general.timeRangePicker.show          = false
display.general.type                          = visualizations
display.statistics.rowNumbers                 = 0
display.statistics.wrap                       = 0
display.visualizations.charting.drilldown     = all
display.visualizations.singlevalue.underLabel = Systems Not Updating
display.visualizations.show                   = 1
display.visualizations.type                   = singlevalue
search                                        = | tstats `summariesonly` min(_time) as firstTime from datamodel=Updates where Updates.status=installed by Updates.dest,Updates.signature_id,Updates.vendor_product | `drop_dm_object_name("Updates")` | stats max(firstTime) as lastTime by dest | `dayDiff(lastTime)` | search dayDiff>30 | stats count

[Updates - Number Of Systems With Start Mode Anomalies]
action.email.reportServerEnabled              = 0
alert.track                                   = 0
action.keyindicator                           = 1
action.keyindicator.title                     = Update Service Anomalies
action.keyindicator.subtitle                  = System Count
action.keyindicator.value                     = current_count
action.keyindicator.threshold                 = 
action.keyindicator.delta                     = delta
action.keyindicator.invert                    = 
action.keyindicator.group.0.name              = update_center
action.keyindicator.group.0.order             = 1
dispatch.latest_time                          = now
display.general.enablePreview                 = 1
display.general.timeRangePicker.show          = false
display.general.type                          = visualizations
display.statistics.rowNumbers                 = 0
display.statistics.wrap                       = 0
display.visualizations.charting.drilldown     = all
display.visualizations.singlevalue.underLabel = Update Service Anomalies
display.visualizations.show                   = 1
display.visualizations.type                   = singlevalue
search                                        = | tstats `summariesonly` latest(All_Application_State.Services.start_mode) as start_mode,latest(All_Application_State.Services.status) as status from datamodel=Application_State where earliest=-24h@h latest=+0s nodename=All_Application_State.Services All_Application_State.tag=update by All_Application_State.dest | `drop_dm_object_name("All_Application_State")` | search start_mode!=auto | stats count as current_count | appendcols [| tstats `summariesonly` latest(All_Application_State.Services.start_mode) as start_mode,latest(All_Application_State.Services.status) as status from datamodel=Application_State where earliest=-48h@h latest=-24h@h nodename=All_Application_State.Services All_Application_State.tag=update by All_Application_State.dest | `drop_dm_object_name("All_Application_State")` | search start_mode!=auto | stats count as historical_count] | `get_delta`

###### Report Searches ######
[Updates - Available Updates By System]
action.email.reportServerEnabled = 0
alert.track                      = 0
dispatch.earliest_time           = -30d@d
dispatch.latest_time             = now
display.general.enablePreview    = 1
display.general.type             = statistics
display.statistics.drilldown     = row
display.statistics.rowNumbers    = 0
display.statistics.wrap          = 0
display.visualizations.show      = 0
search                           = | tstats `summariesonly` latest(Updates.status) as status from datamodel=Updates by Updates.dest,Updates.signature_id,Updates.vendor_product | `drop_dm_object_name("Updates")` | search status=available | stats count by dest | `get_asset(dest)` | sort 100 - count | fields dest,dest_should_update,count

[Updates - Systems By Last Update Time]
action.email.reportServerEnabled = 0
alert.track                      = 0
dispatch.earliest_time           = -1y@d
dispatch.latest_time             = now
display.general.enablePreview    = 1
display.general.type             = statistics
display.statistics.drilldown     = row
display.statistics.rowNumbers    = 0
display.statistics.wrap          = 0
display.visualizations.show      = 0
search                           = | tstats `summariesonly` min(_time) as _time,latest(Updates.dest_should_update) as dest_should_update from datamodel=Updates where Updates.status=installed by Updates.dest,Updates.signature_id,Updates.vendor_product | `drop_dm_object_name("Updates")` | stats max(_time) as lastTime,latest(dest_should_update) as dest_should_update by dest | eval dayDiff=round((now()-lastTime)/86400,1) | sort + lastTime | `uitime(lastTime)`

[Updates - Top Systems Needing Updates]
action.email.reportServerEnabled          = 0
alert.track                               = 0
dispatch.earliest_time                    = -30d@d
dispatch.latest_time                      = now
display.general.enablePreview             = 1
display.general.type                      = visualizations
display.statistics.rowNumbers             = 0
display.statistics.wrap                   = 0
display.visualizations.charting.chart     = bar
display.visualizations.charting.drilldown = all
display.visualizations.chartHeight        = 350
display.visualizations.show               = 1
search                                    = | tstats `summariesonly` latest(Updates.status) as status from datamodel=Updates by Updates.dest,Updates.signature_id,Updates.vendor_product | `drop_dm_object_name("Updates")` | search status=available | stats count by dest | sort 10 - count

[Updates - Top Updates Needed]
action.email.reportServerEnabled          = 0
alert.track                               = 0
dispatch.earliest_time                    = -30d@d
dispatch.latest_time                      = now
display.general.enablePreview             = 1
display.general.type                      = visualizations
display.statistics.rowNumbers             = 0
display.statistics.wrap                   = 0
display.visualizations.charting.chart     = bar
display.visualizations.charting.drilldown = all
display.visualizations.chartHeight        = 350
display.visualizations.show               = 1
search                                    = | tstats `summariesonly` latest(Updates.status) as status from datamodel=Updates by Updates.dest,Updates.signature_id,Updates.vendor_product | `drop_dm_object_name("Updates")` | search status=available | stats count by signature_id | sort 10 - count

[Updates - Update Errors]
action.email.reportServerEnabled = 0
alert.track                      = 0
dispatch.earliest_time           = -24h@h
dispatch.latest_time             = now
display.events.fields            = ["source", "sourcetype", "host"] 
display.events.list.wrap         = true
display.events.rowNumbers        = false
display.events.type              = list
display.general.enablePreview    = true
display.general.type             = events
search                           = | `datamodel("Updates", "Update_Errors")` | `drop_dm_object_name("Update_Errors")` | head 1000

[Updates - Update Service Start Mode Anomalies]
action.email.reportServerEnabled     = 0
alert.track                          = 0
dispatch.earliest_time               = -24h@h
dispatch.latest_time                 = now
display.general.enablePreview        = 1
display.general.type                 = statistics
display.statistics.drilldown         = row
display.statistics.rowNumbers        = 0
display.statistics.wrap              = 0
display.visualizations.show          = 0
search                               = | tstats `summariesonly` latest(All_Application_State.Services.start_mode) as start_mode,latest(All_Application_State.Services.status) as status from datamodel=Application_State where nodename=All_Application_State.Services All_Application_State.tag=update by All_Application_State.dest,All_Application_State.Services.service | `drop_dm_object_name("All_Application_State")` | search start_mode!=auto | sort 100 + start_mode | fields dest,service,start_mode,status

[Updates - Updates By Status]
action.email.reportServerEnabled          = 0
alert.track                               = 0
dispatch.earliest_time                    = -30d@d
dispatch.latest_time                      = now
display.general.enablePreview             = 1
display.general.type                      = visualizations
display.statistics.rowNumbers             = 0
display.statistics.wrap                   = 0
display.visualizations.charting.chart     = pie
display.visualizations.charting.drilldown = all
display.visualizations.show               = 1
search                                    = | tstats `summariesonly` latest(Updates.status) as status from datamodel=Updates by Updates.dest,Updates.signature_id,Updates.vendor_product | `drop_dm_object_name("Updates")` | stats count by status | sort - count


#####################
## User Accounts
#####################

[Endpoint - Anomalous User Account Creation - Rule]
action.email.sendresults      = 0
action.risk                   = 1
action.risk._risk_object      = user
action.risk._risk_object_type = user
action.risk._risk_score       = 60
action.summary_index          = 1
action.summary_index._name    = notable
action.summary_index.ttl      = 1p
alert.digest_mode             = 1
alert.suppress                = 1
alert.suppress.fields         = user
alert.suppress.period         = 86300
alert.track                   = false
cron_schedule                 = 30 * * * *
disabled                      = True
dispatch.latest_time          = +0s
enableSched                   = 1
is_visible                    = false
search                        = | inputlookup append=T useraccounts_tracker | eval earliestQual=case(match("-24h@h", "^\d"), tostring("-24h@h"),  match("-24h@h", "^([@\+-]){1}"), relative_time(time(), "-24h@h"),  true(), time()) | eval latestQual=case(match("+0s", "^\d"), tostring("+0s"),  match("+0s", "^([@\+-]){1}"), relative_time(time(), "+0s"),  true(), time()) | where (firstTime>=earliestQual AND firstTime<=latestQual) | fields - earliestQual, latestQual | stats dc(dest) as "dest_count" by "user" | where 'dest_count'>3

