
#####################
## Access Tracking
#####################
[access_tracker]
args =
definition = inputlookup append=T access_tracker | `get_identity4events(user)` | `get_asset(dest)` | `get_identity4events(dest_owner)`
errormsg =
iseval = 0
validation =

[inactive_accounts(1)]
args = greaterThan
definition = inputlookup append=T access_tracker | stats min(firstTime) as firstTime,max(lastTime) as lastTime by user | `get_identity4events(user)` | eval _time=lastTime | `daysago($greaterThan$,">=")`
errormsg =
iseval = 0
validation =

[inactive_account_usage]
args = 
definition = inputlookup append=T access_tracker | stats min(firstTime) as firstTime,values(second2lastTime) as second2lastTime,values(lastTime) as lastTime_vals,max(lastTime) as lastTime by user | `get_identity4events(user)` | `mvappend_field(second2lastTime,lastTime_vals)` | eval second2lastTime=if(mvcount(second2lastTime)>=2,mvindex(second2lastTime,mvcount(second2lastTime)-2),second2lastTime) | eval inactiveDays=round((lastTime-second2lastTime)/86400,2) | eval _time=lastTime 
errormsg =
iseval = 0
validation =

[inactive_account_usage(2)]
args = greaterThan,lessThan
definition = `inactive_account_usage` | search inactiveDays>=$greaterThan$ | `hoursago($lessThan$)`
errormsg =
iseval = 0
validation =

## Access apps
[access_apps]
args =
definition = inputlookup append=T access_app_tracker
errormsg =
iseval = 0
validation =


#####################
## Account Management
#####################
[account_management]
args = 
definition = tag=account (tag=management OR tag=lockout) | tags outputfield=tag | fillnull value=unknown signature,src,src_nt_domain,src_user,dest,dest_nt_domain,user
errormsg =
iseval = 0
validation =


#####################
## Authentication
#####################

## Authentication macro breakdown
## 1.  Search for events tagged authentication
## 2.  Exclude successful authentication messages where user is a windows machine account (endswith $)
## 3.  Create a "tag" field representative of all tags in the event
## 4.  Fill "unknown" on interesting fields
[authentication]
args = 
definition = tag=authentication NOT (action=success user=*$) | tags outputfield=tag | fillnull value=unknown action,app,src,src_user,dest,user
errormsg =
iseval = 0
validation =

[authentication(1)]
args = action
definition = `authentication` | search action=$action$
errormsg = action (arg1) must be "success" or "failure"
iseval = 0
validation = action=="success" OR action=="failure"


#####################
## Default Accounts
#####################
[default_user_accounts]
args =
definition = (tag=default OR src_user_category=default OR user_category=default)
errormsg =
iseval = 0
validation = 

[all_default_account_usage(2)]
args = default_account,default_account_system
definition = `default_user_accounts` | eval $default_account$=if(src_user_category=="default",src_user,$default_account$) | eval $default_account_system$=if(src_user_category=="default",src,$default_account_system$) | eval $default_account$=if(user_category=="default",user,$default_account$) | eval $default_account_system$=if(user_category=="default",dest,$default_account_system$)
errormsg =
iseval = 0
validation =

[default_local_accounts]
args =
definition = `default_user_accounts` `useraccounts` | tags outputfield=tag
errormsg =
iseval = 0
validation =


#####################
## Persistence
#####################

# Select tags to be persisted
#
# NOTE: This macro selects the subset of tags that will be persisted
# to disk in the authentication and account management summaries.  Modify this
# macro to persist additional tags.

[settags_access]
args       = 
definition = (tag="default" OR tag="privileged" OR tag="cleartext" OR tag="insecure" OR tag="lockout" OR tag="interactive" OR tag="watchlist")
