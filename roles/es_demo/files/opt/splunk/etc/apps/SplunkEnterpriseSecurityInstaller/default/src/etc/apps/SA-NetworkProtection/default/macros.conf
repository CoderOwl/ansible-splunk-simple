
#####################
## Global
#####################

## src tracker
[src_tracker]
definition = `src_tracker("*")`

[src_tracker(1)]
args       = action
definition = `tstats` count,values(sourcetype) from datamodel=Network_Traffic where All_Traffic.action=$action$ by All_Traffic.src | `drop_dm_object_name("All_Traffic")` | `tstats` append=true count,values(sourcetype) from datamodel=Intrusion_Detection by IDS_Attacks.src | `drop_dm_object_name("IDS_Attacks")` | `tstats` append=true count,values(sourcetype) from datamodel=Web by Web.src | `drop_dm_object_name("Web")` | stats count,values(sourcetype) as sourcetype by src
errormsg   = action (arg1) must be "allowed" or "blocked" or "*"
iseval     = 0
validation = action=="allowed" OR action=="blocked" OR action=="*"

## dest tracker
[dest_tracker]
definition = `dest_tracker("*")`

[dest_tracker(1)]
args       = action
definition = `tstats` count,values(sourcetype) from datamodel=Network_Traffic where All_Traffic.action=$action$ by All_Traffic.dest | `drop_dm_object_name("All_Traffic")` | `tstats` append=true count,values(sourcetype) from datamodel=Intrusion_Detection by IDS_Attacks.dest | `drop_dm_object_name("IDS_Attacks")` | `tstats` append=true count,values(sourcetype) from datamodel=Web by Web.dest | `drop_dm_object_name("Web")` | stats count,values(sourcetype) as sourcetype by dest
errormsg   = action (arg1) must be "allowed" or "blocked" or "*"
iseval     = 0
validation = action=="allowed" OR action=="blocked" OR action=="*"

## src_dest tracker
[src_dest_tracker]
definition = `src_dest_tracker("*")`

[src_dest_tracker(1)]
args       = action
definition = `tstats` count,values(sourcetype) from datamodel=Network_Traffic where All_Traffic.action=$action$ by All_Traffic.src,All_Traffic.dest  | `drop_dm_object_name("All_Traffic")` | `tstats` append=true count,values(sourcetype) from datamodel=Intrusion_Detection by IDS_Attacks.src,IDS_Attacks.dest | `drop_dm_object_name("IDS_Attacks")` | `tstats` append=true count,values(sourcetype) from datamodel=Web by Web.src,Web.dest | `drop_dm_object_name("Web")` | stats count,values(sourcetype) as sourcetype by src,dest
errormsg   = action (arg1) must be "allowed" or "blocked" or "*"
iseval     = 0
validation = action=="allowed" OR action=="blocked" OR action=="*"


#####################
## Firewall
#####################

###### Communication Events ( flow, switch, router, firewall ) ######
## add "| directionalize" if you want splunk to try and figure out the correct direction of the traffic
[communicate]
args = 
definition = tag=network tag=communicate | tags outputfield=tag | fillnull value=unknown action,dvc,rule,transport,src,dest | `lower(transport)` | fillnull value=0 bytes_in,bytes_out,src_port,dest_port | eval bytes=if(isnull(bytes),bytes_in+bytes_out,bytes) | `get_vendor_product`
errormsg =
iseval = 0
validation =

[communicate(1)]
args = action
definition = action=$action$ `communicate`
errormsg = action (arg1) must be "allowed" or "blocked"
iseval = 0
validation = action=="allowed" OR action=="blocked"


###### Communication Rule Tracker ######
[communication_rule_tracker]
args =
definition = inputlookup append=T communication_rule_tracker | `get_asset(dvc)` | `get_identity4events(dvc_owner)`
errormsg =
iseval = 0
validation =

###### Network Changes ######
[network_change]
args =
definition = tag=network tag=modify | eval command=if(sourcetype=="opsec_audit",Operation." ".ObjectName,command) | fillnull value=unknown dvc,action,user,command
errormsg =
iseval = 0
validation =

###### Port/Protocol Tracker ######
[port_protocol_tracker]
args =
definition = inputlookup append=T port_protocol_tracker | `get_application_protocol`
errormsg =
iseval = 0
validation =

## Application protocol lookup
[get_application_protocol]
args = 
definition = lookup local=true application_protocol_lookup transport,dest_port OUTPUTNEW app | fillnull value=unknown app
errormsg =
iseval = 0
validation =

## Prohibited traffic

# Note: this macro drops the input field name, for simplicity in constructing views.
[is_traffic_prohibited(1)]
args = field
definition = `is_traffic_prohibited($field$, "category")` | rename $field$_is_prohibited as is_prohibited | rename $field$_is_secure as is_secure | fillnull value="false" is_prohibited | fillnull value="unknown" is_secure | `lower(is_prohibited)` | `lower(is_secure)`
errormsg =
iseval = 0
validation =

## is_traffic_prohibited(2) macro breakdown
## 1 - Give tmp_src_category a non-null value. This ensures that wildcard src_category
##     definitions in the lookup table will match even if src_category==null.
## 2 - Give tmp_dest_category a non-null value. This ensures that wildcard dest_category
##     definitions in the lookup table will match even if dest_category==null.
## 3 - Lookup traffic status based on wildcard transport, port, tmp_src_category,
##     and tmp_dest_category values.
## 4 - Remove temporary fields.
[is_traffic_prohibited(2)]
args = field, qual
definition = eval tmp_src_$qual$=if(isnull(src_$qual$), "unknown", src_$qual$) | eval tmp_dest_$qual$=if(isnull(dest_$qual$), "unknown", dest_$qual$) | lookup local=true prohibited_traffic_lookup_by_$qual$ transport,src_$qual$ AS tmp_src_$qual$,dest_$qual$ AS tmp_dest_$qual$,dest_port AS $field$ OUTPUTNEW is_prohibited as $field$_is_prohibited, is_secure as $field$_is_secure, note as $field$_note | fields - tmp_src_$qual$ tmp_dest_$qual$
errormsg =
iseval = 0
validation = qual=="category" OR qual=="pci_domain"

[prohibited_traffic]
args =
definition = `prohibited_traffic("category")`
errormsg =
iseval = 0
validation =

[prohibited_traffic(1)]
args = qual
definition = `prohibited_traffic_by_$qual$`
errormsg =
iseval = 0
validation = qual=="category" OR qual=="pci_domain"

[prohibited_traffic_by_category]
args =
definition = inputlookup append=T prohibited_traffic_lookup_by_category | fields transport,src_category,dest_category,dest_port,is_prohibited,is_secure,note
errormsg =
iseval = 0
validation =

[prohibited_traffic_by_pci_domain]
args =
definition = inputlookup append=T prohibited_traffic_lookup_by_pci_domain | fields transport,src_pci_domain,dest_pci_domain,dest_port,is_prohibited,is_secure,note
errormsg =
iseval = 0
validation =


#####################
## IDS
#####################
[ids_attack]
args = 
definition = tag=ids tag=attack | tags outputfield=tag | fillnull value=unknown dvc,category,ids_type,severity,signature,src,dest,user | `lower(transport)` | fillnull value=0 src_port,dest_port | `get_vendor_product` | `remap_subjects`
iseval = 0
validation =

[ids_attack_tracker]
args =
definition = inputlookup append=T ids_attack_tracker
errormsg =
iseval = 0
validation =

[ids_category_tracker]
args =
definition = inputlookup append=T ids_category_tracker | dedup category | eval category_lower=lower(category) | sort + category
errormsg =
iseval = 0
validation =


#####################
## Persistence
#####################

## Select tags to be persisted
##
## NOTE: This macro selects the subset of tags that will be persisted.
##       Modify this macro to persist additional tags.
[settags_network]
args       = 
definition = ( tag="misconfiguration" OR tag="wireless" OR tag="rogue" OR tag="pii" OR tag="policy" OR tag="password" )


#####################
## Proxy
#####################
[proxy]
args =
definition = tag=web tag=proxy | tags outputfield=tag | fillnull value="" uri_scheme,dest,uri_path,uri_query | eval url=if(isnull(url),uri_scheme."://".dest.uri_path.uri_query,url) | eval url=trim(url," ") | eval url=if(url=="://","-",url) | eval url_length=len(url) | fillnull value="-" action,category,status,src,http_content_type,http_method,http_referrer,http_user_agent,user | fillnull value=0 bytes_in,bytes_out | eval dest=if(dest=="","-",dest)
errormsg =
iseval = 0
validation =

[get_tld]
definition = extract tld_extract | rename tld as tld_candidate | lookup update=true cim_http_tld_lookup tld as tld_candidate OUTPUT tld

[get_tld(1)]
args = domain
definition = rex field=$domain$ ".*\.(?<tld_candidate>.+)" | lookup update=true cim_http_tld_lookup tld as tld_candidate OUTPUT tld


#####################
## Vulnerabilities
#####################
[vulnerability]
args =
definition = tag=vulnerability tag=report | tags outputfield=tag | fillnull value=unknown category,severity,signature,dest,os | fillnull value="" cvss | `get_vendor_product`
errormsg =
iseval = 0
validation =

## Vulnerability Signature Reference
[get_vuln_signature_reference]
definition = lookup local=true vuln_signature_reference signature OUTPUTNEW cve,bugtraq,cert,msft,mskb,xref | `makemv(cve)` | `makemv(bugtraq)` | `makemv(cert)` | `makemv(msft)` | `makemv(mskb)` | `makemv(xref)` | fillnull value="" cve,bugtraq,cert,msft,mskb,xref

[vuln_signature_reference]
definition = inputlookup append=T vuln_signature_reference


###########
## WHOIS
###########
[whois]
definition = index=whois sourcetype=Whois:* | fillnull value=unknown created,domain,expires,nameservers,registrant,registrar,resolved_domain,retrieved,updated

