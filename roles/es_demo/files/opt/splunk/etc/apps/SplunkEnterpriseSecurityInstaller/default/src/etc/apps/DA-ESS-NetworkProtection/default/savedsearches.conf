
#####################
## Global
#####################

[Network - Unroutable Host Activity - Rule]
action.email.sendresults      = 0
action.risk                   = 1
action.risk._risk_object      = src
action.risk._risk_object_type = system
action.risk._risk_score       = 80
action.summary_index          = 1
action.summary_index._name    = notable
action.summary_index.ttl      = 1p
alert.digest_mode             = 1
alert.suppress                = 1
alert.suppress.fields         = sourcetype,src,dest
alert.suppress.period         = 86300
alert.track                   = false
cron_schedule                 = 40 * * * *
disabled                      = True
dispatch.earliest_time        = -65m@m
dispatch.latest_time          = -5m@m
enableSched                   = 1
is_visible                    = false
search                        = | `src_dest_tracker("allowed")` | `bogonlist_lookup` | search (dest_is_bogon=true dest_is_internal!=true) OR (src_is_bogon=true src_is_internal!=true) | eval bogon_ip=if(dest_is_bogon=="true" AND dest_is_internal!="true",dest,bogon_ip) | eval bogon_ip=if(src_is_bogon=="true" AND src_is_internal!="true",src,bogon_ip) | fields + sourcetype,src,dest,bogon_ip

[Network - High Volume of Traffic from High or Critical Host - Rule]
action.email.sendresults      = 0
action.risk                   = 1
action.risk._risk_object      = src
action.risk._risk_object_type = system
action.risk._risk_score       = 80
action.summary_index          = 1
action.summary_index._name    = notable
action.summary_index.ttl      = 1p
alert.digest_mode             = 1
alert.suppress                = 1
alert.suppress.fields         = dest,src
alert.suppress.period         = 86300
alert.track                   = false
cron_schedule                 = 5,20,35,50 * * * *
disabled                      = True
dispatch.earliest_time        = -65m@m
dispatch.latest_time          = -5m@m
enableSched                   = 1
is_visible                    = false
search                        = | tstats allow_old_summaries=true sum(Web.bytes_out) as "bytes_out" from datamodel=Web where   nodename=Web "Web.bytes_out">0 AND ("Web.src_priority"="high" OR "Web.src_priority"="critical") by "Web.src","Web.dest" | rename "Web.src" as "src","Web.dest" as "dest" | where 'bytes_out'>10485760

[Network - Unusual Volume of Network Activity - Rule]
action.email.sendresults   = 0
action.summary_index       = 1
action.summary_index._name = notable
action.summary_index.ttl   = 1p
alert.digest_mode          = 1
alert.suppress             = 1
alert.suppress.fields      = const_dedup_id
alert.suppress.period      = 14300
alert.track                = false
cron_schedule              = */30 * * * *
disabled                   = True
dispatch.earliest_time     = -35m@m
dispatch.latest_time       = -5m@m
enableSched                = 1
is_visible                 = false
search                     = | datamodel Network_Traffic All_Traffic search | stats dc(All_Traffic.src) as "src_count","count" | eval temp="foo" | join [| inputlookup traffic_volume_tracker | eventstats stdev(src_count) as src_count_stdev avg(src_count) as src_count_avg, count as history_count | eventstats stdev(count) as count_stdev avg(count) as count_avg | fields src_count_stdev,count_stdev,src_count_avg,count_avg,history_count | eval temp="foo"] | eval count_limit=count_avg+3.5*count_stdev | eval src_count_avg=round(src_count_avg, 2) | eval count_avg=round(count_avg, 2) | eval count_limit_exceeded=if(count>count_limit, "true", "false") | eval src_count_limit=src_count_avg+3.5*src_count_stdev | eval src_count_limit_exceeded=if(src_count>src_count_limit, "true", "false") | search (src_count_limit_exceeded="true" OR count_limit_exceeded="true") AND history_count>720 | eval const_dedup_id="Network - Unusual Volume of Network Activity - Rule"


#####################
## Traffic
#####################

###### Correlation Searches ######

## Substantial Increase in Port Activity Breakdown
## 1   - get counts per day by dest_port
## 2   - field renaming
## 3   - get timediff
## 4-5 - determine if count is historical or current
## 6   - compute count,stdev,avg per dest_port
## 7   - expose events greater than 3 stdev from avg
[Network - Substantial Increase in Port Activity (By Destination) - Rule]
action.email.sendresults      = 0
action.risk                   = 1
action.risk._risk_object      = dest_port
action.risk._risk_object_type = other
action.risk._risk_score       = 80
action.summary_index          = 1
action.summary_index._name    = notable
action.summary_index.ttl      = 1p
alert.digest_mode             = 1
alert.suppress                = 1
alert.suppress.fields         = dest_port
alert.suppress.period         = 86300
alert.track                   = false
cron_schedule                 = 15 * * * *
disabled                      = True
dispatch.earliest_time        = -30d@d
dispatch.latest_time          = now
enableSched                   = 1
is_visible                    = false
search                        = | tstats `summariesonly` count from datamodel=Network_Traffic by _time,All_Traffic.dest_port span=1d | `drop_dm_object_name("All_Traffic")` | `timeDiff` | eval historical_count=if(timeDiff>86400,count,null()) | eval current_count=if(timeDiff<=86400,count,null()) | stats sum(current_count) as count,stdev(historical_count) as stdev,avg(historical_count) as avg by dest_port | where count>((3*stdev)+avg)

[Network - Unapproved Port Activity Detected - Rule]
action.email.sendresults      = 0
action.risk                   = 1
action.risk._risk_object      = dest_port
action.risk._risk_object_type = other
action.risk._risk_score       = 40
action.summary_index          = 1
action.summary_index._name    = notable
action.summary_index.ttl      = 1p
alert.digest_mode             = 1
alert.suppress                = 1
alert.suppress.fields         = dvc,transport,dest_port
alert.suppress.period         = 86300
alert.track                   = false
cron_schedule                 = */5 * * * *
disabled                      = True
dispatch.earliest_time        = rt-5m@m
dispatch.latest_time          = rt+5m@m
dispatch.rt_backfill          = 1
enableSched                   = 1
is_visible                    = false
search                        = | datamodel Network_Traffic Allowed_Traffic search | `drop_dm_object_name("All_Traffic")` | `is_traffic_prohibited(dest_port)` | search dest_port>0 NOT is_prohibited=false | stats count by dvc,transport,dest_port,is_prohibited | `get_asset(dvc)` | `get_identity4events(dvc_owner)` | `map_notable_fields`

###### Generating Searches ######
[Network - Traffic Bytes Tracker - Lookup Gen]
action.email.sendresults = 0
cron_schedule            = 30 0,4,8,12,16,20 * * *
dispatch.earliest_time   = -90d
dispatch.latest_time     = +0s
enableSched              = 1
is_visible               = false
search                   = | tstats `summariesonly` min(All_Traffic.bytes) as min_bytes,avg(All_Traffic.bytes) as mean_bytes,max(All_Traffic.bytes) as max_bytes,stdev(All_Traffic.bytes) as stdev,count as total_count from datamodel=Network_Traffic where All_Traffic.bytes!=0 | appendcols [| inputlookup standard_deviations | rename stdev as standard_deviation] | filldown | fillnull value=0 min_bytes,mean_bytes,max_bytes,stdev,total_count | `stdev_desired_result(standard_deviation,mean_bytes,"gt_bytes")` | `stdev_desired_result(-standard_deviation,mean_bytes,"lt_bytes")` | eval search=case(gt_bytes>0 AND lt_bytes>0, "(All_Traffic.bytes>".floor(gt_bytes)." OR All_Traffic.bytes<".ceil(lt_bytes).")",gt_bytes>0 AND lt_bytes<=0,"All_Traffic.bytes>".floor(gt_bytes),gt_bytes<=0 AND lt_bytes>0,"All_Traffic.bytes<".ceil(lt_bytes),gt_bytes<=0 AND lt_bytes<=0,"All_Traffic.bytes=-1") | rename standard_deviation as Z | rename total as total_count | fields min_bytes,mean_bytes,max_bytes,stdev,total_count,Z,search | `round(mean_bytes)` | `round(stdev)` | outputlookup traffic_bytes_tracker | stats count

###### Key Indicator Searches ######

## Traffic Size Analysis
[Traffic - Threat List Communication]
action.email.reportServerEnabled              = 0
alert.track                                   = 0
action.keyindicator                           = 1
action.keyindicator.title                     = Threat List Activity
action.keyindicator.subtitle                  = Unique Systems
action.keyindicator.value                     = current_count
action.keyindicator.threshold                 = 
action.keyindicator.delta                     = delta
action.keyindicator.invert                    = false
action.keyindicator.group.0.name              = traffic_center
action.keyindicator.group.0.order             = 0
dispatch.latest_time                          = now
display.general.enablePreview                 = 1
display.general.timeRangePicker.show          = false
display.general.type                          = visualizations
display.statistics.rowNumbers                 = 0
display.statistics.wrap                       = 0
display.visualizations.charting.drilldown     = all
display.visualizations.singlevalue.underLabel = Threat List Activity (Unique System Count)
display.visualizations.show                   = 1
display.visualizations.type                   = singlevalue
search                                        = | tstats `summariesonly` count from datamodel=Network_Traffic where earliest=-24h@h latest=+0s by All_Traffic.src,All_Traffic.dest | `drop_dm_object_name("All_Traffic")` | `threatlist_lookup(src)` | `threatlist_lookup(dest)` | search src_threatlist_name="*" OR dest_threatlist_name="*" | stats count as current_count | appendcols [| tstats `summariesonly` count from datamodel=Network_Traffic where earliest=-24h@h latest=+0s by All_Traffic.src,All_Traffic.dest | `drop_dm_object_name("All_Traffic")` | `threatlist_lookup(src)` | `threatlist_lookup(dest)` | search src_threatlist_name="*" OR dest_threatlist_name="*" | stats count as historical_count] | `get_delta`

[Traffic - Maximum Bytes]
action.email.reportServerEnabled              = 0
alert.track                                   = 0
action.keyindicator                           = 1
action.keyindicator.title                     = Maximum Bytes
action.keyindicator.subtitle                  = Bytes
action.keyindicator.value                     = current_max
action.keyindicator.threshold                 = 
action.keyindicator.delta                     = delta
action.keyindicator.invert                    = false
action.keyindicator.group.0.name              = traffic_size
action.keyindicator.group.0.order             = 2
dispatch.latest_time                          = now
display.general.enablePreview                 = 1
display.general.timeRangePicker.show          = false
display.general.type                          = visualizations
display.statistics.rowNumbers                 = 0
display.statistics.wrap                       = 0
display.visualizations.charting.drilldown     = all
display.visualizations.singlevalue.underLabel = Maximum Bytes
display.visualizations.show                   = 1
display.visualizations.type                   = singlevalue
search                                        = | tstats `summariesonly` max(All_Traffic.bytes) as current_max from datamodel=Network_Traffic where earliest=-24h@h latest=+0s All_Traffic.bytes>0 | appendcols [| tstats `summariesonly` max(All_Traffic.bytes) as historical_max from datamodel=Network_Traffic where earliest=-48h@h latest=-24h@h All_Traffic.bytes>0] | `get_delta(current_max,historical_max)`

[Traffic - Mean Bytes]
action.email.reportServerEnabled              = 0
alert.track                                   = 0
action.keyindicator                           = 1
action.keyindicator.title                     = Mean Bytes
action.keyindicator.subtitle                  = Bytes
action.keyindicator.value                     = current_mean
action.keyindicator.threshold                 = 
action.keyindicator.delta                     = delta
action.keyindicator.invert                    = false
action.keyindicator.group.0.name              = traffic_size
action.keyindicator.group.0.order             = 1
action.keyindicator.group.1.name              = traffic_center
action.keyindicator.group.1.order             = 1
dispatch.latest_time                          = now
display.general.enablePreview                 = 1
display.general.timeRangePicker.show          = false
display.general.type                          = visualizations
display.statistics.rowNumbers                 = 0
display.statistics.wrap                       = 0
display.visualizations.charting.drilldown     = all
display.visualizations.singlevalue.underLabel = Mean Bytes
display.visualizations.show                   = 1
display.visualizations.type                   = singlevalue
search                                        = | tstats `summariesonly` avg(All_Traffic.bytes) as current_mean from datamodel=Network_Traffic where earliest=-24h@h latest=+0s All_Traffic.bytes>0 | appendcols [| tstats `summariesonly` avg(All_Traffic.bytes) as historical_mean from datamodel=Network_Traffic where earliest=-48h@h latest=-24h@h All_Traffic.bytes>0] | `get_delta(current_mean,historical_mean)`

[Traffic - Minimum Bytes]
action.email.reportServerEnabled              = 0
alert.track                                   = 0
action.keyindicator                           = 1
action.keyindicator.title                     = Minimum Bytes
action.keyindicator.subtitle                  = Bytes
action.keyindicator.value                     = current_min
action.keyindicator.threshold                 = 
action.keyindicator.delta                     = delta
action.keyindicator.invert                    = false
action.keyindicator.group.0.name              = traffic_size
action.keyindicator.group.0.order             = 0
dispatch.latest_time                          = now
display.general.enablePreview                 = 1
display.general.timeRangePicker.show          = false
display.general.type                          = visualizations
display.statistics.rowNumbers                 = 0
display.statistics.wrap                       = 0
display.visualizations.charting.drilldown     = all
display.visualizations.singlevalue.underLabel = Minimum Bytes
display.visualizations.show                   = 1
display.visualizations.type                   = singlevalue
search                                        = | tstats `summariesonly` min(All_Traffic.bytes) as current_min from datamodel=Network_Traffic where earliest=-24h@h latest=+0s All_Traffic.bytes>0 | appendcols [| tstats `summariesonly` min(All_Traffic.bytes) as historical_min from datamodel=Network_Traffic where earliest=-48h@h latest=-24h@h All_Traffic.bytes>0] | `get_delta(current_min,historical_min)`

[Traffic - Standard Deviation Bytes]
action.email.reportServerEnabled              = 0
alert.track                                   = 0
action.keyindicator                           = 1
action.keyindicator.title                     = Stdev Bytes
action.keyindicator.subtitle                  = Bytes
action.keyindicator.value                     = current_stdev
action.keyindicator.threshold                 = 
action.keyindicator.delta                     = delta
action.keyindicator.invert                    = false
action.keyindicator.group.0.name              = traffic_size
action.keyindicator.group.0.order             = 3
dispatch.latest_time                          = now
display.general.enablePreview                 = 1
display.general.timeRangePicker.show          = false
display.general.type                          = visualizations
display.statistics.rowNumbers                 = 0
display.statistics.wrap                       = 0
display.visualizations.charting.drilldown     = all
display.visualizations.singlevalue.underLabel = Standard Deviation Bytes
display.visualizations.show                   = 1
display.visualizations.type                   = singlevalue
search                                        = | tstats `summariesonly` stdev(All_Traffic.bytes) as current_stdev from datamodel=Network_Traffic where earliest=-24h@h latest=+0s All_Traffic.bytes>0 | appendcols [| tstats `summariesonly` stdev(All_Traffic.bytes) as historical_stdev from datamodel=Network_Traffic where earliest=-48h@h latest=-24h@h All_Traffic.bytes>0] | `get_delta(current_stdev,historical_stdev)`

[Traffic - Total Count]
action.email.reportServerEnabled              = 0
alert.track                                   = 0
action.keyindicator                           = 1
action.keyindicator.title                     = Total Count
action.keyindicator.subtitle                  = Count
action.keyindicator.value                     = current_count
action.keyindicator.threshold                 = 
action.keyindicator.delta                     = delta
action.keyindicator.invert                    = false
action.keyindicator.group.0.name              = traffic_size
action.keyindicator.group.0.order             = 4
action.keyindicator.group.1.name              = traffic_center
action.keyindicator.group.1.order             = 4
dispatch.latest_time                          = now
display.general.enablePreview                 = 1
display.general.timeRangePicker.show          = false
display.general.type                          = visualizations
display.statistics.rowNumbers                 = 0
display.statistics.wrap                       = 0
display.visualizations.charting.drilldown     = all
display.visualizations.singlevalue.underLabel = Traffic Count
display.visualizations.show                   = 1
display.visualizations.type                   = singlevalue
search                                        = | tstats `summariesonly` count as current_count from datamodel=Network_Traffic where earliest=-24h@h latest=+0s | appendcols [| tstats `summariesonly` count as historical_count from datamodel=Network_Traffic where earliest=-48h@h latest=-24h@h] | `get_delta`

[Traffic - Unique Sources]
action.email.reportServerEnabled              = 0
alert.track                                   = 0
action.keyindicator                           = 1
action.keyindicator.title                     = Traffic Sources
action.keyindicator.subtitle                  = Unique Count
action.keyindicator.value                     = current_count
action.keyindicator.threshold                 = 
action.keyindicator.delta                     = delta
action.keyindicator.invert                    = false
action.keyindicator.group.0.name              = traffic_center
action.keyindicator.group.0.order             = 2
dispatch.latest_time                          = now
display.general.enablePreview                 = 1
display.general.timeRangePicker.show          = false
display.general.type                          = visualizations
display.statistics.rowNumbers                 = 0
display.statistics.wrap                       = 0
display.visualizations.charting.drilldown     = all
display.visualizations.singlevalue.underLabel = Unique Traffic Sources
display.visualizations.show                   = 1
display.visualizations.type                   = singlevalue
search                                        = | tstats `summariesonly` estdc(All_Traffic.src) as current_count from datamodel=Network_Traffic where earliest=-24h@h latest=+0s | appendcols [| tstats `summariesonly` estdc(All_Traffic.src) as historical_count from datamodel=Network_Traffic where earliest=-48h@h latest=-24h@h] | `get_delta`

[Traffic - Unique Destinations]
action.email.reportServerEnabled              = 0
alert.track                                   = 0
action.keyindicator                           = 1
action.keyindicator.title                     = Traffic Destinations
action.keyindicator.subtitle                  = Unique Count
action.keyindicator.value                     = current_count
action.keyindicator.threshold                 = 
action.keyindicator.delta                     = delta
action.keyindicator.invert                    = false
action.keyindicator.group.0.name              = traffic_center
action.keyindicator.group.0.order             = 3
dispatch.latest_time                          = now
display.general.enablePreview                 = 1
display.general.timeRangePicker.show          = false
display.general.type                          = visualizations
display.statistics.rowNumbers                 = 0
display.statistics.wrap                       = 0
display.visualizations.charting.drilldown     = all
display.visualizations.singlevalue.underLabel = Unique Traffic Destinations
display.visualizations.show                   = 1
display.visualizations.type                   = singlevalue
search                                        = | tstats `summariesonly` estdc(All_Traffic.dest) as current_count from datamodel=Network_Traffic where earliest=-24h@h latest=+0s | appendcols [| tstats `summariesonly` estdc(All_Traffic.dest) as historical_count from datamodel=Network_Traffic where earliest=-48h@h latest=-24h@h] | `get_delta`


###### Report Searches ######
[Traffic - New Port Activity]
action.email.reportServerEnabled     = 0
alert.track                          = 0
dispatch.latest_time                 = now
display.general.enablePreview        = 1
display.general.timeRangePicker.show = false
display.general.type                 = statistics
display.statistics.drilldown         = row
display.statistics.rowNumbers        = 0
display.statistics.wrap              = 0
display.visualizations.show          = 0
search                               = | `port_protocol_tracker` | `dayDiff(firstTime)` | search dayDiff<7 | `uitime(firstTime)` | `uitime(lastTime)` | fields firstTime,lastTime,transport,dest_port,app

[Traffic - Prohibited Or Insecure Traffic Over Time]
action.email.reportServerEnabled                    = 0
alert.track                                         = 0
dispatch.earliest_time                              = -24h@h
dispatch.latest_time                                = now
display.general.enablePreview                       = 1
display.general.type                                = visualizations
display.statistics.rowNumbers                       = 0
display.statistics.wrap                             = 0
display.visualizations.charting.chart               = line
display.visualizations.charting.chart.nullValueMode = zero
display.visualizations.charting.drilldown           = all
display.visualizations.show                         = 1
display.visualizations.type                         = charting
search                                              = | tstats `summariesonly` values(All_Traffic.src_category) as src_category,values(All_Traffic.dest_category) as dest_category,count from datamodel=Network_Traffic by _time,All_Traffic.src,All_Traffic.dest,All_Traffic.transport,All_Traffic.dest_port span=10m | `drop_dm_object_name("All_Traffic")` | `is_traffic_prohibited(dest_port)` | search (is_prohibited!="false" OR is_secure!="unknown") | `get_transport_dest_port` | timechart minspan=10m sum(count) as count by transport_dest_port

[Traffic - Prohibited Traffic Details]
action.email.reportServerEnabled     = 0
alert.track                          = 0
dispatch.earliest_time               = -24h@h
dispatch.latest_time                 = now
display.general.enablePreview        = 1
display.general.type                 = statistics
display.statistics.drilldown         = row
display.statistics.rowNumbers        = 0
display.statistics.wrap              = 0
display.visualizations.show          = 0
search                               = | tstats `summariesonly` max(_time) as _time,values(All_Traffic.src_category) as src_category,values(All_Traffic.dest_category) as dest_category,count from datamodel=Network_Traffic by All_Traffic.src,All_Traffic.dest,All_Traffic.transport,All_Traffic.dest_port | `drop_dm_object_name("All_Traffic")` | `is_traffic_prohibited(dest_port)` | search (is_prohibited!="false" OR is_secure!="unknown") | fields _time,src,src_category,dest,dest_category,transport,dest_port,is_prohibited,is_secure

[Traffic - Scan Activity By Destination Ports]
action.email.reportServerEnabled                = 0
alert.track                                     = 0
dispatch.earliest_time                          = -24h@h
dispatch.latest_time                            = now
display.general.enablePreview                   = 1
display.general.type                            = visualizations
display.statistics.rowNumbers                   = 0
display.statistics.wrap                         = 0
display.visualizations.charting.axisTitleY.text = count
display.visualizations.charting.chart           = bar
display.visualizations.charting.drilldown       = all
display.visualizations.chartHeight              = 350
display.visualizations.show                     = 1
search                                          = | tstats `summariesonly` dc(All_Traffic.dest_port) as dest_port_count from datamodel=Network_Traffic by All_Traffic.src | `drop_dm_object_name("All_Traffic")` | sort 10 - dest_port_count

[Traffic - Scan Activity By Destinations]
action.email.reportServerEnabled                = 0
alert.track                                     = 0
dispatch.earliest_time                          = -24h@h
dispatch.latest_time                            = now
display.general.enablePreview                   = 1
display.general.type                            = visualizations
display.statistics.rowNumbers                   = 0
display.statistics.wrap                         = 0
display.visualizations.charting.axisTitleY.text = count
display.visualizations.charting.chart           = bar
display.visualizations.charting.drilldown       = all
display.visualizations.chartHeight              = 350
display.visualizations.show                     = 1
search                                          = | tstats `summariesonly` dc(All_Traffic.dest) as dest_count from datamodel=Network_Traffic by All_Traffic.src | `drop_dm_object_name("All_Traffic")` | sort 10 - dest_count

[Traffic - Top Traffic By Destination]
action.email.reportServerEnabled     = 0
alert.track                          = 0
dispatch.earliest_time               = -24h@h
dispatch.latest_time                 = now
display.general.enablePreview        = 1
display.general.type                 = statistics
display.statistics.drilldown         = row
display.statistics.rowNumbers        = 0
display.statistics.wrap              = 0
display.visualizations.show          = 0
search                               = | tstats `summariesonly` count from datamodel=Network_Traffic by _time,All_Traffic.dest span=10m | `drop_dm_object_name("All_Traffic")` | stats sparkline,count by dest | sort 100 - count

[Traffic - Top Traffic By Destination Port]
action.email.reportServerEnabled                = 0
alert.track                                     = 0
dispatch.earliest_time                          = -24h@h
dispatch.latest_time                            = now
display.general.enablePreview                   = 1
display.general.type                            = visualizations
display.statistics.rowNumbers                   = 0
display.statistics.wrap                         = 0
display.visualizations.charting.axisTitleY.text = count
display.visualizations.charting.chart           = bar
display.visualizations.charting.chart.stackMode = stacked
display.visualizations.charting.drilldown       = all
display.visualizations.chartHeight              = 350
display.visualizations.show                     = 1
search                                          = | `tstats` count from datamodel=Network_Traffic by All_Traffic.action,All_Traffic.dest_port | chart count over All_Traffic.dest_port by All_Traffic.action | `drop_dm_object_name("All_Traffic")` | `sort_chart`

[Traffic - Top Traffic By Device]
action.email.reportServerEnabled                = 0
alert.track                                     = 0
dispatch.earliest_time                          = -24h@h
dispatch.latest_time                            = now
display.general.enablePreview                   = 1
display.general.type                            = visualizations
display.statistics.rowNumbers                   = 0
display.statistics.wrap                         = 0
display.visualizations.charting.axisTitleY.text = count
display.visualizations.charting.chart           = bar
display.visualizations.charting.chart.stackMode = stacked
display.visualizations.charting.drilldown       = all
display.visualizations.chartHeight              = 350
display.visualizations.show                     = 1
search                                          = | `tstats` count from datamodel=Network_Traffic by All_Traffic.action,All_Traffic.dvc | chart count over All_Traffic.dvc by All_Traffic.action | `drop_dm_object_name("All_Traffic")` | `sort_chart`

[Traffic - Top Traffic By Source]
action.email.reportServerEnabled     = 0
alert.track                          = 0
dispatch.earliest_time               = -24h@h
dispatch.latest_time                 = now
display.general.enablePreview        = 1
display.general.type                 = statistics
display.statistics.drilldown         = row
display.statistics.rowNumbers        = 0
display.statistics.wrap              = 0
display.visualizations.show          = 0
search                               = | tstats `summariesonly` count from datamodel=Network_Traffic by _time,All_Traffic.src span=10m | `drop_dm_object_name("All_Traffic")` | stats sparkline,count by src | sort 100 - count

[Traffic - Top Traffic By Source Port]
action.email.reportServerEnabled                = 0
alert.track                                     = 0
dispatch.earliest_time                          = -24h@h
dispatch.latest_time                            = now
display.general.enablePreview                   = 1
display.general.type                            = visualizations
display.statistics.rowNumbers                   = 0
display.statistics.wrap                         = 0
display.visualizations.charting.axisTitleY.text = count
display.visualizations.charting.chart           = bar
display.visualizations.charting.chart.stackMode = stacked
display.visualizations.charting.drilldown       = all
display.visualizations.chartHeight              = 350
display.visualizations.show                     = 1
search                                          = | `tstats` count from datamodel=Network_Traffic by All_Traffic.action,All_Traffic.src_port | chart count over All_Traffic.src_port by All_Traffic.action | `drop_dm_object_name("All_Traffic")` | `sort_chart`

[Traffic - Top Traffic By Transport]
action.email.reportServerEnabled                = 0
alert.track                                     = 0
dispatch.earliest_time                          = -24h@h
dispatch.latest_time                            = now
display.general.enablePreview                   = 1
display.general.type                            = visualizations
display.statistics.rowNumbers                   = 0
display.statistics.wrap                         = 0
display.visualizations.charting.axisTitleY.text = count
display.visualizations.charting.chart           = bar
display.visualizations.charting.chart.stackMode = stacked
display.visualizations.charting.drilldown       = all
display.visualizations.chartHeight              = 350
display.visualizations.show                     = 1
search                                          = | `tstats` count from datamodel=Network_Traffic by All_Traffic.action,All_Traffic.transport | chart count over All_Traffic.transport by All_Traffic.action | `drop_dm_object_name("All_Traffic")` | `sort_chart`

[Traffic - Traffic Over Time]
action.email.reportServerEnabled                    = 0
alert.track                                         = 0
dispatch.earliest_time                              = -24h@h
dispatch.latest_time                                = now
display.general.enablePreview                       = 1
display.general.type                                = visualizations
display.statistics.rowNumbers                       = 0
display.statistics.wrap                             = 0
display.visualizations.charting.chart               = line
display.visualizations.charting.chart.nullValueMode = zero
display.visualizations.charting.drilldown           = all
display.visualizations.show                         = 1
display.visualizations.type                         = charting
search                                              = | `tstats` count from datamodel=Network_Traffic by _time span=10m | timechart minspan=10m count

[Traffic - Traffic Over Time By Action]
action.email.reportServerEnabled                    = 0
alert.track                                         = 0
dispatch.earliest_time                              = -24h@h
dispatch.latest_time                                = now
display.general.enablePreview                       = 1
display.general.type                                = visualizations
display.statistics.rowNumbers                       = 0
display.statistics.wrap                             = 0
display.visualizations.charting.chart               = line
display.visualizations.charting.chart.nullValueMode = zero
display.visualizations.charting.drilldown           = all
display.visualizations.show                         = 1
display.visualizations.type                         = charting
search                                              = | `tstats` count from datamodel=Network_Traffic by _time,All_Traffic.action span=10m | timechart minspan=10m count by All_Traffic.action | `drop_dm_object_name("All_Traffic")`

[Traffic - Traffic Over Time By Bytes]
action.email.reportServerEnabled                    = 0
alert.track                                         = 0
dispatch.earliest_time                              = -7d@d
dispatch.latest_time                                = now
display.general.enablePreview                       = 1
display.general.type                                = visualizations
display.statistics.rowNumbers                       = 0
display.statistics.wrap                             = 0
display.visualizations.charting.chart               = line
display.visualizations.charting.chart.nullValueMode = zero
display.visualizations.charting.drilldown           = all
display.visualizations.show                         = 1
display.visualizations.type                         = charting
search                                              = | `tstats` min(All_Traffic.bytes),avg(All_Traffic.bytes),max(All_Traffic.bytes) from datamodel=Network_Traffic where All_Traffic.bytes>0 by _time span=10m  | timechart minspan=10m min(All_Traffic.bytes) as min(bytes),avg(All_Traffic.bytes) as avg(bytes),max(All_Traffic.bytes) as max(bytes)

[Traffic - Traffic Over Time By Destination]
action.email.reportServerEnabled                    = 0
alert.track                                         = 0
dispatch.earliest_time                              = -24h@h
dispatch.latest_time                                = now
display.general.enablePreview                       = 1
display.general.type                                = visualizations
display.statistics.rowNumbers                       = 0
display.statistics.wrap                             = 0
display.visualizations.charting.chart               = line
display.visualizations.charting.chart.nullValueMode = zero
display.visualizations.charting.drilldown           = all
display.visualizations.show                         = 1
display.visualizations.type                         = charting
search                                              = | `tstats` count from datamodel=Network_Traffic by _time,All_Traffic.dest span=10m | timechart minspan=10m useother=`useother` count by All_Traffic.dest | `drop_dm_object_name("All_Traffic")`

[Traffic - Traffic Over Time By Destination Port]
action.email.reportServerEnabled                    = 0
alert.track                                         = 0
dispatch.earliest_time                              = -24h@h
dispatch.latest_time                                = now
display.general.enablePreview                       = 1
display.general.type                                = visualizations
display.statistics.rowNumbers                       = 0
display.statistics.wrap                             = 0
display.visualizations.charting.chart               = line
display.visualizations.charting.chart.nullValueMode = zero
display.visualizations.charting.drilldown           = all
display.visualizations.show                         = 1
display.visualizations.type                         = charting
search                                              = | `tstats` count from datamodel=Network_Traffic by _time,All_Traffic.dest_port span=10m | timechart minspan=10m useother=`useother` count by All_Traffic.dest_port | `drop_dm_object_name("All_Traffic")`

[Traffic - Traffic Over Time By Device]
action.email.reportServerEnabled                    = 0
alert.track                                         = 0
dispatch.earliest_time                              = -24h@h
dispatch.latest_time                                = now
display.general.enablePreview                       = 1
display.general.type                                = visualizations
display.statistics.rowNumbers                       = 0
display.statistics.wrap                             = 0
display.visualizations.charting.chart               = line
display.visualizations.charting.chart.nullValueMode = zero
display.visualizations.charting.drilldown           = all
display.visualizations.show                         = 1
display.visualizations.type                         = charting
search                                              = | `tstats` count from datamodel=Network_Traffic by _time,All_Traffic.dvc span=10m | timechart minspan=10m useother=`useother` count by All_Traffic.dvc | `drop_dm_object_name("All_Traffic")`

[Traffic - Traffic Over Time By Source]
action.email.reportServerEnabled                    = 0
alert.track                                         = 0
dispatch.earliest_time                              = -24h@h
dispatch.latest_time                                = now
display.general.enablePreview                       = 1
display.general.type                                = visualizations
display.statistics.rowNumbers                       = 0
display.statistics.wrap                             = 0
display.visualizations.charting.chart               = line
display.visualizations.charting.chart.nullValueMode = zero
display.visualizations.charting.drilldown           = all
display.visualizations.show                         = 1
display.visualizations.type                         = charting
search                                              = | `tstats` count from datamodel=Network_Traffic by _time,All_Traffic.src span=10m | timechart minspan=10m useother=`useother` count by All_Traffic.src | `drop_dm_object_name("All_Traffic")`

[Traffic - Traffic Over Time By Source Port]
action.email.reportServerEnabled                    = 0
alert.track                                         = 0
dispatch.earliest_time                              = -24h@h
dispatch.latest_time                                = now
display.general.enablePreview                       = 1
display.general.type                                = visualizations
display.statistics.rowNumbers                       = 0
display.statistics.wrap                             = 0
display.visualizations.charting.chart               = line
display.visualizations.charting.chart.nullValueMode = zero
display.visualizations.charting.drilldown           = all
display.visualizations.show                         = 1
display.visualizations.type                         = charting
search                                              = | `tstats` count from datamodel=Network_Traffic by _time,All_Traffic.src_port span=10m | timechart minspan=10m useother=`useother` count by All_Traffic.src_port | `drop_dm_object_name("All_Traffic")`

[Traffic - Traffic Over Time By Transport Protocol]
action.email.reportServerEnabled                    = 0
alert.track                                         = 0
dispatch.earliest_time                              = -24h@h
dispatch.latest_time                                = now
display.general.enablePreview                       = 1
display.general.type                                = visualizations
display.statistics.rowNumbers                       = 0
display.statistics.wrap                             = 0
display.visualizations.charting.chart               = line
display.visualizations.charting.chart.nullValueMode = zero
display.visualizations.charting.drilldown           = all
display.visualizations.show                         = 1
display.visualizations.type                         = charting
search                                              = | `tstats` count from datamodel=Network_Traffic by _time,All_Traffic.transport span=10m | timechart minspan=10m useother=`useother` count by All_Traffic.transport | `drop_dm_object_name("All_Traffic")`

## Traffic Size Analysis

[Traffic - Traffic Size Anomalies Over Time]
action.email.reportServerEnabled                    = 0
alert.track                                         = 0
dispatch.earliest_time                              = -7d@d
dispatch.latest_time                                = now
display.general.enablePreview                       = 1
display.general.type                                = visualizations
display.statistics.rowNumbers                       = 0
display.statistics.wrap                             = 0
display.visualizations.charting.chart               = line
display.visualizations.charting.chart.nullValueMode = zero
display.visualizations.charting.drilldown           = all
display.visualizations.show                         = 1
display.visualizations.type                         = charting
search                                              = | tstats `summariesonly` count from datamodel=Network_Traffic where [| inputlookup append=T traffic_bytes_tracker | search Z=2 | fields search] by _time,All_Traffic.src,All_Traffic.transport span=10m | `drop_dm_object_name("All_Traffic")` | `per_panel_filter("ppf_traffic_size","src")` | timechart minspan=10m sum(count) by All_Traffic

[Traffic - Traffic Size Anomalies]
action.email.reportServerEnabled = 0
alert.track                      = 0
dispatch.earliest_time           = -24h@h
dispatch.latest_time             = now
display.general.enablePreview    = 1
display.general.type             = statistics
display.statistics.drilldown     = row
display.statistics.rowNumbers    = 0
display.statistics.wrap          = 0
display.visualizations.show      = 0
search                           = | tstats `summariesonly` max(_time) as lastTime,min(All_Traffic.bytes) as min_bytes,avg(All_Traffic.bytes) as mean_bytes,max(All_Traffic.bytes) as max_bytes,dc(All_Traffic.dest) as dc(dest),count from datamodel=Network_Traffic where [| inputlookup append=T traffic_bytes_tracker | search Z=2 | fields search] by All_Traffic.src | `drop_dm_object_name("All_Traffic")` | appendcols [inputlookup append=T start=0 max=1 traffic_bytes_tracker | rename mean_bytes as tracker_mean | fields tracker_mean,stdev] | filldown tracker_mean,stdev | eval Z=round(((mean_bytes-tracker_mean)/stdev),2) | `per_panel_filter("ppf_traffic_size","src")` | rename ppf_filter as filter | eval bytes=if(min_bytes==mean_bytes AND mean_bytes==max_bytes,floor(min_bytes),"min: ".floor(min_bytes)."|avg: ".floor(mean_bytes)."|max: ".floor(max_bytes)) | `makemv(bytes)` | sort - filter,Z | `uitime(lastTime)` | table src,filter,bytes,dc(dest),count,Z,lastTime

###### Swim Lane Searches ######
[Traffic - Threat List Activity By Asset - Swimlane]
action.email.reportServerEnabled                  = 0
action.swimlane                                   = 1
action.swimlane.title                             = Threat List Activity
action.swimlane.color                             = orange
action.swimlane.constraint_method                 = reverse_asset_lookup
action.swimlane.constraint_fields                 = All_Traffic.src,All_Traffic.dest
action.swimlane.drilldown_search                  = | `datamodel("Network_Traffic","All_Traffic")` | search $constraints$
alert.track                                       = 0
dispatch.latest_time                              = now
display.page.asset_investigator.0.collection_name = Default
display.page.asset_investigator.0.order           = 2
is_visible                                        = false
search                                            = | tstats `summariesonly` count from datamodel=Network_Traffic where $constraints$ by _time,All_Traffic.src,All_Traffic.dest span=$span$ | `drop_dm_object_name("All_Traffic")`  | `threatlist_lookup(src)` | `threatlist_lookup(dest)` | search src_threatlist_name="*" OR dest_threatlist_name="*" | stats values(src) as src,values(src_threatlist_name) as src_threatlist,values(dest) as dest,values(dest_threatlist_name) as dest_threatlist,sum(count) as count by _time

[Traffic - Threat List Activity By Identity - Swimlane]
action.email.reportServerEnabled                     = 0
action.swimlane                                      = 1
action.swimlane.title                                = Threat List Activity
action.swimlane.color                                = orange
action.swimlane.constraint_method                    = reverse_identity_lookup
action.swimlane.constraint_fields                    = All_Traffic.user
action.swimlane.drilldown_search                     = | `datamodel("Network_Traffic","All_Traffic")` | search $constraints$
alert.track                                          = 0
dispatch.latest_time                                 = now
display.page.identity_investigator.0.collection_name = Default
display.page.identity_investigator.0.order           = 2
is_visible                                           = false
search                                               = | tstats `summariesonly` count from datamodel=Network_Traffic where $constraints$ by _time,All_Traffic.src,All_Traffic.dest span=$span$ | `drop_dm_object_name("All_Traffic")`  | `threatlist_lookup(src)` | `threatlist_lookup(dest)` | search src_threatlist_name="*" OR dest_threatlist_name="*" | stats values(src) as src,values(src_threatlist_name) as src_threatlist,values(dest) as dest,values(dest_threatlist_name) as dest_threatlist,sum(count) as count by _time


#####################
## IDS
#####################

###### Correlation Searches ######
[Network - Substantial Increase in an Event - Rule]
action.email.sendresults      = 0
action.risk                   = 1
action.risk._risk_object      = signature
action.risk._risk_object_type = other
action.risk._risk_score       = 80
action.summary_index          = 1
action.summary_index._name    = notable
action.summary_index.ttl      = 1p
alert.digest_mode             = 1
alert.suppress                = 1
alert.suppress.fields         = signature
alert.suppress.period         = 86300
alert.track                   = false
cron_schedule                 = 15 * * * *
disabled                      = True
dispatch.earliest_time        = -60d@d
dispatch.latest_time          = now
enableSched                   = 1
is_visible                    = false
## Breakdown
## 1-2 - get counts by _time,signature w/ a 30m span
##     - this allows us to create a "True" count for "Last 24 hours" (w/in 30 mins of accuracy)
##   3 - rename fields
##   4 - get diff between time() and _time
##   5 - append "True" count for "Last 24 hours"
##       a. filter "Last 24 hours"
##       b. count by transport/dest_port
##       c. create "Last 24 hours" group
##   6 - create "Last 60 days" group (excludes "Today")
##   7 - now we bin everything by 1d
##   8 - consolidate
##   9 - create temp==signature where group=="Last 60 days"
##  10 - get stdev and averages for each signature per day (excludes "Last 24 hours")
##  11 - consolidate stdev and averages into "Last 24 hours" result
##  12 - dedup "Last 24 hours" result
##  13 - get limit
##  14 - get diff
##  15 - search diff>0
search                        = | tstats `summariesonly` count from datamodel=Intrusion_Detection by _time,IDS_Attacks.signature span=30m | `drop_dm_object_name("IDS_Attacks")` | `timeDiff` | appendpipe [search timeDiff<=86400 | stats max(_time) as _time,sum(count) as count by signature | eval group="Last 24 hours"] | eval group=if(_time<relative_time(time(),"@d") AND timeDiff<=5184000,"Last 60 days",group) | bin _time span=1d | stats sum(count) as count by _time,group,signature | eval temp=if(group="Last 60 days",signature,null()) | eventstats stdev(count) as stdev,avg(count) as avg by temp | eventstats max(stdev) as stdev,max(avg) as avg by signature | dedup signature sortby -_time | eval limit=(3*stdev)+avg | eval diff=count-limit | search diff>0

###### Key Indicator Searches ######
[IDS - High Severity Attacks]
action.email.reportServerEnabled              = 0
alert.track                                   = 0
action.keyindicator                           = 1
action.keyindicator.title                     = High Sev. Attacks
action.keyindicator.subtitle                  = Count
action.keyindicator.value                     = current_count
action.keyindicator.threshold                 = 
action.keyindicator.delta                     = delta
action.keyindicator.invert                    = false
action.keyindicator.group.0.name              = ids_center
action.keyindicator.group.0.order             = 0
dispatch.latest_time                          = now
display.general.enablePreview                 = 1
display.general.timeRangePicker.show          = false
display.general.type                          = visualizations
display.statistics.rowNumbers                 = 0
display.statistics.wrap                       = 0
display.visualizations.charting.drilldown     = all
display.visualizations.singlevalue.underLabel = High Severity Attacks
display.visualizations.show                   = 1
display.visualizations.type                   = singlevalue
search                                        = | tstats `summariesonly` count as current_count from datamodel=Intrusion_Detection where earliest=-24h@h latest=+0s (IDS_Attacks.severity="critical" OR IDS_Attacks.severity="high") | appendcols [| tstats `summariesonly` count as historical_count from datamodel=Intrusion_Detection where earliest=-48h@h latest=-24h@h (IDS_Attacks.severity="critical" OR IDS_Attacks.severity="high")] | `get_delta`

[IDS - Unique Categories]
action.email.reportServerEnabled              = 0
alert.track                                   = 0
action.keyindicator                           = 1
action.keyindicator.title                     = Attack Categories
action.keyindicator.subtitle                  = Unique Count
action.keyindicator.value                     = current_count
action.keyindicator.threshold                 = 
action.keyindicator.delta                     = delta
action.keyindicator.invert                    = false
action.keyindicator.group.0.name              = ids_center
action.keyindicator.group.0.order             = 1
dispatch.latest_time                          = now
display.general.enablePreview                 = 1
display.general.timeRangePicker.show          = false
display.general.type                          = visualizations
display.statistics.rowNumbers                 = 0
display.statistics.wrap                       = 0
display.visualizations.charting.drilldown     = all
display.visualizations.singlevalue.underLabel = Unique Attack Categories
display.visualizations.show                   = 1
display.visualizations.type                   = singlevalue
search                                        = | tstats `summariesonly` dc(IDS_Attacks.category) as current_count from datamodel=Intrusion_Detection where earliest=-24h@h latest=+0s | appendcols [| tstats `summariesonly` dc(IDS_Attacks.category) as historical_count from datamodel=Intrusion_Detection where earliest=-48h@h latest=-24h@h] | `get_delta`

[IDS - Unique Signature Count]
action.email.reportServerEnabled              = 0
alert.track                                   = 0
action.keyindicator                           = 1
action.keyindicator.title                     = Attack Signatures
action.keyindicator.subtitle                  = Unique Count
action.keyindicator.value                     = current_count
action.keyindicator.threshold                 = 
action.keyindicator.delta                     = delta
action.keyindicator.invert                    = false
action.keyindicator.group.0.name              = ids_center
action.keyindicator.group.0.order             = 2
dispatch.latest_time                          = now
display.general.enablePreview                 = 1
display.general.timeRangePicker.show          = false
display.general.type                          = visualizations
display.statistics.rowNumbers                 = 0
display.statistics.wrap                       = 0
display.visualizations.charting.drilldown     = all
display.visualizations.singlevalue.underLabel = Unique Attack Signatures
display.visualizations.show                   = 1
display.visualizations.type                   = singlevalue
search                                        = | tstats `summariesonly` estdc(IDS_Attacks.signature) as current_count from datamodel=Intrusion_Detection where earliest=-24h@h latest=+0s | appendcols [| tstats `summariesonly` estdc(IDS_Attacks.signature) as historical_count from datamodel=Intrusion_Detection where earliest=-48h@h latest=-24h@h] | `get_delta`

[IDS - Unique Sources]
action.email.reportServerEnabled              = 0
alert.track                                   = 0
action.keyindicator                           = 1
action.keyindicator.title                     = Attack Sources
action.keyindicator.subtitle                  = Unique Count
action.keyindicator.value                     = current_count
action.keyindicator.threshold                 = 
action.keyindicator.delta                     = delta
action.keyindicator.invert                    = false
action.keyindicator.group.0.name              = ids_center
action.keyindicator.group.0.order             = 3
dispatch.latest_time                          = now
display.general.enablePreview                 = 1
display.general.timeRangePicker.show          = false
display.general.type                          = visualizations
display.statistics.rowNumbers                 = 0
display.statistics.wrap                       = 0
display.visualizations.charting.drilldown     = all
display.visualizations.singlevalue.underLabel = Unique Attack Sources
display.visualizations.show                   = 1
display.visualizations.type                   = singlevalue
search                                        = | tstats `summariesonly` estdc(IDS_Attacks.src) as current_count from datamodel=Intrusion_Detection where earliest=-24h@h latest=+0s | appendcols [| tstats `summariesonly` estdc(IDS_Attacks.src) as historical_count from datamodel=Intrusion_Detection where earliest=-48h@h latest=-24h@h] | `get_delta`

[IDS - Unique Destinations]
action.email.reportServerEnabled              = 0
alert.track                                   = 0
action.keyindicator                           = 1
action.keyindicator.title                     = Attack Destinations
action.keyindicator.subtitle                  = Unique Count
action.keyindicator.value                     = current_count
action.keyindicator.threshold                 = 
action.keyindicator.delta                     = delta
action.keyindicator.invert                    = false
action.keyindicator.group.0.name              = ids_center
action.keyindicator.group.0.order             = 4
dispatch.latest_time                          = now
display.general.enablePreview                 = 1
display.general.timeRangePicker.show          = false
display.general.type                          = visualizations
display.statistics.rowNumbers                 = 0
display.statistics.wrap                       = 0
display.visualizations.charting.drilldown     = all
display.visualizations.singlevalue.underLabel = Unique Attack Destinations
display.visualizations.show                   = 1
display.visualizations.type                   = singlevalue
search                                        = | tstats `summariesonly` estdc(IDS_Attacks.dest) as current_count from datamodel=Intrusion_Detection where earliest=-24h@h latest=+0s | appendcols [| tstats `summariesonly` estdc(IDS_Attacks.dest) as historical_count from datamodel=Intrusion_Detection where earliest=-48h@h latest=-24h@h] | `get_delta`

###### Report Searches ######
[IDS - Activity By IDS Type]
action.email.reportServerEnabled          = 0
alert.track                               = 0
dispatch.earliest_time                    = -24h@h
dispatch.latest_time                      = now
display.general.enablePreview             = 1
display.general.type                      = visualizations
display.statistics.rowNumbers             = 0
display.statistics.wrap                   = 0
display.visualizations.charting.chart     = pie
display.visualizations.charting.drilldown = all
display.visualizations.show               = 1
search                                    = | tstats `summariesonly` count from datamodel=Intrusion_Detection by IDS_Attacks.ids_type | `drop_dm_object_name("IDS_Attacks")`

[IDS - Activity By Category]
action.email.reportServerEnabled          = 0
alert.track                               = 0
dispatch.earliest_time                    = -24h@h
dispatch.latest_time                      = now
display.general.enablePreview             = 1
display.general.type                      = visualizations
display.statistics.rowNumbers             = 0
display.statistics.wrap                   = 0
display.visualizations.charting.chart     = pie
display.visualizations.charting.drilldown = all
display.visualizations.show               = 1
search                                    = | tstats `summariesonly` count from datamodel=Intrusion_Detection by IDS_Attacks.category | `drop_dm_object_name("IDS_Attacks")`

[IDS - Activity By Severity]
action.email.reportServerEnabled          = 0
alert.track                               = 0
dispatch.earliest_time                    = -24h@h
dispatch.latest_time                      = now
display.general.enablePreview             = 1
display.general.type                      = visualizations
display.statistics.rowNumbers             = 0
display.statistics.wrap                   = 0
display.visualizations.charting.chart     = bar
display.visualizations.charting.drilldown = all
display.visualizations.show               = 1
search                                    = | tstats `summariesonly` count from datamodel=Intrusion_Detection by IDS_Attacks.severity | `drop_dm_object_name("IDS_Attacks")` | sort - count

[IDS - Top Attacks By Device]
action.email.reportServerEnabled = 0
alert.track                      = 0
dispatch.earliest_time           = -24h@h
dispatch.latest_time             = now
display.general.enablePreview    = 1
display.general.type             = statistics
display.statistics.drilldown     = row
display.statistics.rowNumbers    = 0
display.statistics.wrap          = 0
display.visualizations.show      = 0
search                           = | tstats `summariesonly` dc(IDS_Attacks.signature) as attack_count,dc(IDS_Attacks.src) as src_count,dc(IDS_Attacks.dest) as dest_count,count from datamodel=Intrusion_Detection by IDS_Attacks.dvc | `drop_dm_object_name("IDS_Attacks")` | sort - count

[IDS - Top Attacks By Category]
action.email.reportServerEnabled = 0
alert.track                      = 0
dispatch.earliest_time           = -24h@h
dispatch.latest_time             = now
display.general.enablePreview    = 1
display.general.type             = statistics
display.statistics.drilldown     = row
display.statistics.rowNumbers    = 0
display.statistics.wrap          = 0
display.visualizations.show      = 0
search                           = | tstats `summariesonly` dc(IDS_Attacks.signature) as attack_count,dc(IDS_Attacks.src) as src_count,dc(IDS_Attacks.dest) as dest_count,count from datamodel=Intrusion_Detection by IDS_Attacks.category | `drop_dm_object_name("IDS_Attacks")` | sort - count

[IDS - Top Attacks By Severity]
action.email.reportServerEnabled = 0
alert.track                      = 0
dispatch.earliest_time           = -24h@h
dispatch.latest_time             = now
display.general.enablePreview    = 1
display.general.type             = statistics
display.statistics.drilldown     = row
display.statistics.rowNumbers    = 0
display.statistics.wrap          = 0
display.visualizations.show      = 0
search                           = | tstats `summariesonly` dc(IDS_Attacks.signature) as attack_count,dc(IDS_Attacks.src) as src_count,dc(IDS_Attacks.dest) as dest_count,count from datamodel=Intrusion_Detection by IDS_Attacks.severity | `drop_dm_object_name("IDS_Attacks")`  | sort - count

[IDS - Top Attacks By Attack]
action.email.reportServerEnabled = 0
alert.track                      = 0
dispatch.earliest_time           = -24h@h
dispatch.latest_time             = now
display.general.enablePreview    = 1
display.general.type             = statistics
display.statistics.drilldown     = row
display.statistics.rowNumbers    = 0
display.statistics.wrap          = 0
display.visualizations.show      = 0
search                           = | tstats `summariesonly` dc(IDS_Attacks.src) as src_count,dc(IDS_Attacks.dest) as dest_count,count from datamodel=Intrusion_Detection by IDS_Attacks.signature | `drop_dm_object_name("IDS_Attacks")` | sort - count

[IDS - Top Attacks By Source]
action.email.reportServerEnabled = 0
alert.track                      = 0
dispatch.earliest_time           = -24h@h
dispatch.latest_time             = now
display.general.enablePreview    = 1
display.general.type             = statistics
display.statistics.drilldown     = row
display.statistics.rowNumbers    = 0
display.statistics.wrap          = 0
display.visualizations.show      = 0
search                           = | tstats `summariesonly` dc(IDS_Attacks.signature) as attack_count,dc(IDS_Attacks.dest) as dest_count,count from datamodel=Intrusion_Detection by IDS_Attacks.src | `drop_dm_object_name("IDS_Attacks")` | sort - count

[IDS - Top Attacks By Destination]
action.email.reportServerEnabled = 0
alert.track                      = 0
dispatch.earliest_time           = -24h@h
dispatch.latest_time             = now
display.general.enablePreview    = 1
display.general.type             = statistics
display.statistics.drilldown     = row
display.statistics.rowNumbers    = 0
display.statistics.wrap          = 0
display.visualizations.show      = 0
search                           = | tstats `summariesonly` dc(IDS_Attacks.signature) as attack_count,dc(IDS_Attacks.src) as src_count,count from datamodel=Intrusion_Detection by IDS_Attacks.dest | `drop_dm_object_name("IDS_Attacks")` | sort - count

[IDS - Activity Over Time]
action.email.reportServerEnabled                    = 0
alert.track                                         = 0
dispatch.earliest_time                              = -24h@h
dispatch.latest_time                                = now
display.general.enablePreview                       = 1
display.general.type                                = visualizations
display.statistics.rowNumbers                       = 0
display.statistics.wrap                             = 0
display.visualizations.charting.chart               = area
display.visualizations.charting.chart.nullValueMode = zero
display.visualizations.charting.drilldown           = all
display.visualizations.show                         = 1
display.visualizations.type                         = charting
search                                              = | `tstats` count from datamodel=Intrusion_Detection by _time span=10m | timechart minspan=10m useother=`useother` count

[IDS - Activity Over Time By Device]
action.email.reportServerEnabled                    = 0
alert.track                                         = 0
dispatch.earliest_time                              = -24h@h
dispatch.latest_time                                = now
display.general.enablePreview                       = 1
display.general.type                                = visualizations
display.statistics.rowNumbers                       = 0
display.statistics.wrap                             = 0
display.visualizations.charting.chart               = area
display.visualizations.charting.chart.nullValueMode = zero
display.visualizations.charting.drilldown           = all
display.visualizations.show                         = 1
display.visualizations.type                         = charting
search                                              = | `tstats` count from datamodel=Intrusion_Detection by _time,IDS_Attacks.dvc span=10m | timechart minspan=10m useother=`useother` count by IDS_Attacks.dvc | `drop_dm_object_name("IDS_Attacks")`

[IDS - Activity Over Time By Category]
action.email.reportServerEnabled                    = 0
alert.track                                         = 0
dispatch.earliest_time                              = -24h@h
dispatch.latest_time                                = now
display.general.enablePreview                       = 1
display.general.type                                = visualizations
display.statistics.rowNumbers                       = 0
display.statistics.wrap                             = 0
display.visualizations.charting.chart               = area
display.visualizations.charting.chart.nullValueMode = zero
display.visualizations.charting.drilldown           = all
display.visualizations.show                         = 1
display.visualizations.type                         = charting
search                                              = | `tstats` count from datamodel=Intrusion_Detection by _time,IDS_Attacks.category span=10m | timechart minspan=10m useother=`useother` count by IDS_Attacks.category | `drop_dm_object_name("IDS_Attacks")`

[IDS - Activity Over Time By Severity]
action.email.reportServerEnabled                    = 0
alert.track                                         = 0
dispatch.earliest_time                              = -24h@h
dispatch.latest_time                                = now
display.general.enablePreview                       = 1
display.general.type                                = visualizations
display.statistics.rowNumbers                       = 0
display.statistics.wrap                             = 0
display.visualizations.charting.chart               = area
display.visualizations.charting.chart.nullValueMode = zero
display.visualizations.charting.drilldown           = all
display.visualizations.show                         = 1
display.visualizations.type                         = charting
search                                              = | `tstats` count from datamodel=Intrusion_Detection by _time,IDS_Attacks.severity span=10m | timechart minspan=10m useother=`useother` count by IDS_Attacks.severity | `drop_dm_object_name("IDS_Attacks")`

[IDS - Activity Over Time By Attack]
action.email.reportServerEnabled                    = 0
alert.track                                         = 0
dispatch.earliest_time                              = -24h@h
dispatch.latest_time                                = now
display.general.enablePreview                       = 1
display.general.type                                = visualizations
display.statistics.rowNumbers                       = 0
display.statistics.wrap                             = 0
display.visualizations.charting.chart               = area
display.visualizations.charting.chart.nullValueMode = zero
display.visualizations.charting.drilldown           = all
display.visualizations.show                         = 1
display.visualizations.type                         = charting
search                                              = | `tstats` count from datamodel=Intrusion_Detection by _time,IDS_Attacks.signature span=10m | timechart minspan=10m useother=`useother` count by IDS_Attacks.signature | `drop_dm_object_name("IDS_Attacks")`

[IDS - Activity Over Time By Source]
action.email.reportServerEnabled                    = 0
alert.track                                         = 0
dispatch.earliest_time                              = -24h@h
dispatch.latest_time                                = now
display.general.enablePreview                       = 1
display.general.type                                = visualizations
display.statistics.rowNumbers                       = 0
display.statistics.wrap                             = 0
display.visualizations.charting.chart               = area
display.visualizations.charting.chart.nullValueMode = zero
display.visualizations.charting.drilldown           = all
display.visualizations.show                         = 1
display.visualizations.type                         = charting
search                                              = | `tstats` count from datamodel=Intrusion_Detection by _time,IDS_Attacks.src span=10m | timechart minspan=10m useother=`useother` count by IDS_Attacks.src | `drop_dm_object_name("IDS_Attacks")`

[IDS - Activity Over Time By Destination]
action.email.reportServerEnabled                    = 0
alert.track                                         = 0
dispatch.earliest_time                              = -24h@h
dispatch.latest_time                                = now
display.general.enablePreview                       = 1
display.general.type                                = visualizations
display.statistics.rowNumbers                       = 0
display.statistics.wrap                             = 0
display.visualizations.charting.chart               = area
display.visualizations.charting.chart.nullValueMode = zero
display.visualizations.charting.drilldown           = all
display.visualizations.show                         = 1
display.visualizations.type                         = charting
search                                              = | `tstats` count from datamodel=Intrusion_Detection by _time,IDS_Attacks.dest span=10m | timechart minspan=10m useother=`useother` count by IDS_Attacks.dest | `drop_dm_object_name("IDS_Attacks")`

[IDS - Scanning Activity (Many Attacks)]
action.email.reportServerEnabled          = 0
alert.track                               = 0
dispatch.earliest_time                    = -24h@h
dispatch.latest_time                      = now
display.general.enablePreview             = 1
display.general.type                      = visualizations
display.statistics.rowNumbers             = 0
display.statistics.wrap                   = 0
display.visualizations.charting.chart     = bar
display.visualizations.charting.drilldown = all
display.visualizations.chartHeight        = 350
display.visualizations.show               = 1
search                                    = | tstats `summariesonly` dc(IDS_Attacks.signature) as attack_count from datamodel=Intrusion_Detection by IDS_Attacks.src | `drop_dm_object_name("IDS_Attacks")` | sort 10 - attack_count

[IDS - Scanning Activity (Many Systems)]
action.email.reportServerEnabled          = 0
alert.track                               = 0
dispatch.earliest_time                    = -24h@h
dispatch.latest_time                      = now
display.general.enablePreview             = 1
display.general.type                      = visualizations
display.statistics.rowNumbers             = 0
display.statistics.wrap                   = 0
display.visualizations.charting.chart     = bar
display.visualizations.charting.drilldown = all
display.visualizations.chartHeight        = 350
display.visualizations.show               = 1
search                                    = | tstats `summariesonly` dc(IDS_Attacks.dest) as dest_count from datamodel=Intrusion_Detection by IDS_Attacks.src | `drop_dm_object_name("IDS_Attacks")` | sort 10 - dest_count

[IDS - New Attacks]
action.email.reportServerEnabled     = 0
alert.track                          = 0
dispatch.latest_time                 = now
display.general.enablePreview        = 1
display.general.timeRangePicker.show = false
display.general.type                 = statistics
display.statistics.drilldown         = row
display.statistics.rowNumbers        = 0
display.statistics.wrap              = 0
display.visualizations.show          = 0
search                               = | `ids_attack_tracker` | `tracker_timerange_by_value("-30d","now")` | `dayDiff(firstTime)` | `uitime(firstTime)` | sort 100 - firstTime | fields firstTime,ids_type,signature,vendor_product

###### Swim Lane Searches ######
[IDS - All IDS Attacks By Asset - Swimlane]
action.email.reportServerEnabled                  = 0
action.swimlane                                   = 1
action.swimlane.title                             = IDS Attacks
action.swimlane.color                             = purple
action.swimlane.constraint_method                 = reverse_asset_lookup
action.swimlane.constraint_fields                 = IDS_Attacks.src,IDS_Attacks.dest
action.swimlane.drilldown_search                  = | `datamodel("Intrusion_Detection","IDS_Attacks")` | search $constraints$
alert.track                                       = 0
dispatch.latest_time                              = now
display.page.asset_investigator.0.collection_name = Default
display.page.asset_investigator.0.order           = 4
is_visible                                        = false
search                                            = | tstats `summariesonly` values(IDS_Attacks.severity) as severity,values(IDS_Attacks.signature) as signature,values(IDS_Attacks.src) as src,values(IDS_Attacks.dest) as dest,count from datamodel=Intrusion_Detection where $constraints$ by _time span=$span$

[IDS - All IDS Attacks By Identity - Swimlane]
action.email.reportServerEnabled                     = 0
action.swimlane                                      = 1
action.swimlane.title                                = IDS Attacks
action.swimlane.color                                = purple
action.swimlane.constraint_method                    = reverse_identity_lookup
action.swimlane.constraint_fields                    = IDS_Attacks.user
action.swimlane.drilldown_search                     = | `datamodel("Intrusion_Detection","IDS_Attacks")` | search $constraints$
alert.track                                          = 0
dispatch.latest_time                                 = now
display.page.identity_investigator.0.collection_name = Default
display.page.identity_investigator.0.order           = 4
is_visible                                           = false
search                                               = | tstats `summariesonly` values(IDS_Attacks.severity) as severity,values(IDS_Attacks.signature) as signature,values(IDS_Attacks.src) as src,values(IDS_Attacks.dest) as dest,count from datamodel=Intrusion_Detection where $constraints$ by _time span=$span$


###################
## Network Changes
###################

###### Report Searches ######
[Change - Network Changes By Action]
action.email.reportServerEnabled                = 0
alert.track                                     = 0
dispatch.earliest_time                          = -24h@h
dispatch.latest_time                            = now
display.general.enablePreview                   = 1
display.general.type                            = visualizations
display.statistics.rowNumbers                   = 0
display.statistics.wrap                         = 0
display.visualizations.charting.chart           = column
display.visualizations.charting.drilldown       = all
display.visualizations.charting.chart.stackMode = stacked
display.visualizations.show                     = 1
display.visualizations.type                     = charting
search                                          = | `tstats` count from datamodel=Change_Analysis where nodename=All_Changes.Network_Changes by _time,All_Changes.action span=10m | timechart minspan=10m useother=`useother` count by All_Changes.action | `drop_dm_object_name("All_Changes")`

[Change - Network Changes By Device]
action.email.reportServerEnabled          = 0
alert.track                               = 0
dispatch.earliest_time                    = -24h@h
dispatch.latest_time                      = now
display.general.enablePreview             = 1
display.general.type                      = visualizations
display.statistics.rowNumbers             = 0
display.statistics.wrap                   = 0
display.visualizations.charting.chart     = line
display.visualizations.charting.drilldown = all
display.visualizations.show               = 1
display.visualizations.type               = charting
search                                    = | tstats `summariesonly` count from datamodel=Change_Analysis where nodename=All_Changes.Network_Changes by All_Changes.dvc | `drop_dm_object_name("All_Changes")`

[Change - Recent Network Changes]
action.email.reportServerEnabled = 0
alert.track                      = 0
dispatch.earliest_time           = -24h@h
dispatch.latest_time             = now
display.events.fields            = ["dvc", "action", "command"]
display.events.list.wrap         = true
display.events.rowNumbers        = false
display.events.type              = list
display.general.enablePreview    = true
display.general.type             = events
search                           = | `datamodel("Change_Analysis", "Network_Changes")` | `drop_dm_object_name("All_Changes")` | `drop_dm_object_name("Network_Changes")` | head 100


#####################
## Vulnerabilities
#####################

###### Key Indicator Searches ######
[Vuln - Total Vulnerabilities]
action.email.reportServerEnabled              = 0
alert.track                                   = 0
action.keyindicator                           = 1
action.keyindicator.title                     = Total Vulns
action.keyindicator.subtitle                  = Count
action.keyindicator.value                     = current_count
action.keyindicator.threshold                 = 
action.keyindicator.delta                     = delta
action.keyindicator.invert                    = false
action.keyindicator.group.0.name              = vuln_center
action.keyindicator.group.0.order             = 3
dispatch.latest_time                          = now
display.general.enablePreview                 = 1
display.general.timeRangePicker.show          = false
display.general.type                          = visualizations
display.statistics.rowNumbers                 = 0
display.statistics.wrap                       = 0
display.visualizations.charting.drilldown     = all
display.visualizations.singlevalue.underLabel = Total Vulns
display.visualizations.show                   = 1
display.visualizations.type                   = singlevalue
search                                        = | tstats `summariesonly` count from datamodel=Vulnerabilities where earliest=-30d@d latest=+0s `cim_filter_vuln_severity("Vulnerabilities")` by Vulnerabilities.signature,Vulnerabilities.dest | stats count as current_count | appendcols [| tstats `summariesonly` count from datamodel=Vulnerabilities where earliest=-60d@d latest=-30d@d `cim_filter_vuln_severity("Vulnerabilities")` by Vulnerabilities.signature,Vulnerabilities.dest | stats count as historical_count] | `get_delta`

[Vuln - Vulnerable System Count]
action.email.reportServerEnabled              = 0
alert.track                                   = 0
action.keyindicator                           = 1
action.keyindicator.title                     = Vulnerable Systems
action.keyindicator.subtitle                  = System Count
action.keyindicator.value                     = current_count
action.keyindicator.threshold                 = 
action.keyindicator.delta                     = delta
action.keyindicator.invert                    = false
action.keyindicator.group.0.name              = vuln_center
action.keyindicator.group.0.order             = 2
dispatch.latest_time                          = now
display.general.enablePreview                 = 1
display.general.timeRangePicker.show          = false
display.general.type                          = visualizations
display.statistics.rowNumbers                 = 0
display.statistics.wrap                       = 0
display.visualizations.charting.drilldown     = all
display.visualizations.singlevalue.underLabel = Vulnerable Systems
display.visualizations.show                   = 1
display.visualizations.type                   = singlevalue
search                                        = | tstats `summariesonly` estdc(Vulnerabilities.dest) as current_count from datamodel=Vulnerabilities where earliest=-30d@d latest=+0s `cim_filter_vuln_severity("Vulnerabilities")` | appendcols [| tstats `summariesonly` estdc(Vulnerabilities.dest) as historical_count from datamodel=Vulnerabilities where earliest=-60d@d latest=-30d@d `cim_filter_vuln_severity("Vulnerabilities")`] | `get_delta`

[Vuln - Average Vulns Per System]
action.email.reportServerEnabled              = 0
alert.track                                   = 0
action.keyindicator                           = 1
action.keyindicator.title                     = Vulns Per System
action.keyindicator.subtitle                  = Average Count
action.keyindicator.value                     = current_avg
action.keyindicator.threshold                 = 
action.keyindicator.delta                     = delta
action.keyindicator.invert                    = false
action.keyindicator.group.0.name              = vuln_center
action.keyindicator.group.0.order             = 0
dispatch.latest_time                          = now
display.general.enablePreview                 = 0
display.general.timeRangePicker.show          = false
display.general.type                          = visualizations
display.statistics.rowNumbers                 = 0
display.statistics.wrap                       = 0
display.visualizations.charting.drilldown     = all
display.visualizations.singlevalue.underLabel = Average Vulns Per System
display.visualizations.show                   = 1
display.visualizations.type                   = singlevalue
search                                        = | tstats `summariesonly` dc(Vulnerabilities.signature) as signature_count from datamodel=Vulnerabilities where earliest=-30d@d latest=+0s `cim_filter_vuln_severity("Vulnerabilities")` by Vulnerabilities.dest | `drop_dm_object_name("Vulnerabilities")` | stats avg(signature_count) as current_avg | appendcols [| tstats `summariesonly` dc(Vulnerabilities.signature) as signature_count from datamodel=Vulnerabilities where earliest=-60d@d latest=-30d@d `cim_filter_vuln_severity("Vulnerabilities")` by Vulnerabilities.dest | `drop_dm_object_name("Vulnerabilities")` | stats avg(signature_count) as historical_avg] | `get_delta(current_avg,historical_avg)`

[Vuln - Percentage Of Vulnerable Systems]
action.email.reportServerEnabled              = 0
alert.track                                   = 0
action.keyindicator                           = 1
action.keyindicator.title                     = Vulnerable Systems
action.keyindicator.subtitle                  = Percent Vulnerable
action.keyindicator.value                     = current_percent
action.keyindicator.value_suffix              = %
action.keyindicator.threshold                 = 
action.keyindicator.delta                     = 
action.keyindicator.invert                    = false
action.keyindicator.group.0.name              = vuln_center
action.keyindicator.group.0.order             = 1
dispatch.earliest_time                        = -30d@d
dispatch.latest_time                          = now
display.general.enablePreview                 = 1
display.general.type                          = visualizations
display.statistics.rowNumbers                 = 0
display.statistics.wrap                       = 0
display.visualizations.charting.drilldown     = all
display.visualizations.singlevalue.underLabel = Percent Of Systems Vulnerable
display.visualizations.show                   = 1
display.visualizations.type                   = singlevalue
search                                        = | tstats `summariesonly` values(Vulnerabilities.severity) as severity from datamodel=Vulnerabilities by Vulnerabilities.dest | `drop_dm_object_name("Vulnerabilities")` | eval filtered_severity=mvfilter((severity!="informational" AND severity!="low")) | stats count(eval(isnotnull(severity))) as total_systems,count(eval(isnotnull(filtered_severity))) as vulnerable_systems | eval current_percent=round((vulnerable_systems*100)/total_systems,1) | fillnull value="?" current_percent

[Vuln - Average Vulnerability Age]
action.email.reportServerEnabled              = 0
alert.track                                   = 0
action.keyindicator                           = 1
action.keyindicator.title                     = Vulnerability Age
action.keyindicator.subtitle                  = Average days
action.keyindicator.value                     = current_avg
action.keyindicator.threshold                 = 
action.keyindicator.delta                     = 
action.keyindicator.invert                    = false
action.keyindicator.group.0.name              = vuln_center
action.keyindicator.group.0.order             = 4
dispatch.earliest_time                        = -365d@d
dispatch.latest_time                          = now
display.general.enablePreview                 = 1
display.general.type                          = visualizations
display.statistics.rowNumbers                 = 0
display.statistics.wrap                       = 0
display.visualizations.charting.drilldown     = all
display.visualizations.singlevalue.underLabel = Average Vulnerability Age
display.visualizations.show                   = 1
display.visualizations.type                   = singlevalue
search                                        = | tstats `summariesonly` min(_time) as firstTime,max(_time) as lastTime,count from datamodel=Vulnerabilities by Vulnerabilities.signature,Vulnerabilities.dest | `drop_dm_object_name("Vulnerabilities")` | where firstTime!=lastTime AND (now()-lastTime)<2592000 | eval dayDiff=(lastTime-firstTime)/86400 | stats avg(dayDiff) as current_avg

###### Report Searches ######
[Vuln - Top Vulnerabilities]
action.email.reportServerEnabled          = 0
alert.track                               = 0
dispatch.earliest_time                    = -30d@d
dispatch.latest_time                      = now
display.general.enablePreview             = 1
display.general.type                      = visualizations
display.statistics.rowNumbers             = 0
display.statistics.wrap                   = 0
display.visualizations.charting.chart     = bar
display.visualizations.charting.drilldown = all
display.visualizations.chartHeight        = 350
display.visualizations.show               = 1
search                                    = | tstats `summariesonly` dc(Vulnerabilities.dest) as dest_count from datamodel=Vulnerabilities where * `cim_filter_vuln_severity("Vulnerabilities")` by Vulnerabilities.signature | `drop_dm_object_name("Vulnerabilities")` | sort 10 - dest_count

[Vuln - Most Vulnerable Hosts]
action.email.reportServerEnabled                = 0
alert.track                                     = 0
dispatch.earliest_time                          = -30d@d
dispatch.latest_time                            = now
display.general.enablePreview                   = 1
display.general.type                            = visualizations
display.statistics.rowNumbers                   = 0
display.statistics.wrap                         = 0
display.visualizations.charting.axisTitleY.text = count
display.visualizations.charting.chart           = bar
display.visualizations.charting.chart.stackMode = stacked
display.visualizations.charting.drilldown       = all
display.visualizations.chartHeight              = 350
display.visualizations.show                     = 1
search                                          = | tstats `summariesonly` dc(Vulnerabilities.signature) as vuln_count from datamodel=Vulnerabilities by Vulnerabilities.severity,Vulnerabilities.dest | chart useother=`useother` first(vuln_count) over Vulnerabilities.dest by Vulnerabilities.severity | `drop_dm_object_name("Vulnerabilities")` | eval total=case(critical>0 AND high>0,critical+high,critical>0,critical,high>0,high,1==1,0) | eval subTotal=case(medium>0 AND low>0,medium+low,medium>0,medium,low>0,low,1==1,0) | eval subSubTotal=case(informational>0 AND unknown>0,informational+unknown,informational>0,informational,unknown>0,unknown,1==1,0) | sort 10 - total,subTotal,subSubTotal | fields - total,subTotal,subSubTotal

[Vuln - Vulnerabilities By Category]
action.email.reportServerEnabled          = 0
alert.track                               = 0
dispatch.earliest_time                    = -30d@d
dispatch.latest_time                      = now
display.general.enablePreview             = 1
display.general.type                      = visualizations
display.statistics.rowNumbers             = 0
display.statistics.wrap                   = 0
display.visualizations.charting.chart     = pie
display.visualizations.charting.drilldown = all
display.visualizations.show               = 1
search                                    = | tstats `summariesonly` dc(Vulnerabilities.signature) as vuln_count from datamodel=Vulnerabilities by Vulnerabilities.category,Vulnerabilities.dest | `drop_dm_object_name("Vulnerabilities")` | stats sum(vuln_count) as count by category

[Vuln - Vulnerabilities By Severity]
action.email.reportServerEnabled          = 0
alert.track                               = 0
dispatch.earliest_time                    = -24h@h
dispatch.latest_time                      = now
display.general.enablePreview             = 1
display.general.type                      = visualizations
display.statistics.rowNumbers             = 0
display.statistics.wrap                   = 0
display.visualizations.charting.chart     = bar
display.visualizations.charting.drilldown = all
display.visualizations.show               = 1
search                                    = | tstats `summariesonly` dc(Vulnerabilities.signature) as vuln_count from datamodel=Vulnerabilities by Vulnerabilities.severity,Vulnerabilities.dest | `drop_dm_object_name("Vulnerabilities")` | stats sum(vuln_count) as count by severity

[Vuln - New Vulnerabilities]
action.email.reportServerEnabled     = 0
alert.track                          = 0
dispatch.latest_time                 = now
display.general.enablePreview        = 1
display.general.timeRangePicker.show = false
display.general.type                 = statistics
display.statistics.drilldown         = row
display.statistics.rowNumbers        = 0
display.statistics.wrap              = 0
display.visualizations.show          = 0
search                               = | `vuln_signature_reference` | `tracker_timerange_by_value("-30d","now")` | `dayDiff(firstTime)` | `uitime(firstTime)` | sort 100 - firstTime | `makemv(cve)` | fields firstTime,signature,cve,vendor_product

[Vuln - Scan Activity Over Time]
action.email.reportServerEnabled                    = 0
alert.track                                         = 0
dispatch.earliest_time                              = -365d@d
dispatch.latest_time                                = now
display.general.enablePreview                       = 1
display.general.type                                = visualizations
display.statistics.rowNumbers                       = 0
display.statistics.wrap                             = 0
display.visualizations.charting.chart               = line
display.visualizations.charting.chart.nullValueMode = zero
display.visualizations.charting.drilldown           = all
display.visualizations.show                         = 1
display.visualizations.type                         = charting
search                                              = | `tstats` dc(Vulnerabilities.dest) from datamodel=Vulnerabilities by _time span=1d | timechart minspan=1d dc(Vulnerabilities.dest) as "dc(dest)"

[Vuln - Vulnerabilities By Age]
action.email.reportServerEnabled = 0
alert.track                      = 0
dispatch.earliest_time           = -365d@d
dispatch.latest_time             = now
display.general.enablePreview    = 1
display.general.type             = statistics
display.statistics.drilldown     = row
display.statistics.rowNumbers    = 0
display.statistics.wrap          = 0
display.visualizations.show      = 0
search                           = | tstats `summariesonly` min(_time) as firstTime,max(_time) as lastTime,count from datamodel=Vulnerabilities by Vulnerabilities.signature,Vulnerabilities.dest | `drop_dm_object_name("Vulnerabilities")` | where firstTime!=lastTime AND (now()-lastTime)<2592000 | eval timeDiff=lastTime-firstTime | sort 100 - timeDiff,lastTime | eval "Age (days)"=round(timeDiff/86400,1) | `uitime(firstTime)` | `uitime(lastTime)` | fields firstTime,lastTime,signature,dest,"Age (days)"

[Vuln - Delinquent Scanning]
action.email.reportServerEnabled = 0
alert.track                      = 0
dispatch.earliest_time           = -365d@d
dispatch.latest_time             = now
display.general.enablePreview    = 1
display.general.type             = statistics
display.statistics.drilldown     = row
display.statistics.rowNumbers    = 0
display.statistics.wrap          = 0
display.visualizations.show      = 0
search                           = | tstats `summariesonly` min(_time) as firstTime,max(_time) as lastTime from datamodel=Vulnerabilities by Vulnerabilities.dest | `drop_dm_object_name("Vulnerabilities")` | `dayDiff(lastTime)` | eval dayDiff=round(dayDiff,1) | `uitime(firstTime)` | `uitime(lastTime)` | sort 100 + lastTime


###################
## Web
###################

###### Generating Searches ######
[Network - User Agent Length Tracker - Lookup Gen]
action.email.sendresults = 0
cron_schedule            = 10 0,4,8,12,16,20 * * *
dispatch.earliest_time   = -90d
dispatch.latest_time     = +0s
enableSched              = 1
is_visible               = false
search                   = | tstats `summariesonly` min(Web.http_user_agent_length) as min_length,avg(Web.http_user_agent_length) as mean_length,max(Web.http_user_agent_length) as max_length,stdev(Web.http_user_agent_length) as stdev,count as total_count from datamodel=Web where Web.http_user_agent!="unknown" | appendcols [| inputlookup standard_deviations | rename stdev as standard_deviation] | filldown | fillnull value=0 min_length,mean_length,max_length,stdev,total_count | `stdev_desired_result(standard_deviation,mean_length,"gt_length")` | `stdev_desired_result(-standard_deviation,mean_length,"lt_length")` | eval search=case(gt_length>0 AND lt_length>0, "(Web.http_user_agent_length>".floor(gt_length)." OR Web.http_user_agent_length<".ceil(lt_length).")",gt_length>0 AND lt_length<=0,"Web.http_user_agent_length>".floor(gt_length),gt_length<=0 AND lt_length>0,"Web.http_user_agent_length<".ceil(lt_length),gt_length<=0 AND lt_length<=0,"Web.http_user_agent_length=-1") | rename standard_deviation as Z | rename total as total_count | fields min_length,mean_length,max_length,stdev,total_count,Z,search | `round(mean_length)` | `round(stdev)` | outputlookup user_agent_length_tracker | stats count

[Network - URL Length Tracker - Lookup Gen]
action.email.sendresults = 0
cron_schedule            = 30 0,4,8,12,16,20 * * *
dispatch.earliest_time   = -90d
dispatch.latest_time     = +0s
enableSched              = 1
is_visible               = false
search                   = | tstats `summariesonly` min(Web.url_length) as min_length,avg(Web.url_length) as mean_length,max(Web.url_length) as max_length,stdev(Web.url_length) as stdev,count as total_count from datamodel=Web where Web.url!="unknown" | appendcols [| inputlookup standard_deviations | rename stdev as standard_deviation] | filldown | fillnull value=0 min_length,mean_length,max_length,stdev,total_count | `stdev_desired_result(standard_deviation,mean_length,"gt_length")` | `stdev_desired_result(-standard_deviation,mean_length,"lt_length")` | eval search=case(gt_length>0 AND lt_length>0, "(Web.url_length>".floor(gt_length)." OR Web.url_length<".ceil(lt_length).")",gt_length>0 AND lt_length<=0,"Web.url_length>".floor(gt_length),gt_length<=0 AND lt_length>0,"Web.url_length<".ceil(lt_length),gt_length<=0 AND lt_length<=0,"(Web.url_length=-1)") | rename standard_deviation as Z | rename total as total_count | fields min_length,mean_length,max_length,stdev,total_count,Z,search | `round(mean_length)` | `round(stdev)` | outputlookup url_length_tracker | stats count

###### Key Indicator Searches ######

## HTTP Category Analysis

[Web - HTTP Category Count]
action.email.reportServerEnabled              = 0
alert.track                                   = 0
action.keyindicator                           = 1
action.keyindicator.title                     = Unique Categories
action.keyindicator.subtitle                  = Unique Count
action.keyindicator.value                     = current_count
action.keyindicator.threshold                 = 
action.keyindicator.delta                     = delta
action.keyindicator.invert                    = false
action.keyindicator.group.0.name              = http_category
action.keyindicator.group.0.order             = 4
action.keyindicator.group.1.name              = web_center
action.keyindicator.group.1.order             = 0
dispatch.latest_time                          = now
display.general.enablePreview                 = 1
display.general.timeRangePicker.show          = false
display.general.type                          = visualizations
display.statistics.rowNumbers                 = 0
display.statistics.wrap                       = 0
display.visualizations.charting.drilldown     = all
display.visualizations.singlevalue.underLabel = Unique HTTP Category Count
display.visualizations.show                   = 1
display.visualizations.type                   = singlevalue
search                                        = | tstats `summariesonly` estdc(Web.category) as current_count from datamodel=Web where earliest=-24h@h latest=+0s | appendcols [| tstats `summariesonly` estdc(Web.category) as historical_count from datamodel=Web where earliest=-48h@h latest=-24h@h] | `get_delta`

[Web - HTTP Category Maximum Count]
action.email.reportServerEnabled              = 0
alert.track                                   = 0
action.keyindicator                           = 1
action.keyindicator.title                     = Maximum Count
action.keyindicator.subtitle                  = Count
action.keyindicator.value                     = current_max
action.keyindicator.threshold                 = 
action.keyindicator.delta                     = delta
action.keyindicator.invert                    = false
action.keyindicator.group.0.name              = http_category
action.keyindicator.group.0.order             = 2
dispatch.latest_time                          = now
display.general.enablePreview                 = 1
display.general.timeRangePicker.show          = false
display.general.type                          = visualizations
display.statistics.rowNumbers                 = 0
display.statistics.wrap                       = 0
display.visualizations.charting.drilldown     = all
display.visualizations.singlevalue.underLabel = Maximum Count
display.visualizations.show                   = 1
display.visualizations.type                   = singlevalue
search                                        = | tstats `summariesonly` count as current_max from datamodel=Web where earliest=-24h@h latest=+0s by Web.category | sort 1 - current_max | `drop_dm_object_name("Web")` | eval label=current_max." event(s) for HTTP category: ".category | appendcols [| tstats `summariesonly` count as historical_max from datamodel=Web where earliest=-48h@h latest=-24h@h by Web.category | sort 1 - historical_max | `drop_dm_object_name("Web")`] | fields label,current_max,historical_max | `get_delta(current_max,historical_max)`

[Web - HTTP Category Mean Count]
action.email.reportServerEnabled              = 0
alert.track                                   = 0
action.keyindicator                           = 1
action.keyindicator.title                     = Mean Count
action.keyindicator.subtitle                  = Count
action.keyindicator.value                     = current_mean
action.keyindicator.threshold                 = 
action.keyindicator.delta                     = delta
action.keyindicator.invert                    = false
action.keyindicator.group.0.name              = http_category
action.keyindicator.group.0.order             = 1
dispatch.latest_time                          = now
display.general.enablePreview                 = 1
display.general.timeRangePicker.show          = false
display.general.type                          = visualizations
display.statistics.rowNumbers                 = 0
display.statistics.wrap                       = 0
display.visualizations.charting.drilldown     = all
display.visualizations.singlevalue.underLabel = Mean Count
display.visualizations.show                   = 1
display.visualizations.type                   = singlevalue
search                                        = | tstats `summariesonly` count from datamodel=Web where earliest=-24h@h latest=+0s by Web.category | stats avg(count) as current_mean | appendcols [| tstats `summariesonly` count from datamodel=Web where earliest=-48h@h latest=-24h@h by Web.category | stats avg(count) as historical_mean] | `get_delta(current_mean,historical_mean)`

[Web - HTTP Category Minimum Count]
action.email.reportServerEnabled              = 0
alert.track                                   = 0
action.keyindicator                           = 1
action.keyindicator.title                     = Minimum Count
action.keyindicator.subtitle                  = Count
action.keyindicator.value                     = current_min
action.keyindicator.threshold                 = 
action.keyindicator.delta                     = delta
action.keyindicator.invert                    = false
action.keyindicator.group.0.name              = http_category
action.keyindicator.group.0.order             = 0
dispatch.latest_time                          = now
display.general.enablePreview                 = 1
display.general.timeRangePicker.show          = false
display.general.type                          = visualizations
display.statistics.rowNumbers                 = 0
display.statistics.wrap                       = 0
display.visualizations.charting.drilldown     = all
display.visualizations.singlevalue.underLabel = Minimum Count
display.visualizations.show                   = 1
display.visualizations.type                   = singlevalue
search                                        = | tstats `summariesonly` count as current_min from datamodel=Web where earliest=-24h@h latest=+0s by Web.category | sort 1 + current_min | `drop_dm_object_name("Web")` | eval label=current_min." event(s) for HTTP category: ".category | appendcols [| tstats `summariesonly` count as historical_min from datamodel=Web where earliest=-48h@h latest=-24h@h by Web.category | sort 1 + historical_min | `drop_dm_object_name("Web")`] | fields label,current_min,historical_min | `get_delta(current_min,historical_min)`

[Web - HTTP Category Standard Deviation Count]
action.email.reportServerEnabled              = 0
alert.track                                   = 0
action.keyindicator                           = 1
action.keyindicator.title                     = Stdev Count
action.keyindicator.subtitle                  = Count
action.keyindicator.value                     = current_stdev
action.keyindicator.threshold                 = 
action.keyindicator.delta                     = delta
action.keyindicator.invert                    = false
action.keyindicator.group.0.name              = http_category
action.keyindicator.group.0.order             = 3
dispatch.latest_time                          = now
display.general.enablePreview                 = 1
display.general.timeRangePicker.show          = false
display.general.type                          = visualizations
display.statistics.rowNumbers                 = 0
display.statistics.wrap                       = 0
display.visualizations.charting.drilldown     = all
display.visualizations.singlevalue.underLabel = Standard Deviation Count
display.visualizations.show                   = 1
display.visualizations.type                   = singlevalue
search                                        = | tstats `summariesonly` count from datamodel=Web where earliest=-24h@h latest=+0s by Web.category | stats stdev(count) as current_stdev | appendcols [| tstats `summariesonly` count from datamodel=Web where earliest=-48h@h latest=-24h@h by Web.category | stats stdev(count) as historical_stdev] | `get_delta(current_stdev,historical_stdev)`

## URL Length Analysis

[Web - URL Count]
action.email.reportServerEnabled              = 0
alert.track                                   = 0
action.keyindicator                           = 1
action.keyindicator.title                     = Unique URLs
action.keyindicator.subtitle                  = Unique Count
action.keyindicator.value                     = current_count
action.keyindicator.threshold                 = 
action.keyindicator.delta                     = delta
action.keyindicator.invert                    = false
action.keyindicator.group.0.name              = url_length
action.keyindicator.group.0.order             = 4
action.keyindicator.group.1.name              = web_center
action.keyindicator.group.1.order             = 2
dispatch.latest_time                          = now
display.general.enablePreview                 = 1
display.general.timeRangePicker.show          = false
display.general.type                          = visualizations
display.statistics.rowNumbers                 = 0
display.statistics.wrap                       = 0
display.visualizations.charting.drilldown     = all
display.visualizations.singlevalue.underLabel = Unique URL Count
display.visualizations.show                   = 1
display.visualizations.type                   = singlevalue
search                                        = | tstats `summariesonly` estdc(Web.url) as current_count from datamodel=Web where earliest=-24h@h latest=+0s Web.url!=unknown | appendcols [| tstats `summariesonly` estdc(Web.url) as historical_count from datamodel=Web where earliest=-48h@h latest=-24h@h Web.url!=unknown] | `get_delta`

[Web - URL Maximum Length]
action.email.reportServerEnabled              = 0
alert.track                                   = 0
action.keyindicator                           = 1
action.keyindicator.title                     = Maximum URL Length
action.keyindicator.subtitle                  = Max Length
action.keyindicator.value                     = current_length
action.keyindicator.threshold                 = 
action.keyindicator.delta                     = delta
action.keyindicator.invert                    = false
action.keyindicator.group.0.name              = url_length
action.keyindicator.group.0.order             = 2
dispatch.latest_time                          = now
display.general.enablePreview                 = 1
display.general.timeRangePicker.show          = false
display.general.type                          = visualizations
display.statistics.rowNumbers                 = 0
display.statistics.wrap                       = 0
display.visualizations.charting.drilldown     = all
display.visualizations.singlevalue.underLabel = Maximum URL Length
display.visualizations.show                   = 1
display.visualizations.type                   = singlevalue
search                                        = | tstats `summariesonly` max(Web.url_length) as current_length from datamodel=Web where earliest=-24h@h latest=+0s Web.url!=unknown | appendcols [| tstats `summariesonly` max(Web.url_length) as historical_length from datamodel=Web where earliest=-48h@h latest=-24h@h Web.url!=unknown] | `get_delta(current_length,historical_length)`

[Web - URL Mean Length]
action.email.reportServerEnabled              = 0
alert.track                                   = 0
action.keyindicator                           = 1
action.keyindicator.title                     = Mean URL Length
action.keyindicator.subtitle                  = Mean Length
action.keyindicator.value                     = current_length
action.keyindicator.threshold                 = 
action.keyindicator.delta                     = delta
action.keyindicator.invert                    = false
action.keyindicator.group.0.name              = url_length
action.keyindicator.group.0.order             = 1
dispatch.latest_time                          = now
display.general.enablePreview                 = 1
display.general.timeRangePicker.show          = false
display.general.type                          = visualizations
display.statistics.rowNumbers                 = 0
display.statistics.wrap                       = 0
display.visualizations.charting.drilldown     = all
display.visualizations.singlevalue.underLabel = Mean URL Length
display.visualizations.show                   = 1
display.visualizations.type                   = singlevalue
search                                        = | tstats `summariesonly` avg(Web.url_length) as current_length from datamodel=Web where earliest=-24h@h latest=+0s Web.url!=unknown | appendcols [| tstats `summariesonly` avg(Web.url_length) as historical_length from datamodel=Web where earliest=-48h@h latest=-24h@h Web.url!=unknown] | `get_delta(current_length,historical_length)`

[Web - URL Minimum Length]
action.email.reportServerEnabled              = 0
alert.track                                   = 0
action.keyindicator                           = 1
action.keyindicator.title                     = Minimum URL Length
action.keyindicator.subtitle                  = Min Length
action.keyindicator.value                     = current_length
action.keyindicator.threshold                 = 
action.keyindicator.delta                     = delta
action.keyindicator.invert                    = false
action.keyindicator.group.0.name              = url_length
action.keyindicator.group.0.order             = 0
dispatch.latest_time                          = now
display.general.enablePreview                 = 1
display.general.timeRangePicker.show          = false
display.general.type                          = visualizations
display.statistics.rowNumbers                 = 0
display.statistics.wrap                       = 0
display.visualizations.charting.drilldown     = all
display.visualizations.singlevalue.underLabel = Minimum URL Length
display.visualizations.show                   = 1
display.visualizations.type                   = singlevalue
search                                        = | tstats `summariesonly` min(Web.url_length) as current_length from datamodel=Web where earliest=-24h@h latest=+0s Web.url!=unknown | appendcols [| tstats `summariesonly` min(Web.url_length) as historical_length from datamodel=Web where earliest=-48h@h latest=-24h@h Web.url!=unknown] | `get_delta(current_length,historical_length)`

[Web - URL Length Standard Deviation]
action.email.reportServerEnabled              = 0
alert.track                                   = 0
action.keyindicator                           = 1
action.keyindicator.title                     = Stdev URL Length
action.keyindicator.subtitle                  = Stdev Length
action.keyindicator.value                     = current_length
action.keyindicator.threshold                 = 
action.keyindicator.delta                     = delta
action.keyindicator.invert                    = false
action.keyindicator.group.0.name              = url_length
action.keyindicator.group.0.order             = 3
dispatch.latest_time                          = now
display.general.enablePreview                 = 1
display.general.timeRangePicker.show          = false
display.general.type                          = visualizations
display.statistics.rowNumbers                 = 0
display.statistics.wrap                       = 0
display.visualizations.charting.drilldown     = all
display.visualizations.singlevalue.underLabel = URL Length Standard Deviation
display.visualizations.show                   = 1
display.visualizations.type                   = singlevalue
search                                        = | tstats `summariesonly` stdev(Web.url_length) as current_length from datamodel=Web where earliest=-24h@h latest=+0s Web.url!=unknown | appendcols [| tstats `summariesonly` stdev(Web.url_length) as historical_length from datamodel=Web where earliest=-48h@h latest=-24h@h Web.url!=unknown] | `get_delta(current_length,historical_length)`

## HTTP User Agent Analysis

[Web - User Agent Count]
action.email.reportServerEnabled              = 0
alert.track                                   = 0
action.keyindicator                           = 1
action.keyindicator.title                     = Unique User Agents
action.keyindicator.subtitle                  = Unique Count
action.keyindicator.value                     = current_count
action.keyindicator.threshold                 = 
action.keyindicator.delta                     = delta
action.keyindicator.invert                    = false
action.keyindicator.group.0.name              = http_user_agent
action.keyindicator.group.0.order             = 4
action.keyindicator.group.1.name              = web_center
action.keyindicator.group.1.order             = 1
dispatch.latest_time                          = now
display.general.enablePreview                 = 1
display.general.timeRangePicker.show          = false
display.general.type                          = visualizations
display.statistics.rowNumbers                 = 0
display.statistics.wrap                       = 0
display.visualizations.charting.drilldown     = all
display.visualizations.singlevalue.underLabel = Unique User Agents
display.visualizations.show                   = 1
display.visualizations.type                   = singlevalue
search                                        = | tstats `summariesonly` estdc(Web.http_user_agent) as current_count from datamodel=Web where earliest=-24h@h latest=+0s Web.http_user_agent!=unknown | appendcols [| tstats `summariesonly` estdc(Web.http_user_agent) as historical_count from datamodel=Web where earliest=-48h@h latest=-24h@h Web.http_user_agent!=unknown] | `get_delta`

[Web - User Agent Maximum Length]
action.email.reportServerEnabled              = 0
alert.track                                   = 0
action.keyindicator                           = 1
action.keyindicator.title                     = Maximum UA Length
action.keyindicator.subtitle                  = Max Length
action.keyindicator.value                     = current_length
action.keyindicator.threshold                 = 
action.keyindicator.delta                     = delta
action.keyindicator.invert                    = false
action.keyindicator.group.0.name              = http_user_agent
action.keyindicator.group.0.order             = 2
dispatch.latest_time                          = now
display.general.enablePreview                 = 1
display.general.timeRangePicker.show          = false
display.general.type                          = visualizations
display.statistics.rowNumbers                 = 0
display.statistics.wrap                       = 0
display.visualizations.charting.drilldown     = all
display.visualizations.singlevalue.underLabel = Maximum User Agent Length
display.visualizations.show                   = 1
display.visualizations.type                   = singlevalue
search                                        = | tstats `summariesonly` max(Web.http_user_agent_length) as current_length from datamodel=Web where earliest=-24h@h latest=+0s Web.http_user_agent!=unknown | appendcols [| tstats `summariesonly` max(Web.http_user_agent_length) as historical_length from datamodel=Web where earliest=-48h@h latest=-24h@h Web.http_user_agent!=unknown] | `get_delta(current_length,historical_length)`

[Web - User Agent Mean Length]
action.email.reportServerEnabled              = 0
alert.track                                   = 0
action.keyindicator                           = 1
action.keyindicator.title                     = Mean UA Length
action.keyindicator.subtitle                  = Mean Length
action.keyindicator.value                     = current_length
action.keyindicator.threshold                 = 
action.keyindicator.delta                     = delta
action.keyindicator.invert                    = false
action.keyindicator.group.0.name              = http_user_agent
action.keyindicator.group.0.order             = 1
dispatch.latest_time                          = now
display.general.enablePreview                 = 1
display.general.timeRangePicker.show          = false
display.general.type                          = visualizations
display.statistics.rowNumbers                 = 0
display.statistics.wrap                       = 0
display.visualizations.charting.drilldown     = all
display.visualizations.singlevalue.underLabel = Mean User Agent Length
display.visualizations.show                   = 1
display.visualizations.type                   = singlevalue
search                                        = | tstats `summariesonly` avg(Web.http_user_agent_length) as current_length from datamodel=Web where earliest=-24h@h latest=+0s Web.http_user_agent!=unknown | appendcols [| tstats `summariesonly` avg(Web.http_user_agent_length) as historical_length from datamodel=Web where earliest=-48h@h latest=-24h@h Web.http_user_agent!=unknown] | `get_delta(current_length,historical_length)`

[Web - User Agent Minimum Length]
action.email.reportServerEnabled              = 0
alert.track                                   = 0
action.keyindicator                           = 1
action.keyindicator.title                     = Minimum UA Length
action.keyindicator.subtitle                  = Min Length
action.keyindicator.value                     = current_length
action.keyindicator.threshold                 = 
action.keyindicator.delta                     = delta
action.keyindicator.invert                    = false
action.keyindicator.group.0.name              = http_user_agent
action.keyindicator.group.0.order             = 0
dispatch.latest_time                          = now
display.general.enablePreview                 = 1
display.general.timeRangePicker.show          = false
display.general.type                          = visualizations
display.statistics.rowNumbers                 = 0
display.statistics.wrap                       = 0
display.visualizations.charting.drilldown     = all
display.visualizations.singlevalue.underLabel = Minimum User Agent Length
display.visualizations.show                   = 1
display.visualizations.type                   = singlevalue
search                                        = | tstats `summariesonly` min(Web.http_user_agent_length) as current_length from datamodel=Web where earliest=-24h@h latest=+0s Web.http_user_agent!=unknown | appendcols [| tstats `summariesonly` min(Web.http_user_agent_length) as historical_length from datamodel=Web where earliest=-48h@h latest=-24h@h Web.http_user_agent!=unknown] | `get_delta(current_length,historical_length)`

[Web - User Agent Length Standard Deviation]
action.email.reportServerEnabled              = 0
alert.track                                   = 0
action.keyindicator                           = 1
action.keyindicator.title                     = Stdev UA Length
action.keyindicator.subtitle                  = Stdev Length
action.keyindicator.value                     = current_length
action.keyindicator.threshold                 = 
action.keyindicator.delta                     = delta
action.keyindicator.invert                    = false
action.keyindicator.group.0.name              = http_user_agent
action.keyindicator.group.0.order             = 3
dispatch.latest_time                          = now
display.general.enablePreview                 = 1
display.general.timeRangePicker.show          = false
display.general.type                          = visualizations
display.statistics.rowNumbers                 = 0
display.statistics.wrap                       = 0
display.visualizations.charting.drilldown     = all
display.visualizations.singlevalue.underLabel = User Agent Length Standard Deviation
display.visualizations.show                   = 1
display.visualizations.type                   = singlevalue
search                                        = | tstats `summariesonly` stdev(Web.http_user_agent_length) as current_length from datamodel=Web where earliest=-24h@h latest=+0s Web.http_user_agent!=unknown | appendcols [| tstats `summariesonly` stdev(Web.http_user_agent_length) as historical_length from datamodel=Web where earliest=-48h@h latest=-24h@h Web.http_user_agent!=unknown] | `get_delta(current_length,historical_length)`

## Web Center
[Web - Destination Count]
action.email.reportServerEnabled              = 0
alert.track                                   = 0
action.keyindicator                           = 1
action.keyindicator.title                     = Unique Destinations
action.keyindicator.subtitle                  = Unique Count
action.keyindicator.value                     = current_count
action.keyindicator.threshold                 = 
action.keyindicator.delta                     = delta
action.keyindicator.invert                    = false
action.keyindicator.group.0.name              = web_center
action.keyindicator.group.0.order             = 4
dispatch.latest_time                          = now
display.general.enablePreview                 = 1
display.general.timeRangePicker.show          = false
display.general.type                          = visualizations
display.statistics.rowNumbers                 = 0
display.statistics.wrap                       = 0
display.visualizations.charting.drilldown     = all
display.visualizations.singlevalue.underLabel = Unique Destinations
display.visualizations.show                   = 1
display.visualizations.type                   = singlevalue
search                                        = | tstats `summariesonly` estdc(Web.dest) as current_count from datamodel=Web where earliest=-24h@h latest=+0s Web.dest!=unknown | appendcols [| tstats `summariesonly` estdc(Web.dest) as historical_count from datamodel=Web where earliest=-48h@h latest=-24h@h Web.dest!=unknown] | `get_delta`

[Web - Source Count]
action.email.reportServerEnabled              = 0
alert.track                                   = 0
action.keyindicator                           = 1
action.keyindicator.title                     = Unique Sources
action.keyindicator.subtitle                  = Unique Count
action.keyindicator.value                     = current_count
action.keyindicator.threshold                 = 
action.keyindicator.delta                     = delta
action.keyindicator.invert                    = false
action.keyindicator.group.0.name              = web_center
action.keyindicator.group.0.order             = 3
dispatch.latest_time                          = now
display.general.enablePreview                 = 1
display.general.timeRangePicker.show          = false
display.general.type                          = visualizations
display.statistics.rowNumbers                 = 0
display.statistics.wrap                       = 0
display.visualizations.charting.drilldown     = all
display.visualizations.singlevalue.underLabel = Unique Sources
display.visualizations.show                   = 1
display.visualizations.type                   = singlevalue
search                                        = | tstats `summariesonly` estdc(Web.src) as current_count from datamodel=Web where earliest=-24h@h latest=+0s Web.src!=unknown | appendcols [| tstats `summariesonly` estdc(Web.src) as historical_count from datamodel=Web where earliest=-48h@h latest=-24h@h Web.src!=unknown] | `get_delta`


###### Report Searches ######
[Web - Events Over Time By Action]
action.email.reportServerEnabled                = 0
alert.track                                     = 0
dispatch.earliest_time                          = -24h@h
dispatch.latest_time                            = now
display.general.enablePreview                   = 1
display.general.type                            = visualizations
display.statistics.rowNumbers                   = 0
display.statistics.wrap                         = 0
display.visualizations.charting.chart           = column
display.visualizations.charting.drilldown       = all
display.visualizations.charting.chart.stackMode = stacked
display.visualizations.show                     = 1
display.visualizations.type                     = charting
search                                          = | `tstats` count from datamodel=Web by _time,Web.action span=10m | timechart minspan=10m useother=`useother` count by Web.action | `drop_dm_object_name("Web")`

[Web - Events Over Time By Content Type]
action.email.reportServerEnabled                = 0
alert.track                                     = 0
dispatch.earliest_time                          = -24h@h
dispatch.latest_time                            = now
display.general.enablePreview                   = 1
display.general.type                            = visualizations
display.statistics.rowNumbers                   = 0
display.statistics.wrap                         = 0
display.visualizations.charting.chart           = column
display.visualizations.charting.drilldown       = all
display.visualizations.charting.chart.stackMode = stacked
display.visualizations.show                     = 1
display.visualizations.type                     = charting
search                                          = | `tstats` count from datamodel=Web by _time,Web.http_content_type span=10m | timechart minspan=10m useother=`useother` count by Web.http_content_type | `drop_dm_object_name("Web")`

[Web - Events Over Time By Method]
action.email.reportServerEnabled                = 0
alert.track                                     = 0
dispatch.earliest_time                          = -24h@h
dispatch.latest_time                            = now
display.general.enablePreview                   = 1
display.general.type                            = visualizations
display.statistics.rowNumbers                   = 0
display.statistics.wrap                         = 0
display.visualizations.charting.chart           = column
display.visualizations.charting.drilldown       = all
display.visualizations.charting.chart.stackMode = stacked
display.visualizations.show                     = 1
display.visualizations.type                     = charting
search                                          = | `tstats` count from datamodel=Web by _time,Web.http_method span=10m | timechart minspan=10m useother=`useother` count by Web.http_method | `drop_dm_object_name("Web")`

[Web - Events Over Time By Status]
action.email.reportServerEnabled                = 0
alert.track                                     = 0
dispatch.earliest_time                          = -24h@h
dispatch.latest_time                            = now
display.general.enablePreview                   = 1
display.general.type                            = visualizations
display.statistics.rowNumbers                   = 0
display.statistics.wrap                         = 0
display.visualizations.charting.chart           = column
display.visualizations.charting.drilldown       = all
display.visualizations.charting.chart.stackMode = stacked
display.visualizations.show                     = 1
display.visualizations.type                     = charting
search                                          = | `tstats` count from datamodel=Web by _time,Web.status span=10m | timechart minspan=10m useother=`useother` count by Web.status | `drop_dm_object_name("Web")`

[Web - Events Over Time By User Agent]
action.email.reportServerEnabled                = 0
alert.track                                     = 0
dispatch.earliest_time                          = -24h@h
dispatch.latest_time                            = now
display.general.enablePreview                   = 1
display.general.type                            = visualizations
display.statistics.rowNumbers                   = 0
display.statistics.wrap                         = 0
display.visualizations.charting.chart           = column
display.visualizations.charting.drilldown       = all
display.visualizations.charting.chart.stackMode = stacked
display.visualizations.show                     = 1
display.visualizations.type                     = charting
search                                          = | `tstats` count from datamodel=Web by _time,Web.http_user_agent span=10m | timechart minspan=10m useother=`useother` count by Web.http_user_agent | `drop_dm_object_name("Web")`

[Web - Total Events By Action]
action.email.reportServerEnabled                = 0
alert.track                                     = 0
dispatch.earliest_time                          = -24h@h
dispatch.latest_time                            = now
display.general.enablePreview                   = 1
display.general.type                            = visualizations
display.statistics.rowNumbers                   = 0
display.statistics.wrap                         = 0
display.visualizations.charting.axisTitleY.text = count
display.visualizations.charting.chart           = bar
display.visualizations.charting.drilldown       = all
display.visualizations.chartHeight              = 350
display.visualizations.show                     = 1
search                                          = | tstats `summariesonly` count from datamodel=Web by Web.action | `drop_dm_object_name("Web")` | sort 10 - count

[Web - Total Events By Content Type]
action.email.reportServerEnabled                = 0
alert.track                                     = 0
dispatch.earliest_time                          = -24h@h
dispatch.latest_time                            = now
display.general.enablePreview                   = 1
display.general.type                            = visualizations
display.statistics.rowNumbers                   = 0
display.statistics.wrap                         = 0
display.visualizations.charting.axisTitleY.text = count
display.visualizations.charting.chart           = bar
display.visualizations.charting.drilldown       = all
display.visualizations.chartHeight              = 350
display.visualizations.show                     = 1
search                                          = | tstats `summariesonly` count from datamodel=Web by Web.http_content_type | `drop_dm_object_name("Web")` | sort 10 - count

[Web - Total Events By Method]
action.email.reportServerEnabled                = 0
alert.track                                     = 0
dispatch.earliest_time                          = -24h@h
dispatch.latest_time                            = now
display.general.enablePreview                   = 1
display.general.type                            = visualizations
display.statistics.rowNumbers                   = 0
display.statistics.wrap                         = 0
display.visualizations.charting.axisTitleY.text = count
display.visualizations.charting.chart           = bar
display.visualizations.charting.drilldown       = all
display.visualizations.chartHeight              = 350
display.visualizations.show                     = 1
search                                          = | tstats `summariesonly` count from datamodel=Web by Web.http_method | `drop_dm_object_name("Web")` | sort 10 - count

[Web - Total Events By Status]
action.email.reportServerEnabled                = 0
alert.track                                     = 0
dispatch.earliest_time                          = -24h@h
dispatch.latest_time                            = now
display.general.enablePreview                   = 1
display.general.type                            = visualizations
display.statistics.rowNumbers                   = 0
display.statistics.wrap                         = 0
display.visualizations.charting.axisTitleY.text = count
display.visualizations.charting.chart           = bar
display.visualizations.charting.drilldown       = all
display.visualizations.chartHeight              = 350
display.visualizations.show                     = 1
search                                          = | tstats `summariesonly` count from datamodel=Web by Web.status | `drop_dm_object_name("Web")` | sort 10 - count

[Web - Total Events By User Agent]
action.email.reportServerEnabled                = 0
alert.track                                     = 0
dispatch.earliest_time                          = -24h@h
dispatch.latest_time                            = now
display.general.enablePreview                   = 1
display.general.type                            = visualizations
display.statistics.rowNumbers                   = 0
display.statistics.wrap                         = 0
display.visualizations.charting.axisTitleY.text = count
display.visualizations.charting.chart           = bar
display.visualizations.charting.drilldown       = all
display.visualizations.chartHeight              = 350
display.visualizations.show                     = 1
search                                          = | tstats `summariesonly` count from datamodel=Web by Web.http_user_agent | `drop_dm_object_name("Web")` | sort 10 - count

[Web - Top Sources]
action.email.reportServerEnabled = 0
alert.track                      = 0
dispatch.earliest_time           = -24h@h
dispatch.latest_time             = now
display.general.enablePreview    = 1
display.general.type             = statistics
display.statistics.drilldown     = row
display.statistics.rowNumbers    = 0
display.statistics.wrap          = 0
display.visualizations.show      = 0
search                           = | tstats `summariesonly` dc(Web.dest) as dc(dest),dc(Web.url) as dc(url),count,sum(Web.bytes) as bytes from datamodel=Web by Web.src | `drop_dm_object_name("Web")` | sort 100 - bytes

[Web - Top Destinations]
action.email.reportServerEnabled = 0
alert.track                      = 0
dispatch.earliest_time           = -24h@h
dispatch.latest_time             = now
display.general.enablePreview    = 1
display.general.type             = statistics
display.statistics.drilldown     = row
display.statistics.rowNumbers    = 0
display.statistics.wrap          = 0
display.visualizations.show      = 0
search                           = | tstats `summariesonly` dc(Web.src) as dc(src),dc(Web.url) as dc(url),count,sum(Web.bytes) as bytes from datamodel=Web by Web.dest | `drop_dm_object_name("Web")` | sort 100 - bytes

[Web - URL Length Over Time]
action.email.reportServerEnabled                    = 0
alert.track                                         = 0
dispatch.earliest_time                              = -24h@h
dispatch.latest_time                                = now
display.general.enablePreview                       = 1
display.general.type                                = visualizations
display.statistics.rowNumbers                       = 0
display.statistics.wrap                             = 0
display.visualizations.charting.chart               = line
display.visualizations.charting.chart.nullValueMode = connect
display.visualizations.charting.drilldown           = all
display.visualizations.show                         = 1
display.visualizations.type                         = charting
search                                              = | `tstats` min(Web.url_length),avg(Web.url_length),max(Web.url_length) from datamodel=Web by _time span=10m | timechart minspan=10m min(Web.url_length) as min(length),avg(Web.url_length) as avg(length),max(Web.url_length) as max(length)

## HTTP Category Analysis

[Web - HTTP Category Details]
action.email.reportServerEnabled = 0
alert.track                      = 0
dispatch.earliest_time           = -24h@h
dispatch.latest_time             = now
display.general.enablePreview    = 1
display.general.type             = statistics
display.statistics.drilldown     = row
display.statistics.rowNumbers    = 0
display.statistics.wrap          = 0
display.visualizations.show      = 0
search                           = | tstats `summariesonly` max(_time) as lastTime,dc(Web.src) as dc(src),dc(Web.dest) as dc(dest),count from datamodel=Web by Web.category | `drop_dm_object_name("Web")` | join type=outer category [| tstats `summariesonly` count from datamodel=Web where earliest=-24h@h latest=+0s by _time,Web.category span=`http_category_sparkline_span` | stats sparkline(sum(count),`http_category_sparkline_span`) as sparkline by Web.category | `drop_dm_object_name("Web")`] | `makemv(sparkline,",")` | eventstats avg(count) as mean_count,stdev(count) as stdev | `get_stdev_index(count)` | `round(Z)` | `per_panel_filter("ppf_http_category","category")` | rename ppf_filter as filter | sort -filter,+count | `uitime(lastTime)` | table category,filter,sparkline,dc(src),dc(dest),count,Z,lastTime

[Web - HTTP Category Distribution]
action.email.reportServerEnabled          = 0
alert.track                               = 0
dispatch.earliest_time                    = -24h@h
dispatch.latest_time                      = now
display.general.enablePreview             = 1
display.general.type                      = visualizations
display.statistics.rowNumbers             = 0
display.statistics.wrap                   = 0
display.visualizations.charting.chart     = scatter
display.visualizations.charting.drilldown = all
display.visualizations.show               = 1
display.visualizations.type               = charting
search                                    = | tstats `summariesonly` dc(Web.src) as dc(src),count from datamodel=Web by Web.category | eval category='Web.category' | `per_panel_filter("ppf_http_category","category")` | table category,count,dc(src)

## URL Length Analysis

[Web - URL Length Anomalies]
action.email.reportServerEnabled = 0
alert.track                      = 0
dispatch.earliest_time           = -24h@h
dispatch.latest_time             = now
display.general.enablePreview    = 1
display.general.type             = statistics
display.statistics.drilldown     = row
display.statistics.rowNumbers    = 0
display.statistics.wrap          = 1
display.visualizations.show      = 0
search                           = | tstats `summariesonly` max(_time) as lastTime,latest(Web.url_length) as length,dc(Web.src) as dc(src),dc(Web.dest) as dc(dest),count from datamodel=Web where Web.url!="unknown" [| inputlookup append=T url_length_tracker | search Z=2 | fields search] by Web.url | `drop_dm_object_name("Web")` | appendcols[| inputlookup append=T start=0 max=1 url_length_tracker | fields mean_length,stdev] | filldown mean_length,stdev | `get_stdev_index(length)` | `round(Z)`| `per_panel_filter("ppf_url_length","url")` | rename ppf_filter as filter | sort - filter,Z | `uitime(lastTime)` | table url,filter,length,dc(src),dc(dest),count,Z,lastTime

[Web - URL Length Anomalies Over Time]
action.email.reportServerEnabled = 0
alert.track                      = 0
dispatch.earliest_time           = -24h@h
dispatch.latest_time             = now
display.general.enablePreview    = 1
display.general.type             = statistics
display.statistics.drilldown     = row
display.statistics.rowNumbers    = 0
display.statistics.wrap          = 1
display.visualizations.show      = 0
search                           = | tstats `summariesonly` latest(Web.http_method) as http_method,count from datamodel=Web where Web.url!="unknown" [| inputlookup append=T url_length_tracker | search Z=2 | fields search] by _time,Web.url span=10m | `drop_dm_object_name("Web")` | `per_panel_filter("ppf_url_length","url")` | timechart minspan=10m sum(count) as count by http_method


## HTTP User Agent Analysis

[Web - User Agent Details]
action.email.reportServerEnabled = 0
alert.track                      = 0
dispatch.earliest_time           = -24h@h
dispatch.latest_time             = now
display.general.enablePreview    = 1
display.general.type             = statistics
display.statistics.drilldown     = row
display.statistics.rowNumbers    = 0
display.statistics.wrap          = 1
display.visualizations.show      = 0
search                           = | tstats `summariesonly` max(_time) as lastTime,dc(Web.src) as dc(src),dc(Web.dest) as dc(dest),latest(Web.http_user_agent_length) as length,count from datamodel=Web where Web.http_user_agent!=unknown by Web.http_user_agent | `drop_dm_object_name("Web")` | join type=outer http_user_agent [| tstats `summariesonly` count from datamodel=Web where earliest=-24h@h latest=+0s Web.http_user_agent!=unknown by _time,Web.http_user_agent span=`http_user_agent_sparkline_span` | stats sparkline(sum(count),`http_user_agent_sparkline_span`) as sparkline by Web.http_user_agent | `drop_dm_object_name("Web")`] | `makemv(sparkline,",")` | appendcols[| inputlookup append=T start=0 max=1 user_agent_length_tracker | fields mean_length,stdev] | filldown mean_length,stdev | `get_stdev_index(length)` | `round(Z)` | `per_panel_filter("ppf_http_user_agent","http_user_agent")` | rename ppf_filter as filter | sort - filter,Z | `uitime(lastTime)` | table http_user_agent,filter,sparkline,length,dc(src),dc(dest),count,Z,lastTime

[Web - User Agent Distribution]
action.email.reportServerEnabled                 = 0
alert.track                                      = 0
dispatch.earliest_time                           = -24h@h
dispatch.latest_time                             = now
display.general.enablePreview                    = 1
display.general.type                             = visualizations
display.statistics.rowNumbers                    = 0
display.statistics.wrap                          = 0
display.visualizations.charting.chart            = scatter
display.visualizations.charting.drilldown        = all
display.visualizations.charting.legend.placement = none
display.visualizations.show                      = 1
display.visualizations.type                      = charting
search                                           = | tstats `summariesonly` latest(Web.http_user_agent_length) as length,count from datamodel=Web where Web.http_user_agent!=unknown by Web.http_user_agent | eval http_user_agent='Web.http_user_agent' | `per_panel_filter("ppf_http_user_agent","http_user_agent")` | table http_user_agent,length,count


###########
## WHOIS
###########

###### Generating Searches ######

## Network - Whois Tracker - Checkpoint Gen Breakdown
## 1  - get the most recent occurance of all dest values in the web data model
## 2  - rename Web.dest as domain
## 3  - set keep_count=0 for most recent proxy event data
## 4  - input whois_tracker
## 6  - set keep_count=1 for whois_tracker data
## 7  - calculate discard as "sum(keep_count)" by domain
## 8  - discard events w/ discard=0
## 9  - persist _time,domain
## 10 - sort ascending based on time
## 11 - update whois_tracker
## 12 - `outputcheckpoint_whois` == outputcheckpoint or noop
## 13 - empty result set (| stats count)
[Network - Whois Tracker - Checkpoint Gen]
action.email.sendresults = 0
cron_schedule            = 30 * * * *
dispatch.earliest_time   = -70m@m
dispatch.latest_time     = +0s
enableSched              = 1
is_visible               = false
search                   = | tstats `summariesonly` max(_time) as _time from datamodel=Web by Web.dest | rename Web.dest as domain | `truncate_domain(domain)` | eval keep_count=0 | inputlookup append=T whois_tracker | eval keep_count=if(isnull(keep_count),1,keep_count) | eventstats sum(keep_count) as discard by domain | where discard==0 | stats min(_time) as _time by domain | sort 0 + _time | outputlookup append=T whois_tracker | `outputcheckpoint_whois` | stats count

## Network - Whois Tracker - Lookup Gen Breakdown
## 1 - get the most recent whois data
## 2 - rename fields
## 3 - input whois_tracker
## 4 - Truncate the domain field, to clean up any bad data.
## 5 - consolidate recent whois data and tracker data
## 6 - output whois_tracker
## 7 - empty result set (| stats count)
[Network - Whois Tracker - Lookup Gen]
action.email.sendresults = 0
cron_schedule            = 0 * * * *
dispatch.earliest_time   = -70m@m
dispatch.latest_time     = +0s
enableSched              = 1
is_visible               = false
search                   = | tstats `summariesonly` max(_time) as _time,latest(All_Domains.resolved_domain) as resolved_domain,latest(All_Domains.created) as created from datamodel=Domain_Analysis by All_Domains.domain | `drop_dm_object_name("All_Domains")` | inputlookup append=T whois_tracker | `truncate_domain(domain)` | stats max(_time) as _time,latest(resolved_domain) as resolved_domain,latest(created) as created by domain | outputlookup whois_tracker | stats count

###### Report Searches ######
[Whois - New Domain Activity]
action.email.reportServerEnabled = 0
alert.track                      = 0
dispatch.earliest_time           = -24h@h
dispatch.latest_time             = now
display.general.enablePreview    = 1
display.general.type             = statistics
display.statistics.drilldown     = row
display.statistics.rowNumbers    = 0
display.statistics.wrap          = 1
display.visualizations.show      = 0
search                           = | tstats `summariesonly` max(_time) as _time,count from datamodel=Web by Web.dest | `drop_dm_object_name("Web")` | `get_whois` | search (created=* NOT created="unknown") | eval "Age (days)"=ceil((now()-created)/86400) | where 'Age (days)'<=30 | eval domain=if(isnull(domain), dest, domain) | `swap_resolved_domain(domain)` | `per_panel_filter("ppf_new_domains","domain")` | rename ppf_filter as filter | eval resolved_domain=if(isnull(resolved_domain) OR resolved_domain=="unknown",null(),resolved_domain) | sort - filter,_time | `uitime(created)` | fields _time,dest,resolved_domain,filter,created,"Age (days)",count

[Whois - New Domain Activity By Age]
action.email.reportServerEnabled                 = 0
alert.track                                      = 0
dispatch.earliest_time                           = -24h@h
dispatch.latest_time                             = now
display.general.enablePreview                    = 1
display.general.type                             = visualizations
display.statistics.rowNumbers                    = 0
display.statistics.wrap                          = 0
display.visualizations.charting.chart            = scatter
display.visualizations.charting.drilldown        = all
display.visualizations.charting.legend.placement = none
display.visualizations.show                      = 1
display.visualizations.type                      = charting
search                                           = | tstats `summariesonly` count from datamodel=Web by Web.dest | `drop_dm_object_name("Web")` | `get_whois` | search (created=* NOT created="unknown") | eval age=ceil((now()-created)/86400) | where age<=30 | eval domain=if(isnull(domain), dest, domain) | `swap_resolved_domain(domain)` | `per_panel_filter("ppf_new_domains","domain")` | stats sum(count) as count by age | eval "Age (days)"=age | table "Age (days)",count

[Whois - New Domain Activity By TLD]
action.email.reportServerEnabled                 = 0
alert.track                                      = 0
dispatch.earliest_time                           = -24h@h
dispatch.latest_time                             = now
display.general.enablePreview                    = 1
display.general.type                             = visualizations
display.statistics.rowNumbers                    = 0
display.statistics.wrap                          = 0
display.visualizations.charting.chart            = bar
display.visualizations.charting.drilldown        = all
display.visualizations.charting.legend.placement = none
display.visualizations.show                      = 1
display.visualizations.type                      = charting
search                                           = | tstats `summariesonly` count from datamodel=Web by Web.dest | `drop_dm_object_name("Web")` | `get_whois` | search (created=* NOT created="unknown") | eval age=ceil((now()-created)/86400) | where age<=30 | eval domain=if(isnull(domain), dest, domain) | `swap_resolved_domain(domain)` | `per_panel_filter("ppf_new_domains","domain")` | `get_tld(domain)` | stats sum(count) as count by tld | sort 10 - count

[Whois - Registration Details]
action.email.reportServerEnabled = 0
alert.track                      = 0
dispatch.earliest_time           = -24h@h
dispatch.latest_time             = now
display.general.enablePreview    = 1
display.general.type             = statistics
display.statistics.drilldown     = row
display.statistics.rowNumbers    = 0
display.statistics.wrap          = 1
display.visualizations.show      = 0
search                           = | `datamodel("Domain_Analysis","All_Domains")` | head 1000 | `drop_dm_object_name("All_Domains")` | eval orig_domain=domain | `swap_resolved_domain(domain)` | `per_panel_filter("ppf_new_domains","domain")` | rename ppf_filter as filter | eval domain=orig_domain | eval resolved_domain=if(isnull(resolved_domain) OR resolved_domain=="unknown",null(),resolved_domain) | sort - filter,_time | `uitime(created)` | `uitime(expires)` | table _time domain resolved_domain filter created age expires nameservers registrant registrar
