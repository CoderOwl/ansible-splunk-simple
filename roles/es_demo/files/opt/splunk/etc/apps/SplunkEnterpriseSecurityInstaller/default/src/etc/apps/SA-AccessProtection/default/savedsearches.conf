
#####################
## Authentication
#####################

###### Base Searches ######

## Authentication base search breakdown
## 1.  Search for authentication events
## 2.  Table interesting fields for this search
[Access - All Authentication - Base]
action.postprocess = 0
enableSched        = 0
is_visible         = false
search             = `authentication` | table _time,action,app,src,src_bunit,src_category,src_pci_domain,src_user,src_user_bunit,src_user_category,dest,dest_bunit,dest_category,dest_pci_domain,user,user_bunit,user_category,tag

###### Correlation Searches ######
[Access - Brute Force Access Behavior Detected - Rule]
action.email.sendresults      = 0
action.risk                   = 1
action.risk._risk_object      = src
action.risk._risk_object_type = system
action.risk._risk_score       = 80
action.summary_index          = 1
action.summary_index._name    = notable
action.summary_index.ttl      = 1p
alert.digest_mode             = 1
alert.suppress                = 1
alert.suppress.fields         = src
alert.suppress.period         = 86300
alert.track                   = false
cron_schedule                 = */5 * * * *
disabled                      = True
dispatch.rt_backfill          = 1
dispatch.earliest_time        = rt-65m@m
dispatch.latest_time          = rt+5m@m
enableSched                   = 1
is_visible                    = false
search                        = | `datamodel("Authentication","Authentication")` | stats values(Authentication.tag) as tag,count(eval('Authentication.action'=="failure")) as failure,count(eval('Authentication.action'=="success")) as success by Authentication.src | `drop_dm_object_name("Authentication")` | search failure>6 success>0 | `settags("access")`

[Access - Cleartext Password At Rest - Rule]
action.email.sendresults      = 0
action.risk                   = 1
action.risk._risk_object      = dest
action.risk._risk_object_type = system
action.risk._risk_score       = 80
action.summary_index          = 1
action.summary_index._name    = notable
action.summary_index.ttl      = 1p
alert.digest_mode             = 1
alert.suppress                = 1
alert.suppress.fields         = dest,user,password
alert.suppress.period         = 86300
alert.track                   = false
cron_schedule                 = */5 * * * *
disabled                      = True
dispatch.earliest_time        = rt-5m@m
dispatch.latest_time          = rt+5m@m
dispatch.rt_backfill          = 1
enableSched                   = 1
is_visible                    = false
search                        = | datamodel "Compute_Inventory" "Cleartext_Passwords" search | stats max(_time) as "lastTime",latest(_raw) as "orig_raw",values(All_Inventory.tag) as "tag",count by "All_Inventory.dest","All_Inventory.User.user","All_Inventory.User.password" | rename "All_Inventory.dest" as "dest","All_Inventory.User.user" as "user","All_Inventory.User.password" as "password" | eval tag=mvjoin(tag,"|") | rename "tag" as "orig_tag"

[Access - Completely Inactive Account - Rule]
action.email.sendresults      = 0
action.risk                   = 1
action.risk._risk_object      = user
action.risk._risk_object_type = user
action.risk._risk_score       = 20
action.summary_index          = 1
action.summary_index._name    = notable
action.summary_index.ttl      = 1p
alert.digest_mode             = 1
alert.suppress                = 1
alert.suppress.fields         = user
alert.suppress.period         = 86300
alert.track                   = false
cron_schedule                 = 55 * * * *
disabled                      = True
dispatch.latest_time          = +0s
enableSched                   = 1
is_visible                    = false
search                        = | inputlookup append=T access_tracker  | where ((now()-'lastTime')/86400)>90

[Access - Default Account Usage - Rule]
action.email.sendresults      = 0
action.risk                   = 1
action.risk._risk_object      = dest
action.risk._risk_object_type = system
action.risk._risk_score       = 40
action.summary_index          = 1
action.summary_index._name    = notable
action.summary_index.ttl      = 1p
alert.digest_mode             = 1
alert.suppress                = 1
alert.suppress.fields         = user,dest,app
alert.suppress.period         = 86300
alert.track                   = false
cron_schedule                 = */5 * * * *
disabled                      = True
dispatch.earliest_time        = rt-5m@m
dispatch.latest_time          = rt+5m@m
dispatch.rt_backfill          = 1
enableSched                   = 1
is_visible                    = false
search                        = | datamodel "Authentication" "Successful_Default_Authentication" search | stats max(_time) as "lastTime",values(Authentication.tag) as "tag",count by "Authentication.dest","Authentication.user","Authentication.app" | rename "Authentication.dest" as "dest","Authentication.user" as "user","Authentication.app" as "app" | eval tag=mvjoin(tag,"|") | rename "tag" as "orig_tag"

[Access - Default Accounts At Rest - Rule]
action.email.sendresults      = 0
action.risk                   = 1
action.risk._risk_object      = dest
action.risk._risk_object_type = system
action.risk._risk_score       = 40
action.summary_index          = 1
action.summary_index._name    = notable
action.summary_index.ttl      = 1p
alert.digest_mode             = 1
alert.suppress                = 1
alert.suppress.fields         = user,dest
alert.suppress.period         = 86300
alert.track                   = false
cron_schedule                 = */5 * * * *
disabled                      = True
dispatch.earliest_time        = rt-5m@m
dispatch.latest_time          = rt+5m@m
dispatch.rt_backfill          = 1
enableSched                   = 1
is_visible                    = false
search                        = | datamodel "Compute_Inventory" "Default_Accounts" search | where NOT like('All_Inventory.User.shell',"%nologin") AND NOT like('All_Inventory.User.shell',"%false") AND 'All_Inventory.User.user'!="root" | stats max(_time) as "lastTime",latest(_raw) as "orig_raw",values(All_Inventory.tag) as "tag",count by "All_Inventory.dest","All_Inventory.User.user" | rename "All_Inventory.dest" as "dest","All_Inventory.User.user" as "user" | eval tag=mvjoin(tag,"|") | rename "tag" as "orig_tag"

## Setting Threshold @ 6 per 8.5.13
[Access - Excessive Failed Logins - Rule]
action.email.sendresults      = 0
action.risk                   = 1
action.risk._risk_object      = src
action.risk._risk_object_type = system
action.risk._risk_score       = 60
action.summary_index          = 1
action.summary_index._name    = notable
action.summary_index.ttl      = 1p
alert.digest_mode             = 1
alert.suppress                = 1
alert.suppress.fields         = app,src
alert.suppress.period         = 86300
alert.track                   = false
cron_schedule                 = */5 * * * *
disabled                      = True
dispatch.earliest_time        = rt-65m@m
dispatch.latest_time          = rt-5m@m
dispatch.rt_backfill          = 1
enableSched                   = 1
is_visible                    = false
search                        = | datamodel "Authentication" "Failed_Authentication" search | stats values(Authentication.tag) as "tag",dc(Authentication.user) as "user_count",dc(Authentication.dest) as "dest_count",count by "Authentication.app","Authentication.src" | rename "Authentication.app" as "app","Authentication.src" as "src" | where 'count'>=6 | eval tag=mvjoin(tag,"|") | rename "tag" as "orig_tag"

[Access - Inactive Account Usage - Rule]
action.email.sendresults      = 0
action.risk                   = 1
action.risk._risk_object      = user
action.risk._risk_object_type = user
action.risk._risk_score       = 40
action.summary_index          = 1
action.summary_index._name    = notable
action.summary_index.ttl      = 1p
alert.digest_mode             = 1
alert.suppress                = 1
alert.suppress.fields         = user
alert.suppress.period         = 86300
alert.track                   = false
cron_schedule                 = 55 * * * *
disabled                      = True
dispatch.latest_time          = +0s
enableSched                   = 1
is_visible                    = false
search                        = | `inactive_account_usage("90","1.25")` | `settags("access")` | `ctime(lastTime)` | fields + user,orig_tag,inactiveDays,lastTime | eval orig_time=_time

[Access - Insecure Or Cleartext Authentication - Rule]
action.email.sendresults      = 0
action.risk                   = 1
action.risk._risk_object      = dest
action.risk._risk_object_type = system
action.risk._risk_score       = 80
action.summary_index          = 1
action.summary_index._name    = notable
action.summary_index.ttl      = 1p
alert.digest_mode             = 1
alert.suppress                = 1
alert.suppress.fields         = app,dest
alert.suppress.period         = 86300
alert.track                   = false
cron_schedule                 = */5 * * * *
disabled                      = True
dispatch.earliest_time        = rt-5m@m
dispatch.latest_time          = rt+5m@m
dispatch.rt_backfill          = 1
enableSched                   = 1
is_visible                    = false
search                        = | datamodel "Authentication" "Insecure_Authentication" search | stats max(_time) as "lastTime",latest(_raw) as "orig_raw",values(Authentication.tag) as "tag",count by "Authentication.app","Authentication.dest" | rename "Authentication.app" as "app","Authentication.dest" as "dest" | eval tag=mvjoin(tag,"|") | rename "tag" as "orig_tag"


###### Lookup Generating Searches ######

## Access - Authentication Tracker - Lookup Gen Breakdown
## 1-2 - tstats query for successful authentication data
##   3 - renaming fields
##   4 - consolidation into min(_time), values(_time), and max(_time) by dest,user
##   5 - input access_tracker
##   6 - create the "second" field for access_tracker data
##  6a - we use mvappend (second2lastTime + lastTime) to support data in the tracker NOT in the tstats results
##   7 - consolidation into min(firstTime), values(second), and max(lastTime) by dest,user
##  7a - values() returns a values in lexicographical order (this is critical to the computation of second2lastTime)
##   8 - compute second2lastTime
##  8a - if there are 2 or more values, take the 2nd to last value mvcount-2, else take the single value
##   9 - write lookup
##  10 - purge results
[Access - Authentication Tracker - Lookup Gen]
action.email.sendresults = 0
cron_schedule            = 5 * * * *
dispatch.earliest_time   = -70m@m
dispatch.latest_time     = +0s
enableSched              = 1
is_visible               = false
search                   = | tstats `summariesonly` count from datamodel=Authentication where Authentication.action=success Authentication.dest!=unknown Authentication.user!=unknown by _time,Authentication.dest,Authentication.user span=1s | `drop_dm_object_name("Authentication")` | stats min(_time) as firstTime,values(_time) as second,max(_time) as lastTime by dest,user | inputlookup append=T access_tracker | eval second=if(isnull(second),mvappend(second2lastTime,lastTime),second) | stats min(firstTime) as firstTime,values(second) as second2lastTime,max(lastTime) as lastTime by dest,user | eval second2lastTime=if(mvcount(second2lastTime)>=2,mvindex(second2lastTime,mvcount(second2lastTime)-2),second2lastTime) | outputlookup access_tracker | stats count

## Access - Access App Tracker - Lookup Gen Breakdown
## 1-2 - tstats query for distinct apps
##   3 - input access_tracker
##   4 - consolidation of tstats and access_tracker
##   5 - write lookup
##   6 - purge results
[Access - Access App Tracker - Lookup Gen]
action.email.sendresults = 0
cron_schedule            = */15 * * * *
dispatch.earliest_time   = -20m@m
dispatch.latest_time     = +0s
enableSched              = 1
is_visible               = false
search                   = | tstats `summariesonly` min(_time) as firstTime,max(_time) as lastTime from datamodel=Authentication where Authentication.app!=unknown by Authentication.app | `drop_dm_object_name("Authentication")` | inputlookup append=T access_app_tracker | stats min(firstTime) as firstTime,max(lastTime) as lastTime by app | outputlookup access_app_tracker | stats count

