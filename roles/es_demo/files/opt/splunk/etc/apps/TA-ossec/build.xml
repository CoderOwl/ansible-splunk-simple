<?xml version="1.0"?>

<!-- solutions/TA-ossec/build.xml
     ant build file for TA-ossec
     Splunk, Inc.           			-->

<project name="TA-ossec" default="rebuild" basedir=".">

        <!-- Get the environment -->
        <property environment="env" />
       
        <!-- Set the name of the build (is typically the name of the app) -->
        <property name="build.name" value="Splunk_TA_ossec"/>

        <property name="codeline" value="${env.CODELINE}"/>

	<!-- Import the shared build content -->
        <import file="${env.SOLN_ROOT}/common/build/base_build.xml" />

	<!-- =================================================================== 
	     Common initialization tasks (can only be called internally)
	     =================================================================== -->
	<target name="-init">

		<!-- Set global properties
	         Make sure to define any properties referenced in a prop file before loading the file!
	         
	         Note that a property cannot be redefined.  Once set, it is immutable. -->

		<property name="soln.root" value="${env.SOLN_ROOT}"/>
		<property name="common.dir" value="${soln.root}/common"/>
		<property name="shared.dir" value="${soln.root}/shared"/>
		<property name="stage.dir" value="${basedir}/stage"/>
		
		<!-- load build properties -->
		<property file="${basedir}/local.build.properties"/>
		<property file="${basedir}/build.properties"/>

		<!-- set default properties -->
		<property name="package.dir" value="${basedir}/package" />
		<property name="stage.dir" value="${basedir}/stage"/>
	        
        	<property name="optimization" value="on"/>
		<property name="args" value=""/>

		<!-- for test library -->
		<echo message="optimization=${optimization}"  level="verbose" />
		<!-- Set the filenames -->
		<property name="package.output.filename" value="${build.name}"/>
		<property name="staged_package.dir" value="${stage.dir}/${build.name}" />
		<property name="codeline" value="${codeline}" />

	</target>

          <!-- ==================================================================
         Populate the staging directory with the app code
         ================================================================== -->
        <target name="populate_staging_directory" depends="-init,get_build_number">

                <property name="splunkbase.filename" value="${build.name}-${version.major}.${version.minor}.${version.revision}-${build.number}.${build.type}"/>
                <property name="final_package" value="${basedir}/${splunkbase.filename}" />


                <!-- Create the staging directory -->
                <mkdir dir="${stage.dir}" />
                <!-- Create the metadata directory -->
                <mkdir dir="${staged_package.dir}/metadata" />
                <concat destfile="${staged_package.dir}/metadata/default.meta" append="yes">
                        <fileset file="${shared.dir}/metadata/${codeline}/default.meta" />
                </concat>

                <!-- Copy in the licenses -->
                <copy file="${soln.root}/common/misc/license-eula.txt" todir="${staged_package.dir}"/>
                <copy file="${soln.root}/common/misc/license-eula.rtf" todir="${staged_package.dir}"/>

                <!-- Set up the filter for token replacements -->
                <filterset id="standard_token_replacements" begintoken="$${" endtoken="}">
                        <filtersfile file="${basedir}/build.properties" />
                        <filter token="version.build" value="${build.number}" />
                        <filter token="build.date" value="${build.date}" />
                </filterset>

                <filterset id="standard_token_replacements_legacy" begintoken="@" endtoken="@">
                        <filtersfile file="${basedir}/build.properties" />
                        <filter token="version.build" value="${build.number}" />
                        <filter token="build.date" value="${build.date}" />
                </filterset>

                <!-- Do token replacement on the necessary files -->
                <copy todir="${staged_package.dir}">
					<fileset dir ="${package.dir}" excludes="**/*.gif,**/*.png"/>
            		<filterset refid="standard_token_replacements"/>
            		<filterset refid="standard_token_replacements_legacy"/>
        		</copy>

				<!-- Copy files which were excluded from the above token replacement stage  -->
				<copy todir="${staged_package.dir}">
					<fileset dir ="${package.dir}" includes="**/*.gif,**/*.png"/>
				</copy>

                <replace file="${staged_package.dir}/default/app.conf" value="false">
                        <replacetoken>@isvisible@</replacetoken>
                </replace>

                <!-- Echo the version of the app this is being assembled -->
                <echo message="${version.major}.${version.minor}.${version.revision}.${build.number}"/>

        </target>

</project>
