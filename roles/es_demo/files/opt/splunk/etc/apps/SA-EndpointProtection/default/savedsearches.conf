
#####################
## Application State
#####################

###### Lookup Generating Searches ######
[Endpoint - Listening Ports Tracker - Lookup Gen]
action.email.sendresults = 0
cron_schedule            = 40 * * * *
dispatch.earliest_time   = -70m@m
dispatch.latest_time     = +0s
enableSched              = 1
is_visible               = false
search                   = | tstats `summariesonly` min(_time) as firstTime,max(_time) as lastTime from datamodel=Application_State where nodename=All_Application_State.Ports by All_Application_State.dest,All_Application_State.Ports.dest_port,All_Application_State.Ports.transport | `drop_dm_object_name("All_Application_State")` | `drop_dm_object_name("Ports")` | inputlookup append=T listeningports_tracker | stats min(firstTime) as firstTime,max(lastTime) as lastTime by dest,dest_port,transport | outputlookup listeningports_tracker | stats count

[Endpoint - Local Processes Tracker - Lookup Gen]
action.email.sendresults = 0
cron_schedule            = 40 * * * *
dispatch.earliest_time   = -70m@m
dispatch.latest_time     = +0s
enableSched              = 1
is_visible               = false
search                   = | tstats `summariesonly` min(_time) as firstTime,max(_time) as lastTime from datamodel=Application_State where nodename=All_Application_State.Processes by All_Application_State.dest,All_Application_State.process | `drop_dm_object_name("All_Application_State")` | inputlookup append=T localprocesses_tracker | stats min(firstTime) as firstTime,max(lastTime) as lastTime by dest,process | outputlookup localprocesses_tracker | stats count

[Endpoint - Services Tracker - Lookup Gen]
action.email.sendresults = 0
cron_schedule            = 40 * * * *
dispatch.earliest_time   = -70m@m
dispatch.latest_time     = +0s
enableSched              = 1
is_visible               = false
search                   = | tstats `summariesonly` min(_time) as firstTime,max(_time) as lastTime,latest(All_Application_State.Services.start_mode) as start_mode from datamodel=Application_State where nodename=All_Application_State.Services by All_Application_State.dest,All_Application_State.Services.service | `drop_dm_object_name("All_Application_State")` | `drop_dm_object_name("Services")` | inputlookup append=T services_tracker | sort 0 - lastTime | stats min(firstTime) as firstTime,max(lastTime) as lastTime,first(start_mode) as start_mode by dest,service | outputlookup services_tracker | stats count


#####################
## Compute Inventory
#####################

###### Lookup Generating Searches ######
[Endpoint - System Version Tracker - Lookup Gen]
action.email.sendresults = 0
cron_schedule            = 10 * * * *
dispatch.earliest_time   = -25m@m
dispatch.latest_time     = -5m@m
enableSched              = 1
is_visible               = false
search                   = | `datamodel("Compute_Inventory", "OS")` | `drop_dm_object_name("All_Inventory")` | `drop_dm_object_name("OS")` | inputlookup append=T system_version_tracker | stats max(_time) as _time,latest(os) as os by dest | fields _time,dest,os | outputlookup system_version_tracker | stats count

[Endpoint - User Account Tracker - Lookup Gen]
action.email.sendresults = 0
cron_schedule            = 10 * * * *
dispatch.earliest_time   = -25m@m
dispatch.latest_time     = -5m@m
enableSched              = 1
is_visible               = false
search                   = | `datamodel("Compute_Inventory", "User")` | `drop_dm_object_name("All_Inventory")` | `drop_dm_object_name("User")` | stats min(_time) as firstTime,max(_time) as lastTime,latest(interactive) as interactive by dest,user | inputlookup append=T useraccounts_tracker | eval _time=lastTime | stats min(firstTime) as firstTime,max(lastTime) as lastTime,latest(interactive) as interactive by dest,user | fields firstTime,lastTime,dest,user,interactive | outputlookup useraccounts_tracker | stats count


#####################
## Malware
#####################

###### Base Searches ######
[Endpoint - All Malware - Base]
action.postprocess = 0
enableSched        = 0
is_visible         = false
search             = `malware` | table _time,host,host_bunit,host_category,host_pci_domain,action,category,signature,dest,dest_bunit,dest_category,dest_pci_domain,dest_nt_domain,user,user_bunit,user_category,vendor_product,tag

###### Correlation Searches ######
[Endpoint - Recurring Malware Infection - Rule]
action.email.sendresults      = 0
action.risk                   = 1
action.risk._risk_object      = dest
action.risk._risk_object_type = system
action.risk._risk_score       = 80
action.summary_index          = 1
action.summary_index._name    = notable
action.summary_index.ttl      = 1p
alert.digest_mode             = 1
alert.suppress                = 1
alert.suppress.fields         = dest,signature
alert.suppress.period         = 86300
alert.track                   = false
cron_schedule                 = 45 * * * *
disabled                      = True
dispatch.earliest_time        = -10085m@m
dispatch.latest_time          = -5m@m
enableSched                   = 1
is_visible                    = false
search                        = | tstats allow_old_summaries=true dc(Malware_Attacks.date) as "day_count",count from datamodel=Malware where   nodename=Malware_Attacks  by "Malware_Attacks.dest","Malware_Attacks.signature" | rename "Malware_Attacks.dest" as "dest","Malware_Attacks.signature" as "signature" | where 'day_count'>3


###### Lookup Generating Searches ######

## Endpoint - Malware Tracker - Lookup Gen Breakdown
##   1 - get the most recent signature + dest pairings from datamodel=Malware
##   2 - field renaming
##   3 - input existing signature + det pairings
##   4 - consolidate event and tracker data
##   5 - write lookup
##   6 - purge results
[Endpoint - Malware Tracker - Lookup Gen]
action.email.sendresults = 0
cron_schedule            = 10 * * * *
dispatch.earliest_time   = -70m@m
dispatch.latest_time     = +0s
enableSched              = 1
is_visible               = false
search                   = | tstats `summariesonly` min(_time) as firstTime,max(_time) as lastTime from datamodel=Malware by Malware_Attacks.signature,Malware_Attacks.dest | `drop_dm_object_name("Malware_Attacks")` | inputlookup append=T malware_tracker | stats min(firstTime) as firstTime,max(lastTime) as lastTime by signature,dest | outputlookup malware_tracker | stats count

## Endpoint - Malware Operations Tracker - Lookup Gen Breakdown
##     1 - get the most recent malware operations data
##     2 - field renaming
##     3 - filter events that have a product or signature version
##     4 - create time_product_version==_time if product_version exists
##     5 - create time_signature_version==_time if signature_version exists
##     6 - consolidate events into _time,dest,dest_nt_domain,time_product_version,product_version,time_signature_version,signature_version,vendor_product
##    6a - this supports events the have either a product_version, a signature_version, or both
##     7 - perform a "| lookup" on the tracker to bring in "old" values for product_version and signature_version
##  8-11 - decide whether to keep old product and signature version values or new
##    8a - case1: if product_version_old isnull, take product_version
##    8b - case2: if product_version_old isnotnull (implied) and (product_version isnull OR product_version is older than product_version_old), keep product_version_old
##    8c - case3: if product_version_old isnotnull (implied) and (product_version isnotnull (implied) and product_version is newer than product_version_old (implied)) and product_version equal product_version_old, keep product_version_old
##    8d - case4: if product_version_old isnotnull (implied) and (product_version isnotnull (implied) and product_version is newer than product_version_old (implied)) and product_version not equal product_version_old (implied but specified anyway), take product_version
##  8-11 - repeat for time_product_version,signature_version, and time_signature_version respectively
##    12 - remove *_old fields
##    13 - inputlookup malware_operations_tracker data
##    14 - get latest _time,latest dest_nt_domain,latest vendor_product
##    15 - deduplicate based on dest
##    16 - write lookup
##    17 - purge results
[Endpoint - Malware Operations Tracker - Lookup Gen]
action.email.sendresults = 0
cron_schedule            = 15 0,4,8,12,16,20 * * *
dispatch.earliest_time   = -250m@m
dispatch.latest_time     = +0s
enableSched              = 1
is_visible               = false
search                   = | `datamodel("Malware", "Malware_Operations")` | `drop_dm_object_name("Malware_Operations")` | search (product_version=* OR signature_version=*) | eval time_product_version=if(isnotnull(product_version),_time,null()) | eval time_signature_version=if(isnotnull(signature_version),_time,null()) | stats latest(_time) as _time,latest(dest_nt_domain) as dest_nt_domain,latest(time_product_version) as time_product_version,latest(product_version) as product_version,latest(time_signature_version) as time_signature_version,latest(signature_version) as signature_version,latest(vendor_product) as vendor_product by dest | lookup malware_operations_tracker dest OUTPUT time_product_version as time_product_version_old,product_version as product_version_old,time_signature_version as time_signature_version_old,signature_version as signature_version_old | eval product_version=case(isnull(product_version_old),product_version,isnull(product_version) OR time_product_version<time_product_version_old,product_version_old,product_version==product_version_old,product_version_old,product_version!=product_version_old,product_version) | eval time_product_version=case(isnull(product_version_old),time_product_version,isnull(product_version) OR time_product_version<time_product_version_old,time_product_version_old,product_version==product_version_old,time_product_version_old,product_version!=product_version_old,time_product_version) | eval signature_version=case(isnull(signature_version_old),signature_version,isnull(signature_version) OR time_signature_version<time_signature_version_old,signature_version_old,signature_version==signature_version_old,signature_version_old,signature_version!=signature_version_old,signature_version) | eval time_signature_version=case(isnull(signature_version_old),time_signature_version,isnull(signature_version) OR time_signature_version<time_signature_version_old,time_signature_version_old,signature_version==signature_version_old,time_signature_version_old,signature_version!=signature_version_old,time_signature_version) | fields - *old | inputlookup append=T malware_operations_tracker | eventstats latest(_time) as _time by dest | eventstats latest(dest_nt_domain) as dest_nt_domain by dest | eventstats latest(vendor_product) as vendor_product by dest | dedup dest | outputlookup malware_operations_tracker | stats count

###### Summary Generating Searches ######
[Endpoint - Average Infection Length - Summary Gen]
action.email.sendresults   = 0
action.summary_index       = 1
action.summary_index._name = endpoint_summary
cron_schedule              = 50 * * * *
dispatch.latest_time       = +0s
enableSched                = 1
is_visible                 = false
search                     = | inputlookup append=T malware_tracker | eval dayDiff=(lastTime-firstTime)/86400 | stats avg(dayDiff) as avg_dayDiff by dest


#####################
## Performance
#####################

###### Correlation Searches ######
[Endpoint - Should Timesync Host Not Syncing - Rule]
action.email.sendresults      = 0
action.risk                   = 1
action.risk._risk_object      = dest
action.risk._risk_object_type = system
action.risk._risk_score       = 60
action.summary_index          = 1
action.summary_index._name    = notable
action.summary_index.ttl      = 1p
alert.digest_mode             = 1
alert.suppress                = 1
alert.suppress.fields         = dest
alert.suppress.period         = 86300
alert.track                   = false
cron_schedule                 = 5,20,35,50 * * * *
disabled                      = True
dispatch.earliest_time        = -30d@d
dispatch.latest_time          = now
enableSched                   = 1
is_visible                    = false
search                        = | tstats `summariesonly` max(_time) as lastTime,latest(All_Performance.dest_should_timesync) as should_timesync from datamodel=Performance where nodename=All_Performance.OS.Timesync All_Performance.OS.Timesync.action=failure All_Performance.dest_should_timesync=true by All_Performance.dest | `drop_dm_object_name("All_Performance")` | `hourDiff(lastTime)` | search hourDiff>2 | `ctime(lastTime)` | fields lastTime,dest,should_timesync,hourDiff


#####################
## SELinux
#####################

###### Lookup Generating Searches ######
[Endpoint - SELinux Config Tracker - Lookup Gen]
action.postprocess = 0
enableSched        = 0
is_visible         = false
search             = `selinuxconfig` | dedup host | stats count by _time,dest,selinux,selinuxtype,setlocaldefs | fields - count | inputlookup append=T selinuxconfig_tracker | sort 0 - _time | dedup dest | outputlookup selinuxconfig_tracker | stats count


#####################
## SSHD
#####################

###### Lookup Generating Searches ######
[Endpoint - SSHD Config Tracker - Lookup Gen]
action.postprocess = 0
enableSched        = 0
is_visible         = false
search             = `sshdconfig` | dedup host | stats count by _time,dest,sshd_protocol | fields - count | inputlookup append=T sshdconfig_tracker | sort 0 -_time | dedup dest | outputlookup sshdconfig_tracker | stats count


#####################
## Updates
#####################

###### Lookup Generating Searches ######

## Endpoint - Update Signature Reference - Lookup Gen Breakdown
##  1 - Get update events
##  2 - field renaming
##  3 - zip signature and signature_id into a single MV field
##  4 - mvexpand events based on signature_zipo
##  5 - extract SV signature and signature_id fields
##  6 - stats
##  7 - input existing data
##  8 - consolidate event and tracker data
##  9 - write lookup
## 10 - purge results
[Endpoint - Update Signature Reference - Lookup Gen]
action.email.sendresults = 0
cron_schedule            = 0 * * * *
dispatch.earliest_time   = -70m@m
dispatch.latest_time     = +0s
enableSched              = 1
is_visible               = false
search                   = | `datamodel("Updates", "Updates")` | `drop_dm_object_name("Updates")` | eval signature_zip=mvzip(signature,signature_id) | mvexpand signature_zip | rex field=signature_zip "(?<signature>.*)\,(?<signature_id>.*)" | stats min(_time) as firstTime,max(_time) as lastTime,latest(signature) as signature by signature_id,vendor_product | inputlookup append=T update_signature_reference_lookup | eval _time=lastTime | stats min(firstTime) as firstTime,max(lastTime) as lastTime,latest(signature) as signature by signature_id,vendor_product | outputlookup update_signature_reference_lookup | stats count
